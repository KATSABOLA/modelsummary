[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data and Model Summaries in R",
    "section": "",
    "text": "Home\nmodelsummary creates tables and plots to present descriptive statistics and to summarize statistical models in R."
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "Data and Model Summaries in R",
    "section": "What?",
    "text": "What?\nmodelsummary includes two families of functions:\n\nModel Summary\n\nmodelsummary: Regression tables with side-by-side models.\nmodelplot: Coefficient plots.\n\nData Summary\n\ndatasummary: Powerful tool to create (multi-level) cross-tabs and data summaries.\ndatasummary_crosstab: Cross-tabulations.\ndatasummary_balance: Balance tables with subgroup statistics and difference in means (aka “Table 1”).\ndatasummary_correlation: Correlation tables.\ndatasummary_skim: Quick overview (“skim”) of a dataset.\ndatasummary_df: Turn dataframes into nice tables with titles, notes, etc.\n\n\nWith these functions, you can create tables and plots like these:"
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "Data and Model Summaries in R",
    "section": "Why?",
    "text": "Why?\nHere are a few benefits of modelsummary over some alternative packages:\n\nEasy\nmodelsummary is very easy to use. This simple call often suffices:\nlibrary(modelsummary)\n\nmod &lt;- lm(y ~ x, dat)\nThe command above will automatically display a summary table in the Rstudio Viewer or in a web browser. All you need is one word to change the output format. For example, a text-only version of the table can be printed to the Console by typing:\nmodelsummary(mod, output = \"markdown\")\nTables in Microsoft Word and LaTeX formats can be saved to file by typing:\nmodelsummary(mod, output = \"table.docx\")\nmodelsummary(mod, output = \"table.tex\")\n\n\nFlexible\nInformation: The package offers many intuitive and powerful utilities to customize the information reported in a summary table. You can rename, reorder, subset or omit parameter estimates; choose the set of goodness-of-fit statistics to include; display various “robust” standard errors or confidence intervals; add titles, footnotes, or source notes; insert stars or custom characters to indicate levels of statistical significance; or add rows with supplemental information about your models.\nAppearance: Thanks to the gt, kableExtra, huxtable, flextable, and DT packages, the appearance of modelsummary tables is endlessly customizable. The appearance customization page shows tables with colored cells, weird text, spanning column labels, row groups, titles, source notes, footnotes, significance stars, and more. This only scratches the surface of possibilities.\nSupported models: Thanks to the broom and parameters, modelsummary supports hundreds of statistical models out-of-the-box. Installing other packages can extend the capabilities further (e.g., broom.mixed). It is also very easy to add or customize your own models.\nOutput formats: modelsummary tables can be saved to HTML, LaTeX, Text/Markdown, Microsoft Word, Powerpoint, RTF, JPG, or PNG formats. They can also be inserted seamlessly in Rmarkdown documents to produce automated documents and reports in PDF, HTML, RTF, or Microsoft Word formats.\n\n\nDangerous\nmodelsummary is dangerous! It allows users to do stupid stuff like replacing their intercepts by squirrels.\n\n\n\n\n\nReliable\nmodelsummary is reliably dangerous! The package is developed using a suite of unit tests with about 95% coverage, so it (probably) won’t break.\n\n\nCommunity\nmodelsummary does not try to do everything. Instead, it leverages the incredible work of the R community. By building on top of the broom and parameters packages, modelsummary already supports hundreds of model types out-of-the-box. modelsummary also supports five of the most popular table-building and customization packages: gt, kableExtra, huxtable, flextable, and DT packages. By using those packages, modelsummary allows users to produce beautiful, endlessly customizable tables in a wide variety of formats, including HTML, PDF, LaTeX, Markdown, and MS Word.\nOne benefit of this community-focused approach is that when external packages improve, modelsummary improves as well. Another benefit is that leveraging external packages allows modelsummary to have a massively simplified codebase (relative to other similar packages). This should improve long term code maintainability, and allow contributors to participate through GitHub."
  },
  {
    "objectID": "index.html#how",
    "href": "index.html#how",
    "title": "Data and Model Summaries in R",
    "section": "How?",
    "text": "How?\nYou can install modelsummary from CRAN:\ninstall.packages('modelsummary')\nYou can install the development version of modelsummary (and its dependency insight) from R-Universe:\ninstall.packages(\n    c(\"modelsummary\", \"insight\", \"performance\", \"parameters\"),\n    repos = c(\n        \"https://vincentarelbundock.r-universe.dev\",\n        \"https://easystats.r-universe.dev\"))\nRestart R completely before moving on."
  },
  {
    "objectID": "index.html#get-started",
    "href": "index.html#get-started",
    "title": "Data and Model Summaries in R",
    "section": "Get started",
    "text": "Get started\nThe GET STARTED vignette will walk you through the basics of modelsummary.\nYou will find that there are a million ways to customize the tables and plots produced by modelsummary, but the Get Started page only scratches the surface. For details, see the vignettes:\n\nData Summaries\nModel Summaries\nModel Plots\nmodelsummary extensions and customization\nThemes and Styles\n\n\nTest image\nwith(mtcars, plot(wt, mpg))"
  },
  {
    "objectID": "vignettes/get_started.html#data-summaries",
    "href": "vignettes/get_started.html#data-summaries",
    "title": "Getting started",
    "section": "Data Summaries",
    "text": "Data Summaries\nQuick overview of the data:\n\ndatasummary_skim(dat)\n\n\n\n\n\nUnique (#)\nMissing (%)\nMean\nSD\nMin\nMedian\nMax\n\n\n\n\n\nDonations\n85\n0\n7075.5\n5834.6\n1246.0\n5020.0\n37015.0\n\n\n\nLiteracy\n50\n0\n39.3\n17.4\n12.0\n38.0\n74.0\n\n\n\nCommerce\n84\n0\n42.8\n25.0\n1.0\n42.5\n86.0\n\n\n\nCrime_pers\n85\n0\n19754.4\n7504.7\n2199.0\n18748.5\n37014.0\n\n\n\nCrime_prop\n86\n0\n7843.1\n3051.4\n1368.0\n7595.0\n20235.0\n\n\n\nClergy\n85\n0\n43.4\n25.0\n1.0\n43.5\n86.0\n\n\n\n\n\n\n\n\nBalance table (aka “Table 1”) with differences in means by subgroups:\n\ndatasummary_balance(~Small, dat)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFALSE (N=43)\n\n\nTRUE (N=43)\n\n\n\n\n\nMean\nStd. Dev.\nMean\nStd. Dev.\nDiff. in Means\nStd. Error\n\n\n\n\nDonations\n7258.5\n6194.1\n6892.6\n5519.0\n-365.9\n1265.2\n\n\nLiteracy\n37.9\n19.1\n40.6\n15.6\n2.7\n3.8\n\n\nCommerce\n42.7\n24.6\n43.0\n25.7\n0.3\n5.4\n\n\nCrime_pers\n18040.6\n7638.4\n21468.2\n7044.3\n3427.7\n1584.6\n\n\nCrime_prop\n8422.5\n3406.7\n7263.7\n2559.3\n-1158.8\n649.8\n\n\nClergy\n39.1\n26.7\n47.7\n22.7\n8.6\n5.3\n\n\n\n\n\n\n\nCorrelation table:\n\ndatasummary_correlation(dat)\n\n\n\n\n\nDonations\nLiteracy\nCommerce\nCrime_pers\nCrime_prop\nClergy\n\n\n\n\nDonations\n1\n.\n.\n.\n.\n.\n\n\nLiteracy\n−.13\n1\n.\n.\n.\n.\n\n\nCommerce\n.30\n−.58\n1\n.\n.\n.\n\n\nCrime_pers\n−.04\n−.04\n.05\n1\n.\n.\n\n\nCrime_prop\n−.13\n−.37\n.41\n.27\n1\n.\n\n\nClergy\n.09\n−.17\n−.12\n.26\n−.07\n1\n\n\n\n\n\n\n\nTwo variables and two statistics, nested in subgroups:\n\ndatasummary(Literacy + Commerce ~ Small * (mean + sd), dat)\n\n\n\n\n\n\n\n\n\n\n\n\n\nFALSE\n\n\nTRUE\n\n\n\n\nmean\nsd\nmean\nsd\n\n\n\n\nLiteracy\n37.88\n19.08\n40.63\n15.57\n\n\nCommerce\n42.65\n24.59\n42.95\n25.75"
  },
  {
    "objectID": "vignettes/get_started.html#model-summaries",
    "href": "vignettes/get_started.html#model-summaries",
    "title": "Getting started",
    "section": "Model Summaries",
    "text": "Model Summaries\nEstimate a linear model and display the results:\n\nmod &lt;- lm(Donations ~ Crime_prop, data = dat)\n\nmodelsummary(mod)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n9065.287\n\n\n\n(1738.926)\n\n\nCrime_prop\n−0.254\n\n\n\n(0.207)\n\n\nNum.Obs.\n86\n\n\nR2\n0.018\n\n\nR2 Adj.\n0.006\n\n\nAIC\n1739.0\n\n\nBIC\n1746.4\n\n\nLog.Lik.\n−866.516\n\n\nF\n1.505\n\n\nRMSE\n5749.29\n\n\n\n\n\n\n\nEstimate five regression models, display the results side-by-side, and display the table:\n\nmodels &lt;- list(\n  \"OLS 1\"     = lm(Donations ~ Literacy + Clergy, data = dat),\n  \"Poisson 1\" = glm(Donations ~ Literacy + Commerce, family = poisson, data = dat),\n  \"OLS 2\"     = lm(Crime_pers ~ Literacy + Clergy, data = dat),\n  \"Poisson 2\" = glm(Crime_pers ~ Literacy + Commerce, family = poisson, data = dat),\n  \"OLS 3\"     = lm(Crime_prop ~ Literacy + Clergy, data = dat)\n)\n\nmodelsummary(models, stars = TRUE, gof_omit = \"IC|Adj|F|RMSE|Log\")\n\n\n\n\n\nOLS 1\nPoisson 1\n OLS 2\n Poisson 2\n OLS 3\n\n\n\n\n(Intercept)\n7948.667***\n8.241***\n16259.384***\n9.876***\n11243.544***\n\n\n\n(2078.276)\n(0.006)\n(2611.140)\n(0.003)\n(1011.240)\n\n\nLiteracy\n−39.121\n0.003***\n3.680\n0.000***\n−68.507***\n\n\n\n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n\n\nClergy\n15.257\n\n77.148*\n\n−16.376\n\n\n\n(25.735)\n\n(32.334)\n\n(12.522)\n\n\nCommerce\n\n0.011***\n\n0.001***\n\n\n\n\n\n(0.000)\n\n(0.000)\n\n\n\nNum.Obs.\n86\n86\n86\n86\n86\n\n\nR2\n0.020\n\n0.065\n\n0.152\n\n\n\n + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow, save it to a Microsoft Word document:\n\nmodelsummary(models, output = \"table.docx\")\n\nAnd draw a coefficient plot:\n\n# OLS models only\nols &lt;- models[grepl(\"OLS\", names(models))]\nmodelplot(ols, coef_omit = \"Intercept\")"
  },
  {
    "objectID": "vignettes/datasummary.html#background",
    "href": "vignettes/datasummary.html#background",
    "title": "Data Summaries",
    "section": "Background",
    "text": "Background\ndatasummary is built around the fantastic tables package for R. It is a thin “wrapper” which adds convenience functions and arguments; a user-interface consistent with modelsummary; cleaner html output; and the ability to export tables to more formats, including gt tables, flextable objects, and Microsoft Word documents.\ndatasummary is a general-purpose table-making tool. It allows us to build (nearly) any summary table we want by using simple 2-sided formulae. For example, in the expression x + y ~ mean + sd, the left-hand side of the formula identifies the variables or statistics to display as rows, and the right-hand side defines the columns. Below, we will see how variables and statistics can be “nested” with the * operator to produce tables like the ones above.\nIn addition to datasummary, the modelsummary package includes a “family” of companion functions named datasummary_*. These functions facilitate the production of standard, commonly used tables. This family currently includes:\n\ndatasummary(): Flexible function to create custom tables using 2-sided formulae.\ndatasummary_balance(): Group characteristics (e.g., control vs. treatment)\ndatasummary_correlation(): Table of correlations.\ndatasummary_skim(): Quick summary of a dataset.\ndatasummary_df(): Create a table from any dataframe.\ndatasummary_crosstab(): Cross tabulations of categorical variables.\n\nIn the next three sections, we illustrate how to use datasummary_balance, datasummary_correlation, datasummary_skim, and datasummary_crosstab. Then, we dive into datasummary itself to highlight its ease and flexibility."
  },
  {
    "objectID": "vignettes/datasummary.html#datasummary_skim",
    "href": "vignettes/datasummary.html#datasummary_skim",
    "title": "Data Summaries",
    "section": "datasummary_skim",
    "text": "datasummary_skim\nThe first datasummary companion function is called datasummary_skim. It was heavily inspired by one of my favorite data exploration tools for R: the skimr package. The goal of this function is to give us a quick look at the data.\nTo illustrate, we download data from the cool new palmerpenguins package by Alison Presmanes Hill and Allison Horst. These data were collected at the Palmer Station in Antarctica by Gorman, Williams & Fraser (2014), and they include 3 categorical variables and 4 numeric variables.\n\nlibrary(modelsummary)\nlibrary(tidyverse)\n\nurl &lt;- 'https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv'\npenguins &lt;- read.csv(url, na.strings = \"\")\n\nTo summarize the numeric variables in the dataset, we type:\n\ndatasummary_skim(penguins)\n\n\nTo summarize the categorical variables in the dataset, we type:\n\ndatasummary_skim(penguins, type = \"categorical\")\n\n\n\n\n  \n    \n    \n       \n        \n      N\n      %\n    \n  \n  \n    species\nAdelie\n152\n44.2\n    \nChinstrap\n68\n19.8\n    \nGentoo\n124\n36.0\n    island\nBiscoe\n168\n48.8\n    \nDream\n124\n36.0\n    \nTorgersen\n52\n15.1\n    sex\nfemale\n165\n48.0\n    \nmale\n168\n48.8\n    \nNA\n11\n3.2\n  \n  \n  \n\n\n\n\nLater in this tutorial, it will become clear that datasummary_skim is just a convenience “template” built around datasummary, since we can achieve identical results with the latter. For example, to produce a text-only version of the tables above, we can type:\n\ndatasummary(All(penguins) ~ Mean + SD + Histogram,\n            data = penguins,\n            output = 'markdown')\n\n|                  |    Mean|     SD|  Histogram|\n|:-----------------|-------:|------:|----------:|\n|bill_length_mm    |   43.92|   5.46|  ▁▅▆▆▆▇▇▂▁|\n|bill_depth_mm     |   17.15|   1.97| ▃▄▄▄▇▆▇▅▂▁|\n|flipper_length_mm |  200.92|  14.06|  ▂▅▇▄▁▄▄▂▁|\n|body_mass_g       | 4201.75| 801.95| ▁▄▇▅▄▄▃▃▂▁|\nPrinting histograms will not work on all computers. If you have issues with this feature, try changing your computer’s locale, or try using a different display font.\nThe datasummary_skim function does not currently allow users to summarize continuous and categorical variables together in a single table, but the datasummary_balance function described in the next section can do so."
  },
  {
    "objectID": "vignettes/datasummary.html#datasummary_balance",
    "href": "vignettes/datasummary.html#datasummary_balance",
    "title": "Data Summaries",
    "section": "datasummary_balance",
    "text": "datasummary_balance\nThe expressions “balance table” or “Table 1” refer to a type of table which is often printed in the opening pages of a scientific peer-reviewed article. Typically, this table includes basic descriptive statistics about different subsets of the study population. For instance, analysts may want to compare the socio-demographic characteristics of members of the “control” and “treatment” groups in a randomized control trial, or the flipper lengths of male and female penguins. In addition, balance tables often include difference in means tests.\nTo illustrate how to build a balance table using the datasummary_balance function, we download data about a job training experiment studies in Lalonde (1986). Then, we clean up the data by renaming and recoding a few variables.\n\n## Download and read data\ntraining &lt;- 'https://vincentarelbundock.github.io/Rdatasets/csv/Ecdat/Treatment.csv'\ntraining &lt;- read.csv(training, na.strings = \"\")\n\n## Rename and recode variables\ntraining &lt;- training %&gt;%\n            mutate(`Earnings Before` = re75 / 1000,\n                   `Earnings After` = re78 / 1000,\n                   Treatment = ifelse(treat == TRUE, 'Treatment', 'Control'),\n                   Married = ifelse(married == TRUE, 'Yes', 'No')) %&gt;%\n            select(`Earnings Before`,\n                   `Earnings After`,\n                   Treatment,\n                   Ethnicity = ethn,\n                   Age = age,\n                   Education = educ,\n                   Married)\n\nNow, we execute the datasummary_balance function. If the estimatr package is installed, datasummary_balance will calculate the difference in means and test statistics.\n\ncaption &lt;- 'Descriptive statistics about participants in a job training experiment. The earnings are displayed in 1000s of USD. This table was created using the \"datasummary\" function from the \"modelsummary\" package for R.'\nreference &lt;- 'Source: Lalonde (1986) American Economic Review.'\n\nlibrary(modelsummary)\ndatasummary_balance(~Treatment,\n                    data = training,\n                    title = caption,\n                    notes = reference)\n\nNote that if the dataset includes columns called “blocks”, “clusters”, or “weights”, this information will automatically be taken into consideration by estimatr when calculating the difference in means and the associated statistics.\nUsers can also use the ~ 1 formula to indicate that they want to summarize all the data instead of splitting the analysis across subgroups:\n\ndatasummary_balance(~ 1, data = training)\n\n\n\n\n  \n    \n    \n       \n        \n      Mean\n      Std. Dev.\n    \n  \n  \n    Earnings Before\n\n17.9\n13.9\n    Earnings After\n\n20.5\n15.6\n    Age\n\n34.2\n10.5\n    Education\n\n12.0\n3.1\n     \n  \nN\nPct.\n    Treatment\nControl\n2490\n93.1\n    \nTreatment\n185\n6.9\n    Ethnicity\nblack\n780\n29.2\n    \nhispanic\n92\n3.4\n    \nother\n1803\n67.4\n    Married\nNo\n483\n18.1\n    \nYes\n2192\n81.9"
  },
  {
    "objectID": "vignettes/datasummary.html#datasummary_correlation",
    "href": "vignettes/datasummary.html#datasummary_correlation",
    "title": "Data Summaries",
    "section": "datasummary_correlation",
    "text": "datasummary_correlation\nThe datasummary_correlation accepts a dataframe or tibble, it identifies all the numeric variables, and calculates the correlation between each of those variables:\n\ndatasummary_correlation(mtcars)\n\n\n\n\n  \n    \n    \n       \n      mpg\n      cyl\n      disp\n      hp\n      drat\n      wt\n      qsec\n      vs\n      am\n      gear\n      carb\n    \n  \n  \n    mpg\n1\n.\n.\n.\n.\n.\n.\n.\n.\n.\n.\n    cyl\n-.85\n1\n.\n.\n.\n.\n.\n.\n.\n.\n.\n    disp\n-.85\n.90\n1\n.\n.\n.\n.\n.\n.\n.\n.\n    hp\n-.78\n.83\n.79\n1\n.\n.\n.\n.\n.\n.\n.\n    drat\n.68\n-.70\n-.71\n-.45\n1\n.\n.\n.\n.\n.\n.\n    wt\n-.87\n.78\n.89\n.66\n-.71\n1\n.\n.\n.\n.\n.\n    qsec\n.42\n-.59\n-.43\n-.71\n.09\n-.17\n1\n.\n.\n.\n.\n    vs\n.66\n-.81\n-.71\n-.72\n.44\n-.55\n.74\n1\n.\n.\n.\n    am\n.60\n-.52\n-.59\n-.24\n.71\n-.69\n-.23\n.17\n1\n.\n.\n    gear\n.48\n-.49\n-.56\n-.13\n.70\n-.58\n-.21\n.21\n.79\n1\n.\n    carb\n-.55\n.53\n.39\n.75\n-.09\n.43\n-.66\n-.57\n.06\n.27\n1\n  \n  \n  \n\n\n\n\nThe values displayed in this table are equivalent to those obtained by calling: cor(x, use='pairwise.complete.obs').\nThe datasummary_correlation function has a methods argument. The default value is \"pearson\", but it also accepts other values like \"spearman\". In addition, method can accept any function which takes a data frame and returns a matrix. For example, we can create a custom function to display information from the correlation package. This allows us to include significance stars even if the stars argument is not supported by default in datasummary_correlation():\n\nlibrary(correlation)\nlibrary(modelsummary)\n\nfun &lt;- function(x) {\n  out &lt;- correlation(mtcars) |&gt;\n    summary() |&gt;\n    format(2) |&gt; \n    as.matrix()\n  row.names(out) &lt;- out[, 1]\n  out &lt;- out[, 2:ncol(out)]\n  return(out)\n}\n\ndatasummary_correlation(mtcars, method = fun)\n\n\n\n\n  \n    \n    \n       \n      carb\n      gear\n      am\n      vs\n      qsec\n      wt\n      drat\n      hp\n      disp\n      cyl\n    \n  \n  \n    mpg\n-.55*\n.48\n.60**\n.66**\n.42\n-.87***\n.68***\n-.78***\n-.85***\n-.85***\n    cyl\n.53*\n-.49\n-.52*\n-.81***\n-.59*\n.78***\n-.70***\n.83***\n.90***\n\n    disp\n.39\n-.56*\n-.59*\n-.71***\n-.43\n.89***\n-.71***\n.79***\n\n\n    hp\n.75***\n-.13\n-.24\n-.72***\n-.71***\n.66**\n-.45\n\n\n\n    drat\n-.09\n.70***\n.71***\n.44\n.09\n-.71***\n\n\n\n\n    wt\n.43\n-.58*\n-.69***\n-.55*\n-.17\n\n\n\n\n\n    qsec\n-.66**\n-.21\n-.23\n.74***\n\n\n\n\n\n\n    vs\n-.57*\n.21\n.17\n\n\n\n\n\n\n\n    am\n.06\n.79***\n\n\n\n\n\n\n\n\n    gear\n.27"
  },
  {
    "objectID": "vignettes/datasummary.html#datasummary_crosstab",
    "href": "vignettes/datasummary.html#datasummary_crosstab",
    "title": "Data Summaries",
    "section": "datasummary_crosstab",
    "text": "datasummary_crosstab\nA cross tabulation is often useful to explore the association between two categorical variables.\n\nlibrary(modelsummary)\nurl &lt;- 'https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv'\npenguins &lt;- read.csv(url, na.strings = \"\")\n\ndatasummary_crosstab(species ~ sex, data = penguins)\n\n\n\n\n  \n    \n    \n      species\n       \n      female\n      male\n      All\n    \n  \n  \n    Adelie\nN\n73\n73\n152\n    \n% row\n48.0\n48.0\n100.0\n    Chinstrap\nN\n34\n34\n68\n    \n% row\n50.0\n50.0\n100.0\n    Gentoo\nN\n58\n61\n124\n    \n% row\n46.8\n49.2\n100.0\n    All\nN\n165\n168\n344\n    \n% row\n48.0\n48.8\n100.0\n  \n  \n  \n\n\n\n\nYou can create multi-level crosstabs by specifying interactions using the * operator:\n\ndatasummary_crosstab(species ~ sex * island, data = penguins)\n\n\n\n\n  \n    \n    \n      species\n       \n      \n        female    \n      \n      \n        male    \n      \n      All\n    \n    \n      Biscoe\n      Dream\n      Torgersen\n      Biscoe \n      Dream \n      Torgersen \n    \n  \n  \n    Adelie\nN\n22\n27\n24\n22\n28\n23\n152\n    \n% row\n14.5\n17.8\n15.8\n14.5\n18.4\n15.1\n100.0\n    Chinstrap\nN\n0\n34\n0\n0\n34\n0\n68\n    \n% row\n0.0\n50.0\n0.0\n0.0\n50.0\n0.0\n100.0\n    Gentoo\nN\n58\n0\n0\n61\n0\n0\n124\n    \n% row\n46.8\n0.0\n0.0\n49.2\n0.0\n0.0\n100.0\n    All\nN\n80\n61\n24\n83\n62\n23\n344\n    \n% row\n23.3\n17.7\n7.0\n24.1\n18.0\n6.7\n100.0\n  \n  \n  \n\n\n\n\nBy default, the cell counts and row percentages are shown for each cell, and both row and column totals are calculated. To show cell percentages or column percentages, or to drop row and column totals, adjust the statistic argument. This argument accepts a formula that follows the datasummary “language”. To understand exactly how it works, you may find it useful to skip to the datasummary tutorial in the next section. Example:\n\ndatasummary_crosstab(species ~ sex,\n                     statistic = 1 ~ Percent(\"col\"),\n                     data = penguins)\n\n\n\n\n  \n    \n    \n      species\n       \n      female\n      male\n    \n  \n  \n    Adelie\n% col\n44.2\n43.5\n    Chinstrap\n% col\n20.6\n20.2\n    Gentoo\n% col\n35.2\n36.3\n    All\n% col\n100.0\n100.0\n  \n  \n  \n\n\n\n\nSee ?datasummary_crosstab for more details."
  },
  {
    "objectID": "vignettes/datasummary.html#datasummary",
    "href": "vignettes/datasummary.html#datasummary",
    "title": "Data Summaries",
    "section": "datasummary",
    "text": "datasummary\ndatasummary tables are specified using a 2-sided formula, divided by a tilde ~. The left-hand side describes the rows; the right-hand side describes the columns. To illustrate how this works, we will again be using the palmerpenguins dataset:\nTo display the flipper_length_mm variable as a row and the mean as a column, we type:\n\ndatasummary(flipper_length_mm ~ Mean,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      Mean\n    \n  \n  \n    flipper_length_mm\n200.92\n  \n  \n  \n\n\n\n\nTo flip rows and columns, we flip the left and right-hand sides of the formula:\n\ndatasummary(Mean ~ flipper_length_mm,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      flipper_length_mm\n    \n  \n  \n    Mean\n200.92\n  \n  \n  \n\n\n\n\n\nCustom summary functions\nThe Mean function is a shortcut supplied by modelsummary, and it is equivalent to mean(x,na.rm=TRUE). Since the flipper_length_mm variable includes missing observation, using the mean formula (with default na.rm=FALSE) would produce a missing/empty cell:\n\ndatasummary(flipper_length_mm ~ mean,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      mean\n    \n  \n  \n    flipper_length_mm\n\n  \n  \n  \n\n\n\n\nmodelsummary supplies these functions: Mean, SD, Min, Max, Median, P0, P25, P50, P75, P100, Histogram, and a few more (see the package documentation).\nUsers are also free to create and use their own custom summaries. Any R function which takes a vector and produces a single value is acceptable. For example, the Range functions return a numerical value, and the MinMax returns a string:\n\nRange &lt;- function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE)\n\ndatasummary(flipper_length_mm ~ Range,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      Range\n    \n  \n  \n    flipper_length_mm\n59.00\n  \n  \n  \n\n\n\nMinMax &lt;- function(x) paste0('[', min(x, na.rm = TRUE), ', ', max(x, na.rm = TRUE), ']')\n\ndatasummary(flipper_length_mm ~ MinMax,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      MinMax\n    \n  \n  \n    flipper_length_mm\n[172, 231]\n  \n  \n  \n\n\n\n\n\n\nConcatenating with +\nTo include more rows and columns, we use the + sign:\n\ndatasummary(flipper_length_mm + body_mass_g ~ Mean + SD,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n    \n  \n  \n    flipper_length_mm\n200.92\n14.06\n    body_mass_g\n4201.75\n801.95\n  \n  \n  \n\n\n\n\nSometimes, it can be cumbersome to list all variables separated by + signs. The All() function is a useful shortcut:\n\ndatasummary(All(penguins) ~ Mean + SD,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n    \n  \n  \n    rownames\n172.50\n99.45\n    bill_length_mm\n43.92\n5.46\n    bill_depth_mm\n17.15\n1.97\n    flipper_length_mm\n200.92\n14.06\n    body_mass_g\n4201.75\n801.95\n    year\n2008.03\n0.82\n  \n  \n  \n\n\n\n\nBy default, All selects all numeric variables. This behavior can be changed by modifying the function’s arguments. See ?All for details.\n\n\nNesting with *\ndatasummary can nest variables and statistics inside categorical variables using the * symbol. When applying the the * operator to factor, character, or logical variables, columns or rows will automatically be nested. For instance, if we want to display separate means for each value of the variable sex, we use mean * sex:\n\ndatasummary(flipper_length_mm + body_mass_g ~ mean * sex,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      female\n      male\n    \n  \n  \n    flipper_length_mm\n197.36\n204.51\n    body_mass_g\n3862.27\n4545.68\n  \n  \n  \n\n\n\n\nWe can use parentheses to nest several terms inside one another, using a call of this form: x * (y + z). Here is an example with nested columns:\n\ndatasummary(body_mass_g ~ sex * (mean + sd),\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      \n        female    \n      \n      \n        male    \n      \n    \n    \n      mean\n      sd\n      mean \n      sd \n    \n  \n  \n    body_mass_g\n3862.27\n666.17\n4545.68\n787.63\n  \n  \n  \n\n\n\n\nHere is an example with nested rows:\n\ndatasummary(sex * (body_mass_g + flipper_length_mm) ~ mean + sd,\n            data = penguins)\n\n\n\n\n  \n    \n    \n      sex\n       \n      mean\n      sd\n    \n  \n  \n    female\nbody_mass_g\n3862.27\n666.17\n    \nflipper_length_mm\n197.36\n12.50\n    male\nbody_mass_g\n4545.68\n787.63\n    \nflipper_length_mm\n204.51\n14.55\n  \n  \n  \n\n\n\n\nThe order in which terms enter the formula determines the order in which labels are displayed. For example, this shows island above sex:\n\ndatasummary(flipper_length_mm + body_mass_g ~ mean * island * sex,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      \n        Biscoe    \n      \n      \n        Dream    \n      \n      \n        Torgersen    \n      \n    \n    \n      female\n      male\n      female \n      male \n      female  \n      male  \n    \n  \n  \n    flipper_length_mm\n205.69\n213.29\n190.02\n196.31\n188.29\n194.91\n    body_mass_g\n4319.38\n5104.52\n3446.31\n3987.10\n3395.83\n4034.78\n  \n  \n  \n\n\n\n\nThis shows sex above island values:\n\ndatasummary(flipper_length_mm + body_mass_g ~ mean * sex * island,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      \n        female    \n      \n      \n        male    \n      \n    \n    \n      Biscoe\n      Dream\n      Torgersen\n      Biscoe \n      Dream \n      Torgersen \n    \n  \n  \n    flipper_length_mm\n205.69\n190.02\n188.29\n213.29\n196.31\n194.91\n    body_mass_g\n4319.38\n3446.31\n3395.83\n5104.52\n3987.10\n4034.78\n  \n  \n  \n\n\n\n\nBy default, datasummary omits column headers with a single value/label across all columns, except for the header that sits just above the data. If the header we want to see is not displayed, we may want to reorder the terms of the formula. To show all headers, set sparse_header=FALSE:\n\ndatasummary(flipper_length_mm + body_mass_g ~ mean * sex * island,\n            data = penguins,\n            sparse_header = FALSE)\n\n\n\n\n  \n    \n    \n       \n      \n        female    \n      \n      \n        male    \n      \n    \n    \n      Biscoe\n      Dream\n      Torgersen\n      Biscoe \n      Dream \n      Torgersen \n    \n  \n  \n    flipper_length_mm\n205.69\n190.02\n188.29\n213.29\n196.31\n194.91\n    body_mass_g\n4319.38\n3446.31\n3395.83\n5104.52\n3987.10\n4034.78\n  \n  \n  \n\n\n\n\nWhen using sparse_header=FALSE, it is often useful to insert Heading() * in the table formula, in order to rename or omit some of the labels manually. Type ?tables::Heading for details and examples.\n\n\nRenaming with =\nPersonally, I prefer to rename variables and values before drawing my tables, using backticks when variable names include whitespace. For example,\n\ntmp &lt;- penguins %&gt;%\n       select(`Flipper length (mm)` = flipper_length_mm,\n              `Body mass (g)` = body_mass_g)\n\ndatasummary(`Flipper length (mm)` + `Body mass (g)` ~ Mean + SD,\n            data = tmp)\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n    \n  \n  \n    Flipper length (mm)\n200.92\n14.06\n    Body mass (g)\n4201.75\n801.95\n  \n  \n  \n\n\n\n\nHowever, thanks to the tables package, datasummary offers two additional mechanisms to rename. First, we can wrap a term in parentheses and use the equal = sign: (NewName=OldName):\n\ndatasummary((`Flipper length (mm)` = flipper_length_mm) + (`Body mass (g)` = body_mass_g) ~\n            island * ((Avg. = Mean) + (Std.Dev. = SD)),\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      \n        Biscoe    \n      \n      \n        Dream    \n      \n      \n        Torgersen    \n      \n    \n    \n      Avg.\n      Std.Dev.\n      Avg. \n      Std.Dev. \n      Avg.  \n      Std.Dev.  \n    \n  \n  \n    Flipper length (mm)\n209.71\n14.14\n193.07\n7.51\n191.20\n6.23\n    Body mass (g)\n4716.02\n782.86\n3712.90\n416.64\n3706.37\n445.11\n  \n  \n  \n\n\n\n\nSecond, we can use the Heading() function:\n\ndatasummary(Heading(\"Flipper length (mm)\") * flipper_length_mm + Heading(\"Body mass (g)\") * body_mass_g ~ island * (Mean + SD),\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      \n        Biscoe    \n      \n      \n        Dream    \n      \n      \n        Torgersen    \n      \n    \n    \n      Mean\n      SD\n      Mean \n      SD \n      Mean  \n      SD  \n    \n  \n  \n    Flipper length (mm)\n209.71\n14.14\n193.07\n7.51\n191.20\n6.23\n    Body mass (g)\n4716.02\n782.86\n3712.90\n416.64\n3706.37\n445.11\n  \n  \n  \n\n\n\n\nThe Heading function also has a nearData argument which can be useful in cases where some rows are nested but others are not. Compare the last row of these two tables:\n\ndatasummary(sex * (flipper_length_mm + bill_length_mm) + Heading(\"Body mass (g)\") * body_mass_g ~ Mean + SD,\n            data = penguins)\n\n\n\n\n  \n    \n    \n      sex\n       \n      Mean\n      SD\n    \n  \n  \n    female\nflipper_length_mm\n197.36\n12.50\n    \nbill_length_mm\n42.10\n4.90\n    male\nflipper_length_mm\n204.51\n14.55\n    \nbill_length_mm\n45.85\n5.37\n    \nBody mass (g)\n4201.75\n801.95\n  \n  \n  \n\n\n\ndatasummary(sex * (flipper_length_mm + bill_length_mm) + Heading(\"Body mass (g)\", nearData=FALSE) * body_mass_g ~ Mean + SD,\n            data = penguins)\n\n\n\n\n  \n    \n    \n      sex\n       \n      Mean\n      SD\n    \n  \n  \n    female\nflipper_length_mm\n197.36\n12.50\n    \nbill_length_mm\n42.10\n4.90\n    male\nflipper_length_mm\n204.51\n14.55\n    \nbill_length_mm\n45.85\n5.37\n    Body mass (g)\n\n4201.75\n801.95\n  \n  \n  \n\n\n\n\n\n\nCounts and Percentages\nThe tables package allows datasummary to use neat tricks to produce frequency tables:\n\nAdd a N to the right-hand side of the equation.\nAdd Percent() to the right-hand side to calculate the percentage of observations in each cell.\nAdd 1 to the left-hand side to include a row with the total number of observations:\n\n\ndatasummary(species * sex + 1 ~ N + Percent(),\n            data = penguins)\n\n\n\n\n  \n    \n    \n      species\n      sex\n      N\n      Percent\n    \n  \n  \n    Adelie\nfemale\n73\n21.22\n    \nmale\n73\n21.22\n    Chinstrap\nfemale\n34\n9.88\n    \nmale\n34\n9.88\n    Gentoo\nfemale\n58\n16.86\n    \nmale\n61\n17.73\n    \nAll\n344\n100.00\n  \n  \n  \n\n\n\n\nNote that the Percent() function accepts a denom argument to determine if percentages should be calculated row or column-wise, or if they should take into account all cells.\n\n\nWeighted percentages\nThe Percent() pseudo-function also accepts a fn argument, which must be a function which accepts two vectors: x is the values in the current cell, and y is all the values in the whole dataset. The default fn is:\n\ndatasummary(species * sex + 1 ~ N + Percent(fn = function(x, y) 100 * length(x) / length(y)),\n            output = \"markdown\",\n            data = penguins)\n\n\n\n\nspecies\nsex\nN\nPercent\n\n\n\n\nAdelie\nfemale\n73\n21.22\n\n\n\nmale\n73\n21.22\n\n\nChinstrap\nfemale\n34\n9.88\n\n\n\nmale\n34\n9.88\n\n\nGentoo\nfemale\n58\n16.86\n\n\n\nmale\n61\n17.73\n\n\n\nAll\n344\n100.00\n\n\n\n\n\nThe code above takes the number of elements in the cell length(x) and divides it by the number of total elements length(y).\nNow, let’s say we want to display percentages weighted by one of the variables of the dataset. This can often be useful with survey weights, for example. Here, we use an arbitrary column of weights called flipper_length_mm:\n\nwtpct &lt;- function(x, y) sum(x, na.rm = TRUE) / sum(y, na.rm = TRUE) * 100\ndatasummary(species * sex + 1 ~ N + flipper_length_mm * Percent(fn = wtpct),\n            output = \"markdown\",\n            data = penguins)\n\n\n\n\nspecies\nsex\nN\nPercent\n\n\n\n\nAdelie\nfemale\n73\n19.95\n\n\n\nmale\n73\n20.44\n\n\nChinstrap\nfemale\n34\n9.49\n\n\n\nmale\n34\n9.89\n\n\nGentoo\nfemale\n58\n17.95\n\n\n\nmale\n61\n19.67\n\n\n\nAll\n344\n100.00\n\n\n\n\n\nIn each cell we now have the sum of weights in that cell, divided by the total sum of weights in the column.\n\n\nCustom percentages\nHere is another simple illustration of Percent function mechanism in action, where we combine counts and percentages in a simple nice label:\n\ndat &lt;- mtcars\ndat$cyl &lt;- as.factor(dat$cyl)\n\nfn &lt;- function(x, y) {\n    out &lt;- sprintf(\n        \"%s (%.1f%%)\",\n        length(x),\n        length(x) / length(y) * 100)\n}\ndatasummary(\n    cyl ~ Percent(fn = fn),\n    data = dat)\n\n\n\n\n  \n    \n    \n      cyl\n      Percent\n    \n  \n  \n    4\n11 (34.4%)\n    6\n7 (21.9%)\n    8\n14 (43.8%)\n  \n  \n  \n\n\n\n\n\n\nFactor\nThe * nesting operator that we used above works automatically for factor, character, and logical variables. Sometimes, it is convenient to use it with other types of variables, such as binary numeric variables. In that case, we can wrap the variable name inside a call to Factor(). This allows us to treat a variable as factor, without having to modify it in the original data. For example, in the mtcars data, there is a binary numeric variable call am. We nest statistics within categories of am by typing:\n\ndatasummary(mpg + hp ~ Factor(am) * (mean + sd),\n            data = mtcars)\n\n\n\n\n  \n    \n    \n       \n      \n        0    \n      \n      \n        1    \n      \n    \n    \n      mean\n      sd\n      mean \n      sd \n    \n  \n  \n    mpg\n17.15\n3.83\n24.39\n6.17\n    hp\n160.26\n53.91\n126.85\n84.06\n  \n  \n  \n\n\n\n\n\n\nArguments: na.rm=TRUE\nWe can pass any argument to the summary function by including a call to Arguments(). For instance, there are missing values in the flipper_length_mm variable of the penguins dataset. Therefore, the standard mean function will produce no result, because its default argument is na.rm=FALSE. We can change that by calling:\n\ndatasummary(flipper_length_mm ~ mean + mean*Arguments(na.rm=TRUE),\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      mean\n      mean \n    \n  \n  \n    flipper_length_mm\n\n200.92\n  \n  \n  \n\n\n\n\nNotice that there is an empty cell (NA) under the normal mean function, but that the mean call with Arguments(na.rm=TRUE) produced a numeric result.\nWe can pass the same arguments to multiple functions using the parentheses:\n\ndatasummary(flipper_length_mm ~ (mean + sd) * Arguments(na.rm=TRUE),\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      mean\n      sd\n    \n  \n  \n    flipper_length_mm\n200.92\n14.06\n  \n  \n  \n\n\n\n\nNote that the shortcut functions that modelsummary supplies use na.rm=TRUE by default, so we can use them directly without arguments, even when there are missing values:\n\ndatasummary(flipper_length_mm ~ Mean + Var + P75 + Range,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      Mean\n      Var\n      P75\n      Range\n    \n  \n  \n    flipper_length_mm\n200.92\n197.73\n213.00\n59.00\n  \n  \n  \n\n\n\n\n\n\nArguments: Weighted Mean\nYou can use the Arguments mechanism to do various things, such as calculating weighted means:\n\nnewdata &lt;- data.frame(\n  x = rnorm(20),\n  w = rnorm(20),\n  y = rnorm(20))\n\ndatasummary(x + y ~ weighted.mean * Arguments(w = w),\n            data = newdata, output = \"markdown\")\n\n\n\n\n\nweighted.mean\n\n\n\n\nx\n0.17\n\n\ny\n-1.89\n\n\n\n\n\nWhich produces the same results as:\n\nweighted.mean(newdata$x, newdata$w)\n\n[1] 0.1707535\n\nweighted.mean(newdata$y, newdata$w)\n\n[1] -1.893901\n\n\nBut different results from:\n\nmean(newdata$x)\n\n[1] -0.06043435\n\nmean(newdata$y)\n\n[1] 0.01414597\n\n\n\n\nEmpty cells\nSometimes, if we nest too much and the dataset is not large/diverse enough, we end up with empty cells. In that case, we add *DropEmpty() to the formula:\n\ndatasummary(island * species * body_mass_g ~ sex * (Mean + SD),\n            data = penguins)\n\n\n\n\n  \n    \n    \n      island\n      species\n       \n      \n        female    \n      \n      \n        male    \n      \n    \n    \n      Mean\n      SD\n      Mean \n      SD \n    \n  \n  \n    Biscoe\nAdelie\nbody_mass_g\n3369.32\n343.47\n4050.00\n355.57\n    \nChinstrap\nbody_mass_g\n\n\n\n\n    \nGentoo\nbody_mass_g\n4679.74\n281.58\n5484.84\n313.16\n    Dream\nAdelie\nbody_mass_g\n3344.44\n212.06\n4045.54\n330.55\n    \nChinstrap\nbody_mass_g\n3527.21\n285.33\n3938.97\n362.14\n    \nGentoo\nbody_mass_g\n\n\n\n\n    Torgersen\nAdelie\nbody_mass_g\n3395.83\n259.14\n4034.78\n372.47\n    \nChinstrap\nbody_mass_g\n\n\n\n\n    \nGentoo\nbody_mass_g\n\n\n\n\n  \n  \n  \n\n\n\ndatasummary(island * species * body_mass_g ~ sex * (Mean + SD) * DropEmpty(),\n            data = penguins)\n\n\n\n\n  \n    \n    \n      island\n      species\n       \n      \n        female    \n      \n      \n        male    \n      \n    \n    \n      Mean\n      SD\n      Mean \n      SD \n    \n  \n  \n    Biscoe\nAdelie\nbody_mass_g\n3369.32\n343.47\n4050.00\n355.57\n    \nGentoo\nbody_mass_g\n4679.74\n281.58\n5484.84\n313.16\n    Dream\nAdelie\nbody_mass_g\n3344.44\n212.06\n4045.54\n330.55\n    \nChinstrap\nbody_mass_g\n3527.21\n285.33\n3938.97\n362.14\n    Torgersen\nAdelie\nbody_mass_g\n3395.83\n259.14\n4034.78\n372.47\n  \n  \n  \n\n\n\n\n\n\nLogical subsets\nCool stuff is possible with logical subsets:\n\ndatasummary((bill_length_mm &gt; 44.5) + (bill_length_mm &lt;= 44.5) ~ Mean * flipper_length_mm,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n        \n    \n  \n  \n    bill_length_mm &gt; 44.5\n209.68\n    bill_length_mm &lt;= 44.5\n192.45\n  \n  \n  \n\n\n\n\nSee the tables package documentation for more details and examples."
  },
  {
    "objectID": "vignettes/datasummary.html#output",
    "href": "vignettes/datasummary.html#output",
    "title": "Data Summaries",
    "section": "output",
    "text": "output\nAll functions in the datasummary_* family accept the same output argument. Tables can be saved to several file formats:\n\nf &lt;- flipper_length_mm ~ island * (mean + sd)\ndatasummary(f, data = penguins, output = 'table.html')\ndatasummary(f, data = penguins, output = 'table.tex')\ndatasummary(f, data = penguins, output = 'table.docx')\ndatasummary(f, data = penguins, output = 'table.pptx')\ndatasummary(f, data = penguins, output = 'table.md')\ndatasummary(f, data = penguins, output = 'table.rtf')\ndatasummary(f, data = penguins, output = 'table.jpg')\ndatasummary(f, data = penguins, output = 'table.png')\n\nThey can be returned in human-readable data.frames, markdown, html, or LaTeX code to the console:\n\ndatasummary(f, data = penguins, output = 'data.frame')\ndatasummary(f, data = penguins, output = 'markdown')\ndatasummary(f, data = penguins, output = 'html')\ndatasummary(f, data = penguins, output = 'latex')\n\ndatasummary can return objects compatible with the gt, kableExtra, flextable, huxtable, and DT table creation and customization packages:\n\ndatasummary(f, data = penguins, output = 'gt')\ndatasummary(f, data = penguins, output = 'kableExtra')\ndatasummary(f, data = penguins, output = 'flextable')\ndatasummary(f, data = penguins, output = 'huxtable')\ndatasummary(f, data = penguins, output = 'DT')\n\nPlease note that hierarchical or “nested” column labels are only available for these output formats: kableExtra, gt, html, rtf, and LaTeX. When saving tables to other formats, nested labels will be combined to a “flat” header."
  },
  {
    "objectID": "vignettes/datasummary.html#fmt",
    "href": "vignettes/datasummary.html#fmt",
    "title": "Data Summaries",
    "section": "fmt",
    "text": "fmt\nThe fmt argument allows us to set the printing format of numeric values. It accepts a single number representing the number of digits after the period, or a string to be passed to the sprintf function. For instance, setting fmt=\"%.4f\" will keep 4 digits after the dot (see ?sprintf for more options):\n\ndatasummary(flipper_length_mm ~ Mean + SD,\n            fmt = 4,\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n    \n  \n  \n    flipper_length_mm\n200.9152\n14.0617\n  \n  \n  \n\n\n\n\nWe can set the formatting on a term-by-term basis by using the same Arguments function that we used to handle missing values in the previous section. The shortcut functions that ship with modelsummary (e.g., Mean, SD, Median, P25) all include a fmt argument:\n\ndatasummary(flipper_length_mm ~ Mean * Arguments(fmt = \"%.4f\") + SD * Arguments(fmt = \"%.1f\"),\n            data = penguins)\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n    \n  \n  \n    flipper_length_mm\n200.9152\n14.1\n  \n  \n  \n\n\n\n\nIf we do not want datasummary to format numbers, and we want to keep the numerical values instead of formatted strings, set fmt=NULL. This can be useful when post-processing tables with packages like gt, which allow us to transform cells based on their numerical content (this gt table will be omitted from PDF output):\n\nlibrary(gt)\n\ndatasummary(All(mtcars) ~ Mean + SD,\n            data = mtcars,\n            fmt = NULL,\n            output = 'gt') %&gt;%\n    tab_style(style = cell_fill(color = \"pink\"),\n              locations = cells_body(rows = Mean &gt; 10, columns = 2))\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n    \n  \n  \n    mpg\n20.090625\n6.0269481\n    cyl\n6.187500\n1.7859216\n    disp\n230.721875\n123.9386938\n    hp\n146.687500\n68.5628685\n    drat\n3.596563\n0.5346787\n    wt\n3.217250\n0.9784574\n    qsec\n17.848750\n1.7869432\n    vs\n0.437500\n0.5040161\n    am\n0.406250\n0.4989909\n    gear\n3.687500\n0.7378041\n    carb\n2.812500\n1.6152000\n  \n  \n  \n\n\n\n\nPlease note that the N() function is supplied by the upstream tables package, and does not have a fmt argument. Fortunately, it is easy to override the built-in function to use custom formatting:\n\ntmp &lt;- data.frame(X = sample(letters[1:3], 1e6, replace = TRUE))\nN &lt;- \\(x) format(length(x), big.mark = \",\")\ndatasummary(X ~ N, data = tmp)\n\n\n\n\n  \n    \n    \n      X\n      N\n    \n  \n  \n    a\n333,549\n    b\n333,535\n    c\n332,916"
  },
  {
    "objectID": "vignettes/datasummary.html#title-notes",
    "href": "vignettes/datasummary.html#title-notes",
    "title": "Data Summaries",
    "section": "title, notes",
    "text": "title, notes\ndatasummary includes the same title and notes arguments as in modelsummary:\n\ndatasummary(All(penguins) ~ Mean + SD,\n            data = penguins,\n            title = 'Statistics about the famous Palmer Penguins.',\n            notes = c('A note at the bottom of the table.'))\n\n\n\n\n  Statistics about the famous Palmer Penguins.\n  \n    \n    \n       \n      Mean\n      SD\n    \n  \n  \n    rownames\n172.50\n99.45\n    bill_length_mm\n43.92\n5.46\n    bill_depth_mm\n17.15\n1.97\n    flipper_length_mm\n200.92\n14.06\n    body_mass_g\n4201.75\n801.95\n    year\n2008.03\n0.82\n  \n  \n    \n      A note at the bottom of the table."
  },
  {
    "objectID": "vignettes/datasummary.html#align",
    "href": "vignettes/datasummary.html#align",
    "title": "Data Summaries",
    "section": "align",
    "text": "align\nWe can align columns using the align argument. align should be a string of length equal to the number of columns, and which includes only the letters “l”, “c”, or “r”:\n\ndatasummary(flipper_length_mm + bill_length_mm ~ Mean + SD + Range,\n            data = penguins,\n            align = 'lrcl')\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n      Range\n    \n  \n  \n    flipper_length_mm\n200.92\n14.06\n59.00\n    bill_length_mm\n43.92\n5.46\n27.50"
  },
  {
    "objectID": "vignettes/datasummary.html#add_rows",
    "href": "vignettes/datasummary.html#add_rows",
    "title": "Data Summaries",
    "section": "add_rows",
    "text": "add_rows\n\nnew_rows &lt;- data.frame('Does',\n                       2,\n                       'plus',\n                       2,\n                       'equals',\n                       5,\n                       '?')\ndatasummary(flipper_length_mm + body_mass_g ~ species * (Mean + SD),\n            data = penguins,\n            add_rows = new_rows)\n\n\n\n\n  \n    \n    \n       \n      \n        Adelie    \n      \n      \n        Chinstrap    \n      \n      \n        Gentoo    \n      \n    \n    \n      Mean\n      SD\n      Mean \n      SD \n      Mean  \n      SD  \n    \n  \n  \n    flipper_length_mm\n189.95\n6.54\n195.82\n7.13\n217.19\n6.48\n    body_mass_g\n3700.66\n458.57\n3733.09\n384.34\n5076.02\n504.12\n    Does\n2.00\nplus\n2.00\nequals\n5.00\n?"
  },
  {
    "objectID": "vignettes/datasummary.html#add_columns",
    "href": "vignettes/datasummary.html#add_columns",
    "title": "Data Summaries",
    "section": "add_columns",
    "text": "add_columns\n\nnew_cols &lt;- data.frame('New Stat' = runif(2))\ndatasummary(flipper_length_mm + body_mass_g ~ species * (Mean + SD),\n            data = penguins,\n            add_columns = new_cols)\n\n\n\n\n  \n    \n    \n       \n      \n        Adelie    \n      \n      \n        Chinstrap    \n      \n      \n        Gentoo    \n      \n      New.Stat\n    \n    \n      Mean\n      SD\n      Mean \n      SD \n      Mean  \n      SD  \n    \n  \n  \n    flipper_length_mm\n189.95\n6.54\n195.82\n7.13\n217.19\n6.48\n0.14\n    body_mass_g\n3700.66\n458.57\n3733.09\n384.34\n5076.02\n504.12\n0.33"
  },
  {
    "objectID": "vignettes/datasummary.html#histograms",
    "href": "vignettes/datasummary.html#histograms",
    "title": "Data Summaries",
    "section": "Histograms",
    "text": "Histograms\nThe datasummary family of functions allow users to display in-line spark-style histograms to describe the distribution of the variables. For example, the datasummary_skim produces such a histogram:\n\ntmp &lt;- mtcars[, c(\"mpg\", \"hp\")]\ndatasummary_skim(tmp)\n\n\n\n\n  \n    \n    \n       \n      Unique (#)\n      Missing (%)\n      Mean\n      SD\n      Min\n      Median\n      Max\n        \n    \n  \n  \n    mpg\n25\n0\n20.1\n6.0\n10.4\n19.2\n33.9\n          \n    hp\n22\n0\n146.7\n68.6\n52.0\n123.0\n335.0\n          \n  \n  \n  \n\n\n\n\nEach of the histograms in the table above is actually an SVG image, produced by the kableExtra package. For this reason, the histogram will not appear when users use a different output backend, such as gt, flextable, or huxtable.\nThe datasummary function is incredibly flexible, but it does not include a histogram option by default. Here is a simple example of how one can customize the output of datasummary. We proceed in 4 steps:\n\nNormalize the variables and store them in a list\nCreate the table with datasummary, making sure to include 2 “empty” columns. In the example, we use a simple function called emptycol to fill those columns with empty strings.\nAdd the histograms or boxplots using functions from the kableExtra package.\n\n\ntmp &lt;- mtcars[, c(\"mpg\", \"hp\")]\n\n## create a list with individual variables\n## remove missing and rescale\ntmp_list &lt;- lapply(tmp, na.omit)\ntmp_list &lt;- lapply(tmp_list, scale)\n\n## create a table with `datasummary`\n## add a histogram with column_spec and spec_hist\n## add a boxplot with colun_spec and spec_box\nemptycol = function(x) \" \"\ndatasummary(mpg + hp ~ Mean + SD + Heading(\"Boxplot\") * emptycol + Heading(\"Histogram\") * emptycol,\n    output = \"kableExtra\",\n    data = tmp) %&gt;%\n    kableExtra::column_spec(column = 4, image = spec_boxplot(tmp_list)) %&gt;%\n    kableExtra::column_spec(column = 5, image = spec_hist(tmp_list))\n\nIf you want a simpler solution, you can try the Histogram function which works in datasummary automatically and comes bundled with modelsummary. The downside of this function is that it uses Unicode characters to create the histogram. This kind of histogram may not display well with certain typefaces or on some operating systems (Windows!).\n\ndatasummary(mpg + hp ~ Mean + SD + Histogram, data = tmp)\n\n\n\n\n  \n    \n    \n       \n      Mean\n      SD\n      Histogram\n    \n  \n  \n    mpg\n20.09\n6.03\n▂▅▇▇▆▃▁▁▂▂\n    hp\n146.69\n68.56\n▅▅▇▂▆▂▃▁▁"
  },
  {
    "objectID": "vignettes/datasummary.html#missing-values",
    "href": "vignettes/datasummary.html#missing-values",
    "title": "Data Summaries",
    "section": "Missing values",
    "text": "Missing values\nAt least 3 distinct issues can arise related to missing values.\n\nFunctions and na.rm\nAn empty cell can appear in the table when a statistical function returns NA instead of a numeric value. In those cases, you should:\n\nMake sure that your statistical function (e.g., mean or sd) uses na.rm=TRUE by default\nUse the Arguments strategy to set na.rm=TRUE (see the Arguments section of this vignette).\nUse a convenience function supplied by modelsummary, where na.rm is TRUE by default: Mean, SD, P25, etc.\n\n\n\nEmpty crosstab cells\nAn empty cell can appear in the table when a crosstab is deeply nested, and there are no observations for a given combination of covariates. In those cases, you can use the * DropEmpty pseudo-function. See the “Empty cells” section of this vignette for examples.\n\n\nFactors\nBy default, the factor function in R does not assign a distinct factor level to missing values: the factor function’s exclude argument is set to NA by default. To ensure that NAs appear in your table, make sure you set exclude=NULL when you create the factor.\nInternally, the datasummary_balance and datasummary_crosstab functions convert logical and character variables to factor with the exclude=NULL argument. This means that NAs will appear in the table as distinct rows/columns. If you do not want NAs to appear in your table, convert them to factors yourself ahead of time. For example:\n\nmycars &lt;- mtcars[, c(\"cyl\", \"mpg\", \"hp\", \"vs\")]\nmycars$cyl[c(1, 3, 6, 8)] &lt;- NA\nmycars$cyl_nona &lt;- factor(mycars$cyl)\nmycars$cyl_na &lt;- factor(mycars$cyl, exclude = NULL)\n\ndatasummary_crosstab(cyl_nona ~ vs, data = mycars)\n\n\n\n\n  \n    \n    \n      cyl_nona\n       \n      0\n      1\n      All\n    \n  \n  \n    4\nN\n1\n8\n9\n    \n% row\n11.1\n88.9\n100.0\n    6\nN\n2\n3\n5\n    \n% row\n40.0\n60.0\n100.0\n    8\nN\n14\n0\n14\n    \n% row\n100.0\n0.0\n100.0\n    All\nN\n18\n14\n32\n    \n% row\n56.2\n43.8\n100.0\n  \n  \n  \n\n\n\ndatasummary_crosstab(cyl_na ~ vs, data = mycars)\n\n\n\n\n  \n    \n    \n      cyl_na\n       \n      0\n      1\n      All\n    \n  \n  \n    4\nN\n1\n8\n9\n    \n% row\n11.1\n88.9\n100.0\n    6\nN\n2\n3\n5\n    \n% row\n40.0\n60.0\n100.0\n    8\nN\n14\n0\n14\n    \n% row\n100.0\n0.0\n100.0\n    NA\nN\n1\n3\n4\n    \n% row\n25.0\n75.0\n100.0\n    All\nN\n18\n14\n32\n    \n% row\n56.2\n43.8\n100.0"
  },
  {
    "objectID": "vignettes/datasummary.html#appearance",
    "href": "vignettes/datasummary.html#appearance",
    "title": "Data Summaries",
    "section": "Appearance",
    "text": "Appearance\nIn the Appearance Vignette we saw how to customize the tables produced by the modelsummary function. The same customization possibilities are also available for all functions in the datasummary_* family of functions. Indeed, we can customize the tables produced by datasummary using the functions provided by gt, kableExtra, flextable, huxtable, and DT. For instance, to customize tables using kableExtra, we can do:\n\ndatasummary(All(penguins) ~ sex * (Mean + SD),\n            data = penguins,\n            output = 'kableExtra') %&gt;%\n  kableExtra::row_spec(3, background = 'cyan', color = 'red')\n\nTo customize a table using the gt package, we can:\n\nlibrary(gt)\n\nadelie &lt;- function(x) web_image('https://user-images.githubusercontent.com/987057/85402702-20b1d280-b52a-11ea-9950-f3a03133fd45.png', height = 100)\ngentoo &lt;- function(x) web_image('https://user-images.githubusercontent.com/987057/85402718-27404a00-b52a-11ea-9ad3-dd7562f6438d.png', height = 100)\nchinstrap &lt;- function(x) web_image('https://user-images.githubusercontent.com/987057/85402708-23acc300-b52a-11ea-9a77-de360a0d1f7d.png', height = 100)\n\ncap &lt;- 'Flipper lengths (mm) of the famous penguins of Palmer Station, Antarctica.'\nf &lt;- (`Species` = species) ~ (` ` = flipper_length_mm) * (`Distribution` = Histogram) + flipper_length_mm * sex * ((`Avg.` = Mean)*Arguments(fmt='%.0f') + (`Std. Dev.` = SD)*Arguments(fmt='%.1f'))\ndatasummary(f,\n            data = penguins,\n            output = 'gt',\n            title = cap,\n            notes = 'Artwork by @allison_horst',\n            sparse_header = TRUE) %&gt;%\n    text_transform(locations = cells_body(columns = 1, rows = 1), fn = adelie) %&gt;%\n    text_transform(locations = cells_body(columns = 1, rows = 2), fn = chinstrap) %&gt;%\n    text_transform(locations = cells_body(columns = 1, rows = 3), fn = gentoo) %&gt;%\n    tab_style(style = list(cell_text(color = \"#FF6700\", size = 'x-large')), locations = cells_body(rows = 1)) %&gt;%\n    tab_style(style = list(cell_text(color = \"#CD51D1\", size = 'x-large')), locations = cells_body(rows = 2)) %&gt;%\n    tab_style(style = list(cell_text(color = \"#007377\", size = 'x-large')), locations = cells_body(rows = 3)) %&gt;%\n    tab_options(table_body.hlines.width = 0, table.border.top.width = 0, table.border.bottom.width = 0) %&gt;%\n    cols_align('center', columns = 3:6)\n\n\n\n\n  Flipper lengths (mm) of the famous penguins of Palmer Station, Antarctica.\n  \n    \n    \n      Species\n      Distribution\n      \n        Female    \n      \n      \n        Male    \n      \n    \n    \n      Avg.\n      Std. Dev.\n      Avg. \n      Std. Dev. \n    \n  \n  \n    \n▁▃▆▇▃▅▂\n188\n5.6\n192\n6.6\n    \n▁▄▃▇▆▄▃▁▂\n192\n5.8\n200\n6.0\n    \n▂▅▅▇▃▅▂▁▃\n213\n3.9\n222\n5.7\n  \n  \n    \n      Artwork by @allison_horst"
  },
  {
    "objectID": "vignettes/modelsummary.html#output-print-and-save",
    "href": "vignettes/modelsummary.html#output-print-and-save",
    "title": "Model Summaries",
    "section": "output: print and save",
    "text": "output: print and save\nThe output argument determines the type of object returned by modelsummary and/or the file where this table should be written.\nIf you want to save a table directly to file, you can type:\n\nmodelsummary(models, output = \"table.docx\")\nmodelsummary(models, output = \"table.html\")\nmodelsummary(models, output = \"table.tex\")\nmodelsummary(models, output = \"table.md\")\nmodelsummary(models, output = \"table.txt\")\nmodelsummary(models, output = \"table.png\")\n\nIf you want a raw HTML, LaTeX, or Markdown table, you can type:\n\nmodelsummary(models, output = \"html\")\nmodelsummary(models, output = \"latex\")\nmodelsummary(models, output = \"markdown\")\n\nIf you to customize the appearance of your table using external tools like gt, kableExtra, flextable, or huxtable, you can type:\n\nmodelsummary(models, output = \"gt\")\nmodelsummary(models, output = \"kableExtra\")\nmodelsummary(models, output = \"flextable\")\nmodelsummary(models, output = \"huxtable\")\n\nWarning: When a file name is supplied to the output argument, the table is written immediately to file. If you want to customize your table by post-processing it with an external package, you need to choose a different output format and saving mechanism. Unfortunately, the approach differs from package to package:\n\ngt: set output=\"gt\", post-process your table, and use the gt::gtsave function.\nkableExtra: set output to your destination format (e.g., “latex”, “html”, “markdown”), post-process your table, and use kableExtra::save_kable function."
  },
  {
    "objectID": "vignettes/modelsummary.html#fmt-round-and-format",
    "href": "vignettes/modelsummary.html#fmt-round-and-format",
    "title": "Model Summaries",
    "section": "fmt: round and format",
    "text": "fmt: round and format\nThe fmt argument defines how numeric values are rounded and presented in the table. This argument accepts three types of input:\n\nInteger: Number of decimal digits\nUser-supplied function: Accepts a numeric vector and returns a character vector of the same length.\nmodelsummary function: fmt_decimal(), fmt_significant(), fmt_sprintf(), fmt_term(), fmt_statistic, fmt_identity()\n\nExamples:\n\nmod &lt;- lm(mpg ~ hp + drat + qsec, data = mtcars)\n\n## decimal digits\nmodelsummary(mod, fmt = 3)\n\n## user-supplied function\nmodelsummary(mod, fmt = function(x) round(x, 2))\n\n## p values with different number of digits\nmodelsummary(mod, fmt = fmt_decimal(1, 3), statistic = c(\"std.error\", \"p.value\"))\n\n## significant digits\nmodelsummary(mod, fmt = fmt_significant(3))\n\n## sprintf(): decimal digits\nmodelsummary(mod, fmt = fmt_sprintf(\"%.5f\"))\n\n## sprintf(): scientific notation \nmodelsummary(mod, fmt = fmt_sprintf(\"%.5e\"))\n\n## statistic-specific formatting\nmodelsummary(mod, fmt = fmt_statistic(estimate = 4, conf.int = 1), statistic = \"conf.int\")\n\n## term-specific formatting\nmodelsummary(mod, fmt = fmt_term(hp = 4, drat = 1, default = fmt_significant(2)))\n\nmodelsummary(mod, fmt = NULL)\n\nCustom formatting function with big mark commas:\n\nmodf &lt;- lm(I(mpg * 100) ~ hp, mtcars)\nf &lt;- function(x) formatC(x, digits = 2, big.mark = \",\", format = \"f\")\nmodelsummary(modf, fmt = f, gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    (Intercept)\n3,009.89\n    \n(163.39)\n    hp\n-6.82\n    \n(1.01)\n  \n  \n  \n\n\n\n\nIn many languages the comma is used as a decimal mark instead of the period. modelsummary respects the global R OutDec option, so you can simply execute this command and your tables will be adjusted automatically:\n\noptions(OutDec=\",\")"
  },
  {
    "objectID": "vignettes/modelsummary.html#estimate",
    "href": "vignettes/modelsummary.html#estimate",
    "title": "Model Summaries",
    "section": "estimate",
    "text": "estimate\nBy default, modelsummary prints each coefficient estimate on its own row. You can customize this by changing the estimate argument. For example, this would produce a table of p values instead of coefficient estimates:\n\nmodelsummary(models, estimate = \"p.value\")\n\nYou can also use glue string, using curly braces to specify the statistics you want. For example, this displays the estimate next to a confidence interval:\n\nmodelsummary(\n  models,\n  fmt = 1,\n  estimate  = \"{estimate} [{conf.low}, {conf.high}]\",\n  statistic = NULL,\n  coef_omit = \"Intercept\")\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    Literacy\n-39.1 [-112.8, 34.6]\n0.0 [0.0, 0.0]\n3.7 [-88.9, 96.3]\n0.0 [0.0, 0.0]\n-68.5 [-104.4, -32.6]\n    Clergy\n15.3 [-35.9, 66.4]\n\n77.1 [12.8, 141.5]\n\n-16.4 [-41.3, 8.5]\n    Commerce\n\n0.0 [0.0, 0.0]\n\n0.0 [0.0, 0.0]\n\n    Num.Obs.\n86\n86\n86\n86\n86\n    R2\n0.020\n\n0.065\n\n0.152\n    R2 Adj.\n-0.003\n\n0.043\n\n0.132\n    AIC\n1740.8\n274160.8\n1780.0\n257564.4\n1616.9\n    BIC\n1750.6\n274168.2\n1789.9\n257571.7\n1626.7\n    Log.Lik.\n-866.392\n-137077.401\n-886.021\n-128779.186\n-804.441\n    F\n0.866\n18294.559\n2.903\n279.956\n7.441\n    RMSE\n5740.99\n5491.61\n7212.97\n7451.70\n2793.43\n  \n  \n  \n\n\n\n\nGlue strings can also apply R functions to estimates. However, since modelsummary rounds numbers and transforms them to character by default, we must set fmt = NULL:\n\nm &lt;- glm(am ~ mpg, data = mtcars, family = binomial)\nmodelsummary(\n    m,\n    fmt = NULL,\n    estimate = \"{round(exp(estimate), 5)}\",\n    statistic = \"{round(exp(estimate) * std.error, 3)}\")\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    (Intercept)\n0.00136\n    \n0.003\n    mpg\n1.35938\n    \n0.156\n    Num.Obs.\n32\n    AIC\n33.7\n    BIC\n36.6\n    Log.Lik.\n-14.838\n    F\n7.148\n    RMSE\n0.39\n  \n  \n  \n\n\n\n\nYou can also use different estimates for different models by using a vector of strings:\n\nmodelsummary(\n  models,\n  fmt = 1,\n  estimate  = c(\"estimate\",\n                \"{estimate}{stars}\",\n                \"{estimate} ({std.error})\",\n                \"{estimate} ({std.error}){stars}\",\n                \"{estimate} [{conf.low}, {conf.high}]\"),\n  statistic = NULL,\n  coef_omit = \"Intercept\")\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    Literacy\n-39.1\n0.0***\n3.7 (46.6)\n0.0 (0.0)***\n-68.5 [-104.4, -32.6]\n    Clergy\n15.3\n\n77.1 (32.3)\n\n-16.4 [-41.3, 8.5]\n    Commerce\n\n0.0***\n\n0.0 (0.0)***\n\n    Num.Obs.\n86\n86\n86\n86\n86\n    R2\n0.020\n\n0.065\n\n0.152\n    R2 Adj.\n-0.003\n\n0.043\n\n0.132\n    AIC\n1740.8\n274160.8\n1780.0\n257564.4\n1616.9\n    BIC\n1750.6\n274168.2\n1789.9\n257571.7\n1626.7\n    Log.Lik.\n-866.392\n-137077.401\n-886.021\n-128779.186\n-804.441\n    F\n0.866\n18294.559\n2.903\n279.956\n7.441\n    RMSE\n5740.99\n5491.61\n7212.97\n7451.70\n2793.43"
  },
  {
    "objectID": "vignettes/modelsummary.html#statistic-se-t-p-ci-etc.",
    "href": "vignettes/modelsummary.html#statistic-se-t-p-ci-etc.",
    "title": "Model Summaries",
    "section": "statistic: SE, t, p, CI, etc.",
    "text": "statistic: SE, t, p, CI, etc.\nBy default, modelsummary prints the coefficient’s standard error in parentheses below the corresponding estimate. The value of this uncertainty statistic is determined by the statistic argument. The statistic argument accepts any of the column names produced by get_estimates(model). For example:\n\nmodelsummary(models, statistic = 'std.error')\nmodelsummary(models, statistic = 'p.value')\nmodelsummary(models, statistic = 'statistic')\n\nYou can also display confidence intervals in brackets by setting statistic=\"conf.int\":\n\nmodelsummary(models,\n             fmt = 1,\n             statistic = 'conf.int', \n             conf_level = .99)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.7\n8.2\n16259.4\n9.9\n11243.5\n    \n[2469.6, 13427.8]\n[8.2, 8.3]\n[9375.5, 23143.3]\n[9.9, 9.9]\n[8577.5, 13909.5]\n    Literacy\n-39.1\n0.0\n3.7\n0.0\n-68.5\n    \n[-136.8, 58.6]\n[0.0, 0.0]\n[-119.0, 126.4]\n[0.0, 0.0]\n[-116.0, -21.0]\n    Clergy\n15.3\n\n77.1\n\n-16.4\n    \n[-52.6, 83.1]\n\n[-8.1, 162.4]\n\n[-49.4, 16.6]\n    Commerce\n\n0.0\n\n0.0\n\n    \n\n[0.0, 0.0]\n\n[0.0, 0.0]\n\n    Num.Obs.\n86\n86\n86\n86\n86\n    R2\n0.020\n\n0.065\n\n0.152\n    R2 Adj.\n-0.003\n\n0.043\n\n0.132\n    AIC\n1740.8\n274160.8\n1780.0\n257564.4\n1616.9\n    BIC\n1750.6\n274168.2\n1789.9\n257571.7\n1626.7\n    Log.Lik.\n-866.392\n-137077.401\n-886.021\n-128779.186\n-804.441\n    F\n0.866\n18294.559\n2.903\n279.956\n7.441\n    RMSE\n5740.99\n5491.61\n7212.97\n7451.70\n2793.43\n  \n  \n  \n\n\n\n\nAlternatively, you can supply a glue string to get more complicated results:\n\nmodelsummary(models,\n             statistic = \"{std.error} ({p.value})\")\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667\n8.241\n16259.384\n9.876\n11243.544\n    \n2078.276 (&lt;0.001)\n0.006 (&lt;0.001)\n2611.140 (&lt;0.001)\n0.003 (&lt;0.001)\n1011.240 (&lt;0.001)\n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n37.052 (0.294)\n0.000 (&lt;0.001)\n46.552 (0.937)\n0.000 (&lt;0.001)\n18.029 (&lt;0.001)\n    Clergy\n15.257\n\n77.148\n\n-16.376\n    \n25.735 (0.555)\n\n32.334 (0.019)\n\n12.522 (0.195)\n    Commerce\n\n0.011\n\n0.001\n\n    \n\n0.000 (&lt;0.001)\n\n0.000 (&lt;0.001)\n\n    Num.Obs.\n86\n86\n86\n86\n86\n    R2\n0.020\n\n0.065\n\n0.152\n    R2 Adj.\n-0.003\n\n0.043\n\n0.132\n    AIC\n1740.8\n274160.8\n1780.0\n257564.4\n1616.9\n    BIC\n1750.6\n274168.2\n1789.9\n257571.7\n1626.7\n    Log.Lik.\n-866.392\n-137077.401\n-886.021\n-128779.186\n-804.441\n    F\n0.866\n18294.559\n2.903\n279.956\n7.441\n    RMSE\n5740.99\n5491.61\n7212.97\n7451.70\n2793.43\n  \n  \n  \n\n\n\n\nYou can also display several different uncertainty estimates below the coefficient estimates by using a vector. For example,\n\nmodelsummary(models, gof_omit = \".*\",\n             statistic = c(\"conf.int\",\n                           \"s.e. = {std.error}\", \n                           \"t = {statistic}\",\n                           \"p = {p.value}\"))\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667\n8.241\n16259.384\n9.876\n11243.544\n    \n[3815.060, 12082.275]\n[8.230, 8.252]\n[11065.933, 21452.836]\n[9.869, 9.883]\n[9232.228, 13254.860]\n    \ns.e. = 2078.276\ns.e. = 0.006\ns.e. = 2611.140\ns.e. = 0.003\ns.e. = 1011.240\n    \nt = 3.825\nt = 1408.907\nt = 6.227\nt = 2864.987\nt = 11.119\n    \np = &lt;0.001\np = &lt;0.001\np = &lt;0.001\np = &lt;0.001\np = &lt;0.001\n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n[-112.816, 34.574]\n[0.003, 0.003]\n[-88.910, 96.270]\n[0.000, 0.000]\n[-104.365, -32.648]\n    \ns.e. = 37.052\ns.e. = 0.000\ns.e. = 46.552\ns.e. = 0.000\ns.e. = 18.029\n    \nt = -1.056\nt = 33.996\nt = 0.079\nt = -4.989\nt = -3.800\n    \np = 0.294\np = &lt;0.001\np = 0.937\np = &lt;0.001\np = &lt;0.001\n    Clergy\n15.257\n\n77.148\n\n-16.376\n    \n[-35.930, 66.443]\n\n[12.837, 141.459]\n\n[-41.282, 8.530]\n    \ns.e. = 25.735\n\ns.e. = 32.334\n\ns.e. = 12.522\n    \nt = 0.593\n\nt = 2.386\n\nt = -1.308\n    \np = 0.555\n\np = 0.019\n\np = 0.195\n    Commerce\n\n0.011\n\n0.001\n\n    \n\n[0.011, 0.011]\n\n[0.001, 0.001]\n\n    \n\ns.e. = 0.000\n\ns.e. = 0.000\n\n    \n\nt = 174.542\n\nt = 15.927\n\n    \n\np = &lt;0.001\n\np = &lt;0.001\n\n  \n  \n  \n\n\n\n\nSetting statistic=NULL omits all statistics. This can often be useful if, for example, you want to display confidence intervals next to coefficients:\n\nmodelsummary(models, gof_omit = \".*\",\n             estimate = \"{estimate} [{conf.low}, {conf.high}]\",\n             statistic = NULL)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667 [3815.060, 12082.275]\n8.241 [8.230, 8.252]\n16259.384 [11065.933, 21452.836]\n9.876 [9.869, 9.883]\n11243.544 [9232.228, 13254.860]\n    Literacy\n-39.121 [-112.816, 34.574]\n0.003 [0.003, 0.003]\n3.680 [-88.910, 96.270]\n0.000 [0.000, 0.000]\n-68.507 [-104.365, -32.648]\n    Clergy\n15.257 [-35.930, 66.443]\n\n77.148 [12.837, 141.459]\n\n-16.376 [-41.282, 8.530]\n    Commerce\n\n0.011 [0.011, 0.011]\n\n0.001 [0.001, 0.001]"
  },
  {
    "objectID": "vignettes/modelsummary.html#vcov-robust-ses",
    "href": "vignettes/modelsummary.html#vcov-robust-ses",
    "title": "Model Summaries",
    "section": "vcov: robust SEs",
    "text": "vcov: robust SEs\nYou can use clustered or robust uncertainty estimates by modifying the vcov parameter. This function accepts 5 different types of input. You can use a string or a vector of strings:\nmodelsummary(models, vcov = \"robust\")\nmodelsummary(models, vcov = c(\"classical\", \"robust\", \"bootstrap\", \"stata\", \"HC4\"))\nThese variance-covariance matrices are calculated using the sandwich package. You can pass arguments to the sandwich functions directly from the modelsummary function. For instance, to change the number of bootstrap replicates and to specify a clustering variable we could call:\nmodelsummary(mod, vcov = \"bootstrap\", R = 1000, cluster = \"country\")\nYou can use a one-sided formula or list of one-sided formulas to use clustered standard errors:\nmodelsummary(models, vcov = ~Region)\nYou can specify a function that produces variance-covariance matrices:\nlibrary(sandwich)\nmodelsummary(models, vcov = vcovHC)\nYou can supply a list of functions of the same length as your model list:\nmodelsummary(models, \n  vcov = list(vcov, vcovHC, vcovHAC, vcovHC, vcov))\nYou can supply a list of named variance-covariance matrices:\nvcov_matrices &lt;- lapply(models, vcovHC)\nmodelsummary(models, vcov = vcov_matrices)\nYou can supply a list of named vectors:\nvc &lt;- list(\n  `OLS 1` = c(`(Intercept)` = 2, Literacy = 3, Clergy = 4), \n  `Poisson 1` = c(`(Intercept)` = 3, Literacy = -5, Commerce = 3),\n  `OLS 2` = c(`(Intercept)` = 7, Literacy = -6, Clergy = 9), \n  `Poisson 2` = c(`(Intercept)` = 4, Literacy = -7, Commerce = -9),\n  `OLS 3` = c(`(Intercept)` = 1, Literacy = -5, Clergy = -2))\nmodelsummary(models, vcov = vc)"
  },
  {
    "objectID": "vignettes/modelsummary.html#stars",
    "href": "vignettes/modelsummary.html#stars",
    "title": "Model Summaries",
    "section": "stars",
    "text": "stars\nSome people like to add “stars” to their model summary tables to mark statistical significance. The stars argument can take three types of input:\n\nNULL omits any stars or special marks (default)\nTRUE uses these default values: + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001\nNamed numeric vector for custom stars.\n\nmodelsummary(models)\nmodelsummary(models, stars = TRUE) \nmodelsummary(models, stars = c('+' = .1, '&' = .01)) \nWhenever stars is not NULL, modelsummary adds a note at the bottom of the table automatically. If you would like to add stars but not include a note at the bottom of the table, you can define the display of your estimate manually using a glue string, as described in the estimate argument section of the documentation. Whenever the {stars} string appears in the estimate or statistic arguments, modelsummary will assume that you want fine-grained control over your table, and will not include a note about stars.\n\nmodelsummary(models,\n             estimate = \"{estimate}{stars}\",\n             gof_omit = \".*\")\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667***\n8.241***\n16259.384***\n9.876***\n11243.544***\n    \n(2078.276)\n(0.006)\n(2611.140)\n(0.003)\n(1011.240)\n    Literacy\n-39.121\n0.003***\n3.680\n0.000***\n-68.507***\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n    Clergy\n15.257\n\n77.148*\n\n-16.376\n    \n(25.735)\n\n(32.334)\n\n(12.522)\n    Commerce\n\n0.011***\n\n0.001***\n\n    \n\n(0.000)\n\n(0.000)\n\n  \n  \n  \n\n\n\n\nIf you want to create your own stars description, you can add custom notes with the notes argument."
  },
  {
    "objectID": "vignettes/modelsummary.html#coef_omit",
    "href": "vignettes/modelsummary.html#coef_omit",
    "title": "Model Summaries",
    "section": "coef_omit",
    "text": "coef_omit\nAn alternative mechanism to subset coefficients is to use the coef_omit argument, which accepts a vector of integer or a regular expression. For example, we can omit the first and second coefficients as follows:\n\nmodelsummary(models, coef_omit = 1:2, gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    Clergy\n15.257\n\n77.148\n\n-16.376\n    \n(25.735)\n\n(32.334)\n\n(12.522)\n    Commerce\n\n0.011\n\n0.001\n\n    \n\n(0.000)\n\n(0.000)\n\n  \n  \n  \n\n\n\n\nNegative indices determine which coefficients to keep:\n\nmodelsummary(models, coef_omit = c(-1, -2), gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667\n8.241\n16259.384\n9.876\n11243.544\n    \n(2078.276)\n(0.006)\n(2611.140)\n(0.003)\n(1011.240)\n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n  \n  \n  \n\n\n\n\nWhen coef_omit is a string, it is fed to grepl(x,perl=TRUE) to detect the variable names which should be excluded from the table.\n\nmodelsummary(models, coef_omit = \"Intercept|.*merce\", gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n    Clergy\n15.257\n\n77.148\n\n-16.376\n    \n(25.735)\n\n(32.334)\n\n(12.522)\n  \n  \n  \n\n\n\n\nSince coef_omit accepts regexes, you can do interesting things with it, such as specifying the list of variables that modelsummary should keep instead of omit. To do this, we use a negative lookahead. To keep only the coefficients starting with “Lit”, we call:\n\nmodelsummary(models, coef_omit = \"^(?!Lit)\", gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n  \n  \n  \n\n\n\n\nTo keep all coefficients matching the “y” substring:\n\nmodelsummary(models, coef_omit = \"^(?!.*y)\", gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n    Clergy\n15.257\n\n77.148\n\n-16.376\n    \n(25.735)\n\n(32.334)\n\n(12.522)\n  \n  \n  \n\n\n\n\nTo keep all coefficients matching one of two substrings:\n\nmodelsummary(models, coef_omit = \"^(?!.*tercept|.*y)\", gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667\n8.241\n16259.384\n9.876\n11243.544\n    \n(2078.276)\n(0.006)\n(2611.140)\n(0.003)\n(1011.240)\n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n    Clergy\n15.257\n\n77.148\n\n-16.376\n    \n(25.735)\n\n(32.334)\n\n(12.522)"
  },
  {
    "objectID": "vignettes/modelsummary.html#coef_rename",
    "href": "vignettes/modelsummary.html#coef_rename",
    "title": "Model Summaries",
    "section": "coef_rename",
    "text": "coef_rename\nmodelsummary offers powerful and innovative mechanisms to rename, reorder, and subset coefficients and goodness-of-fit statistics.\nYou can rename coefficients using the coef_rename argument. For example, if you have two models with different explanatory variables, but you want both variables to have the same name and appear on the same row, you can do:\n\nx &lt;- list(lm(hp ~ drat, mtcars),\n          lm(hp ~ vs, mtcars))\n\nmodelsummary(x, coef_rename = c(\"drat\" = \"Explanator\", \"vs\" = \"Explanator\"))\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    (Intercept)\n353.653\n189.722\n    \n(76.049)\n(11.347)\n    Explanator\n-57.545\n-98.365\n    \n(20.922)\n(17.155)\n    Num.Obs.\n32\n32\n    R2\n0.201\n0.523\n    R2 Adj.\n0.175\n0.507\n    AIC\n359.2\n342.7\n    BIC\n363.6\n347.1\n    Log.Lik.\n-176.588\n-168.347\n    F\n7.565\n32.876\n    RMSE\n60.31\n46.61\n  \n  \n  \n\n\n\n\nIf you provide a named character vector to coef_rename, only exact matches of the complete original term name will be replaced.\nFor complex modifications, you can feed a function which returns a named vector to the coef_rename argument. For example, modelsummary ships with a function called coef_rename, which executes some common renaming tasks automatically. This example also uses the dvnames function to extract the name of the dependent variable in each model:\n\nx &lt;- list(\n  lm(mpg ~ factor(cyl) + drat + disp, data = mtcars),\n  lm(hp ~ factor(cyl) + drat + disp, data = mtcars)\n)\n\nmodelsummary(dvnames(x), coef_rename = coef_rename)\n\n\n\n\n  \n    \n    \n       \n      mpg\n      hp\n    \n  \n  \n    (Intercept)\n26.158\n-86.788\n    \n(6.537)\n(79.395)\n    6\n-4.547\n46.485\n    \n(1.731)\n(21.027)\n    8\n-4.580\n121.892\n    \n(2.952)\n(35.853)\n    Drat\n0.783\n37.815\n    \n(1.478)\n(17.952)\n    Disp\n-0.026\n0.147\n    \n(0.011)\n(0.137)\n    Num.Obs.\n32\n32\n    R2\n0.786\n0.756\n    R2 Adj.\n0.754\n0.720\n    AIC\n167.4\n327.2\n    BIC\n176.2\n336.0\n    Log.Lik.\n-77.719\n-157.623\n    F\n24.774\n20.903\n    RMSE\n2.74\n33.34\n  \n  \n  \n\n\n\n\nOf course, you can also define your own custom functions. For instance, to rename a model with interacted variables (e.g., “drat:mpg”), you could define a custom rename_explanator function:\n\ny &lt;- list(\n  lm(hp ~ drat / mpg, mtcars),\n  lm(hp ~ vs / mpg, mtcars)\n)\n\nrename_explanator &lt;- function(old_names) {\n  new_names &lt;- gsub(\"drat|vs\", \"Explanator\", old_names)\n  setNames(new_names, old_names)\n}\n\nmodelsummary(y, coef_rename = rename_explanator)\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    (Intercept)\n91.206\n189.722\n    \n(72.344)\n(11.205)\n    Explanator\n68.331\n-18.316\n    \n(27.390)\n(62.531)\n    Explanator:mpg\n-2.558\n-3.260\n    \n(0.467)\n(2.451)\n    Num.Obs.\n32\n32\n    R2\n0.608\n0.550\n    R2 Adj.\n0.581\n0.519\n    AIC\n338.4\n342.8\n    BIC\n344.3\n348.7\n    Log.Lik.\n-165.218\n-167.399\n    F\n22.454\n17.743\n    RMSE\n42.27\n45.25\n  \n  \n  \n\n\n\n\nBeware of inadvertently replacing parts of other variable names! Making your regex pattern as specific as possible (e.g., by adding word boundaries) is likely a good idea. The custom rename function is also a good place to re-introduce the replacement of “:” with “×” if you are dealing with interaction terms – modelsummary makes this replacement for you only when the coef_rename argument is not specified.\nAnother possibility is to assign variable labels to attributes in the data used to fit the model. Then, we can automatically rename them:\n\ndatlab &lt;- mtcars\ndatlab$cyl &lt;- factor(datlab$cyl)\nattr(datlab$cyl, \"label\") &lt;- \"Cylinders\"\nattr(datlab$am, \"label\") &lt;- \"Transmission\"\nmodlab &lt;- lm(mpg ~ cyl + am, data = datlab)\nmodelsummary(modlab, coef_rename = TRUE)\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    (Intercept)\n24.802\n    \n(1.323)\n    Cylinders [6]\n-6.156\n    \n(1.536)\n    Cylinders [8]\n-10.068\n    \n(1.452)\n    Transmission\n2.560\n    \n(1.298)\n    Num.Obs.\n32\n    R2\n0.765\n    R2 Adj.\n0.740\n    AIC\n168.4\n    BIC\n175.7\n    Log.Lik.\n-79.199\n    F\n30.402\n    RMSE\n2.87"
  },
  {
    "objectID": "vignettes/modelsummary.html#coef_map-order-omit-rename",
    "href": "vignettes/modelsummary.html#coef_map-order-omit-rename",
    "title": "Model Summaries",
    "section": "coef_map: order, omit, rename",
    "text": "coef_map: order, omit, rename\nThe coef_map argument is a named vector which allows users to rename, reorder, and subset coefficient estimates. Values of this vector correspond to the “clean” variable name. Names of this vector correspond to the “raw” variable name. The table will be sorted in the order in which terms are presented in coef_map. Coefficients which are not included in coef_map will be excluded from the table.\n\ncm &lt;- c('Literacy'    = 'Literacy (%)',\n        'Commerce'    = 'Patents per capita',\n        '(Intercept)' = 'Constant')\nmodelsummary(models, coef_map = cm)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    Literacy (%)\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n    Patents per capita\n\n0.011\n\n0.001\n\n    \n\n(0.000)\n\n(0.000)\n\n    Constant\n7948.667\n8.241\n16259.384\n9.876\n11243.544\n    \n(2078.276)\n(0.006)\n(2611.140)\n(0.003)\n(1011.240)\n    Num.Obs.\n86\n86\n86\n86\n86\n    R2\n0.020\n\n0.065\n\n0.152\n    R2 Adj.\n-0.003\n\n0.043\n\n0.132\n    AIC\n1740.8\n274160.8\n1780.0\n257564.4\n1616.9\n    BIC\n1750.6\n274168.2\n1789.9\n257571.7\n1626.7\n    Log.Lik.\n-866.392\n-137077.401\n-886.021\n-128779.186\n-804.441\n    F\n0.866\n18294.559\n2.903\n279.956\n7.441\n    RMSE\n5740.99\n5491.61\n7212.97\n7451.70\n2793.43"
  },
  {
    "objectID": "vignettes/modelsummary.html#gof_omit-goodness-of-fit-and-model-characteristics",
    "href": "vignettes/modelsummary.html#gof_omit-goodness-of-fit-and-model-characteristics",
    "title": "Model Summaries",
    "section": "gof_omit: goodness-of-fit and model characteristics",
    "text": "gof_omit: goodness-of-fit and model characteristics\ngof_omit is a regular expression which will be fed to grepl(x,perl=TRUE) to detect the names of the statistics which should be excluded from the table.\nmodelsummary(models, gof_omit = 'DF|Deviance|R2|AIC|BIC')"
  },
  {
    "objectID": "vignettes/modelsummary.html#gof_map",
    "href": "vignettes/modelsummary.html#gof_map",
    "title": "Model Summaries",
    "section": "gof_map",
    "text": "gof_map\nThe gof_map argument can be used to rename, re-order, subset, and format the statistics displayed in the bottom section of the table (“goodness-of-fit”).\nThe first type of values allowed is a character vector with elements equal to column names in the data.frame produced by get_gof(model):\n\nmodelsummary(models, gof_map = c(\"nobs\", \"r.squared\"))\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667\n8.241\n16259.384\n9.876\n11243.544\n    \n(2078.276)\n(0.006)\n(2611.140)\n(0.003)\n(1011.240)\n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    \n(37.052)\n(0.000)\n(46.552)\n(0.000)\n(18.029)\n    Clergy\n15.257\n\n77.148\n\n-16.376\n    \n(25.735)\n\n(32.334)\n\n(12.522)\n    Commerce\n\n0.011\n\n0.001\n\n    \n\n(0.000)\n\n(0.000)\n\n    Num.Obs.\n86\n86\n86\n86\n86\n    R2\n0.020\n\n0.065\n\n0.152\n  \n  \n  \n\n\n\n\nA more powerful mechanism is to supply a data.frame (or tibble) through the gof_map argument. This data.frame must include 3 columns:\n\nraw: a string with the name of a column produced by get_gof(model).\nclean: a string with the “clean” name of the statistic you want to appear in your final table.\nfmt: a string which will be used to round/format the string in question (e.g., \"%.3f\"). This follows the same standards as the fmt argument in ?modelsummary.\n\nYou can see an example of a valid data frame by typing modelsummary::gof_map. This is the default data.frame that modelsummary uses to subset and reorder goodness-of-fit statistics. As you can see, omit == TRUE for quite a number of statistics. You can include setting omit == FALSE:\ngm &lt;- modelsummary::gof_map\ngm$omit &lt;- FALSE\nmodelsummary(models, gof_map = gm)\nThe goodness-of-fit statistics will be printed in the table in the same order as in the gof_map data.frame.\nf &lt;- function(x) format(round(x, 3), big.mark=\",\")\ngm &lt;- list(\n  list(\"raw\" = \"nobs\", \"clean\" = \"N\", \"fmt\" = f),\n  list(\"raw\" = \"AIC\", \"clean\" = \"aic\", \"fmt\" = f))\nmodelsummary(models, gof_map = gm)\nNotice the subtle difference between coef_map and gof_map. On the one hand, coef_map works as a “white list”: any coefficient not explicitly entered will be omitted from the table. On the other, gof_map works as a “black list”: statistics need to be explicitly marked for omission.\nAnother convenient way to build a gof_map argument is to use the tribble function from the tibble package. In this example, we insert special HTML code to display a superscript, so we use the escape=FALSE argument:\n\ngm &lt;- tibble::tribble(\n  ~raw,        ~clean,          ~fmt,\n  \"nobs\",      \"N\",             0,\n  \"r.squared\", \"R&lt;sup&gt;2&lt;/sup&gt;\", 2)\n\nmodelsummary(\n  models,\n  statistic = NULL,\n  gof_map = gm,\n  escape = FALSE)\n\n\n\n\n  \n    \n    \n       \n      OLS 1\n      Poisson 1\n      OLS 2\n      Poisson 2\n      OLS 3\n    \n  \n  \n    (Intercept)\n7948.667\n8.241\n16259.384\n9.876\n11243.544\n    Literacy\n-39.121\n0.003\n3.680\n0.000\n-68.507\n    Clergy\n15.257\n\n77.148\n\n-16.376\n    Commerce\n\n0.011\n\n0.001\n\n    N\n86\n86\n86\n86\n86\n    R&lt;sup&gt;2&lt;/sup&gt;\n0.02\n\n0.07\n\n0.15"
  },
  {
    "objectID": "vignettes/modelsummary.html#shape-pivot-groups-panels-and-stacks",
    "href": "vignettes/modelsummary.html#shape-pivot-groups-panels-and-stacks",
    "title": "Model Summaries",
    "section": "shape: pivot, groups, panels, and stacks",
    "text": "shape: pivot, groups, panels, and stacks\nThis section requires version 1.3.1 of modelsummary. If this version is not available on CRAN yet, you can install the development version by following the instructions on the website.\nThe shape argument accepts:\n\nA formula which determines the structure of the table, and can display “grouped” coefficients together (e.g., multivariate outcome or mixed-effects models).\nThe strings “rbind” or “rcollapse” to stack multiple tables on top of each other and present models in distinct “panels”.\n\n\nFormula\nThe left side of the formula represents the rows and the right side represents the columns. The default formula is term + statistic ~ model:\n\nm &lt;- list(\n    lm(mpg ~ hp, data = mtcars),\n    lm(mpg ~ hp + drat, data = mtcars))\n\nmodelsummary(m, shape = term + statistic ~ model, gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    (Intercept)\n30.099\n10.790\n    \n(1.634)\n(5.078)\n    hp\n-0.068\n-0.052\n    \n(0.010)\n(0.009)\n    drat\n\n4.698\n    \n\n(1.192)\n  \n  \n  \n\n\n\n\nWe can display statistics horizontally with:\n\nmodelsummary(m,\n             shape = term ~ model + statistic,\n             statistic = \"conf.int\",\n             gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      \n        (1)    \n      \n      \n        (2)    \n      \n    \n    \n      Est.\n      2.5 %\n      97.5 %\n      Est. \n      2.5 % \n      97.5 % \n    \n  \n  \n    (Intercept)\n30.099\n26.762\n33.436\n10.790\n0.405\n21.175\n    hp\n-0.068\n-0.089\n-0.048\n-0.052\n-0.071\n-0.033\n    drat\n\n\n\n4.698\n2.261\n7.135\n  \n  \n  \n\n\n\n\nThe order of terms in the formula determines the order of headers in the table.\n\nmodelsummary(m,\n             shape = term ~ statistic + model,\n             statistic = \"conf.int\",\n             gof_map = NA)\n\n\n\n\n  \n    \n    \n       \n      \n        Est.    \n      \n      \n        2.5 %    \n      \n      \n        97.5 %    \n      \n    \n    \n      (1)\n      (2)\n      (1) \n      (2) \n      (1)  \n      (2)  \n    \n  \n  \n    (Intercept)\n30.099\n10.790\n26.762\n0.405\n33.436\n21.175\n    hp\n-0.068\n-0.052\n-0.089\n-0.071\n-0.048\n-0.033\n    drat\n\n4.698\n\n2.261\n\n7.135\n  \n  \n  \n\n\n\n\nshape does partial matching and will try to fill-in incomplete formulas:\n\nmodelsummary(m, shape = ~ statistic)\n\nSome models like multinomial logit or GAMLSS produce “grouped” parameter estimates. To display these groups, we can include a group identifier in the shape formula. This group identifier must be one of the column names produced by get_estimates(model). For example, in models produced by nnet::multinom, the group identifier is called “response”:\n\nlibrary(nnet)\n\ndat_multinom &lt;- mtcars\ndat_multinom$cyl &lt;- sprintf(\"Cyl: %s\", dat_multinom$cyl)\n\nmod &lt;- list(\n    nnet::multinom(cyl ~ mpg, data = dat_multinom, trace = FALSE),\n    nnet::multinom(cyl ~ mpg + drat, data = dat_multinom, trace = FALSE))\n\nget_estimates(mod[[1]])\n\n         term  estimate std.error conf.level    conf.low   conf.high statistic\n1 (Intercept) 47.252432 34.975171       0.95 -21.2976435 115.8025065  1.351028\n2         mpg -2.205418  1.637963       0.95  -5.4157653   1.0049299 -1.346440\n3 (Intercept) 72.440246 37.175162       0.95  -0.4217332 145.3022247  1.948619\n4         mpg -3.579991  1.774693       0.95  -7.0583242  -0.1016573 -2.017246\n  df.error    p.value response s.value group\n1      Inf 0.17668650   Cyl: 6     2.5      \n2      Inf 0.17816078   Cyl: 6     2.5      \n3      Inf 0.05134088   Cyl: 8     4.3      \n4      Inf 0.04366989   Cyl: 8     4.5      \n\n\nTo summarize the results, we can type:\n\nmodelsummary(mod, shape = term + response ~ statistic)\n\n\n\n\n  \n    \n    \n       \n      response\n      \n        (1)    \n      \n      \n        (2)    \n      \n    \n    \n      Est.\n      S.E.\n      Est. \n      S.E. \n    \n  \n  \n    (Intercept)\nCyl: 6\n47.252\n34.975\n89.573\n86.884\n    \nCyl: 8\n72.440\n37.175\n117.971\n87.998\n    mpg\nCyl: 6\n-2.205\n1.638\n-3.627\n3.869\n    \nCyl: 8\n-3.580\n1.775\n-4.838\n3.915\n    drat\nCyl: 6\n\n\n-3.210\n3.810\n    \nCyl: 8\n\n\n-5.028\n4.199\n    Num.Obs.\n\n32\n\n32\n\n    R2\n\n0.763\n\n0.815\n\n    R2 Adj.\n\n0.733\n\n0.786\n\n    AIC\n\n24.1\n\n24.5\n\n    BIC\n\n30.0\n\n33.3\n\n    RMSE\n\n0.24\n\n0.20\n\n  \n  \n  \n\n\n\n\nThe terms of the shape formula above can of course be rearranged to reshape the table. For example:\n\nmodelsummary(mod, shape = model + term ~ response)\n\n\n\n\n  \n    \n    \n       \n        \n      Cyl: 6\n      Cyl: 8\n    \n  \n  \n    (1)\n(Intercept)\n47.252\n72.440\n    \n\n(34.975)\n(37.175)\n    \nmpg\n-2.205\n-3.580\n    \n\n(1.638)\n(1.775)\n    (2)\n(Intercept)\n89.573\n117.971\n    \n\n(86.884)\n(87.998)\n    \nmpg\n-3.627\n-4.838\n    \n\n(3.869)\n(3.915)\n    \ndrat\n-3.210\n-5.028\n    \n\n(3.810)\n(4.199)\n  \n  \n  \n\n\n\n\nIn version 1.0.1 of the package and later, we can combine the term and group identifier columns by inserting an interaction colon : instead of the + in the formula:\n\nlibrary(marginaleffects)\nmod &lt;- glm(am ~ mpg + factor(cyl), family = binomial, data = mtcars)\nmfx &lt;- marginaleffects(mod)\n\nmodelsummary(mfx, shape = term + contrast ~ model)\n\n\n\n\n  \n    \n    \n       \n        \n      (1)\n    \n  \n  \n    cyl\nmean(6) - mean(4)\n0.097\n    \n\n(0.166)\n    \nmean(8) - mean(4)\n0.093\n    \n\n(0.234)\n    mpg\nmean(dY/dX)\n0.056\n    \n\n(0.027)\n    Num.Obs.\n\n32\n    AIC\n\n37.4\n    BIC\n\n43.3\n    Log.Lik.\n\n-14.702\n    F\n\n2.236\n    RMSE\n\n0.39\n  \n  \n  \n\n\n\n\n\nmodelsummary(mfx, shape = term : contrast ~ model)\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    cyl mean(6) - mean(4)\n0.097\n    \n(0.166)\n    cyl mean(8) - mean(4)\n0.093\n    \n(0.234)\n    mpg mean(dY/dX)\n0.056\n    \n(0.027)\n    Num.Obs.\n32\n    AIC\n37.4\n    BIC\n43.3\n    Log.Lik.\n-14.702\n    F\n2.236\n    RMSE\n0.39\n  \n  \n  \n\n\n\n\n\n\nString (“rbind” or “rcollapse”): Panels of models in stacked regression tables\nNote: The code in this section requires version 1.3.0 or the development version of modelsummary. See the website for installation instructions.\nThis section shows how to “stack/bind” multiple regression tables on top of one another, to display the results several models side-by-side and top-to-bottom. For example, imagine that we want to present 4 different models, half of which are estimated using a different outcome variable. When using modelsummary, we store models in a list. When using modelsummary with shape=\"rbind\" or shape=\"rbind\", we store models in a list of lists:\n\ngm &lt;- c(\"r.squared\", \"nobs\", \"rmse\")\n\npanels &lt;- list(\n  list(\n    lm(mpg ~ 1, data = mtcars),\n    lm(mpg ~ qsec, data = mtcars)\n  ),\n  list(\n    lm(hp ~ 1, data = mtcars),\n    lm(hp ~ qsec, data = mtcars)\n  )\n)\n\nmodelsummary(\n  panels,\n  shape = \"rbind\",\n  gof_map = gm)\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    \n      Panel A\n    \n    (Intercept)\n20.091\n-5.114\n    \n(1.065)\n(10.030)\n    qsec\n\n1.412\n    \n\n(0.559)\n    R2\n0.000\n0.175\n    Num.Obs.\n32\n32\n    RMSE\n5.93\n5.39\n    \n      Panel B\n    \n    (Intercept)\n146.688\n631.704\n    \n(12.120)\n(88.700)\n    qsec\n\n-27.174\n    \n\n(4.946)\n    R2\n0.000\n0.502\n    Num.Obs.\n32\n32\n    RMSE\n67.48\n47.64\n  \n  \n  \n\n\n\n\nLike with modelsummary(), we can can name models and panels by naming elements of our nested list:\n\npanels &lt;- list(\n  \"Outcome: mpg\" = list(\n    \"(I)\" = lm(mpg ~ 1, data = mtcars),\n    \"(II)\" = lm(mpg ~ qsec, data = mtcars)\n  ),\n  \"Outcome: hp\" = list(\n    \"(I)\" = lm(hp ~ 1, data = mtcars),\n    \"(II)\" = lm(hp ~ qsec, data = mtcars)\n  )\n)\n\nmodelsummary(\n  panels,\n  shape = \"rbind\",\n  gof_map = gm)\n\n\n\n\n  \n    \n    \n       \n      (I)\n      (II)\n    \n  \n  \n    \n      Outcome: mpg\n    \n    (Intercept)\n20.091\n-5.114\n    \n(1.065)\n(10.030)\n    qsec\n\n1.412\n    \n\n(0.559)\n    R2\n0.000\n0.175\n    Num.Obs.\n32\n32\n    RMSE\n5.93\n5.39\n    \n      Outcome: hp\n    \n    (Intercept)\n146.688\n631.704\n    \n(12.120)\n(88.700)\n    qsec\n\n-27.174\n    \n\n(4.946)\n    R2\n0.000\n0.502\n    Num.Obs.\n32\n32\n    RMSE\n67.48\n47.64\n  \n  \n  \n\n\n\n\n\nfixest\nThe fixest package offers powerful tools to estimate multiple models using a concise syntax. fixest functions are also convenient because they return named lists of models which are easy to subset and manipulate using standard R functions like grepl.\nFor example, to introduce regressors in stepwise fashion, and to estimate models on different subsets of the data, we can do:\n\n##| message = FALSE\n\n## estimate 4 models\nlibrary(fixest)\n\n\nAttaching package: 'fixest'\n\n\nThe following object is masked _by_ '.GlobalEnv':\n\n    f\n\nmod &lt;- feols(\n  c(hp, mpg) ~ csw(qsec, drat) | gear,\n  data = mtcars)\n\n## select models with different outcome variables\npanels &lt;- list(\n  \"Miles per gallon\" = mod[grepl(\"mpg\", names(mod))],\n  \"Horsepower\" = mod[grepl(\"hp\", names(mod))]\n)\n\nmodelsummary(\n  panels,\n  shape = \"rcollapse\",\n  gof_omit = \"IC|R2\")\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    \n      Miles per gallon\n    \n    qsec\n1.436\n1.519\n    \n(0.594)\n(0.529)\n    drat\n\n5.765\n    \n\n(2.381)\n    RMSE\n4.03\n3.67\n    \n      Horsepower\n    \n    qsec\n-22.175\n-22.676\n    \n(12.762)\n(13.004)\n    drat\n\n-35.106\n    \n\n(28.509)\n    RMSE\n40.45\n39.14\n    \n      \n    \n    Num.Obs.\n32\n32\n    Std.Errors\nby: gear\nby: gear\n    FE: gear\nX\nX\n  \n  \n  \n\n\n\n\nWe can use all the typical extension systems to add information, such as the mean of the dependent variable:\n\nglance_custom.fixest &lt;- function(x, ...) {\n  dv &lt;- insight::get_response(x)\n  dv &lt;- sprintf(\"%.2f\", mean(dv, na.rm = TRUE))\n  data.table::data.table(`Mean of DV` = dv)\n}\n\nmodelsummary(\n  panels,\n  shape = \"rcollapse\",\n  gof_omit = \"IC|R2\")\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    \n      Miles per gallon\n    \n    qsec\n1.436\n1.519\n    \n(0.594)\n(0.529)\n    drat\n\n5.765\n    \n\n(2.381)\n    RMSE\n4.03\n3.67\n    Mean of DV\n20.09\n20.09\n    \n      Horsepower\n    \n    qsec\n-22.175\n-22.676\n    \n(12.762)\n(13.004)\n    drat\n\n-35.106\n    \n\n(28.509)\n    RMSE\n40.45\n39.14\n    Mean of DV\n146.69\n146.69\n    \n      \n    \n    Num.Obs.\n32\n32\n    Std.Errors\nby: gear\nby: gear\n    FE: gear\nX\nX\n  \n  \n  \n\n\n\nrm(\"glance_custom.fixest\")"
  },
  {
    "objectID": "vignettes/modelsummary.html#align-column-alignment",
    "href": "vignettes/modelsummary.html#align-column-alignment",
    "title": "Model Summaries",
    "section": "align: column alignment",
    "text": "align: column alignment\nBy default, modelsummary will align the first column (with coefficient names) to the left, and will center the results columns. To change this default, you can use the align argument, which accepts a string of the same length as the number of columns:\n\nmodelsummary(models, align=\"lrrrrr\")\n\nUsers who produce PDF documents using Rmarkdown or LaTeX can also align values on the decimal dot by using the character “d” in the align argument:\n\nmodelsummary(models, align=\"lddddd\")\n\nFor the table produced by this code to compile, users must include the following code in their LaTeX preamble:\n\n\\usepackage{booktabs}\n\\usepackage{siunitx}\n\\newcolumntype{d}{S[input-symbols = ()]}"
  },
  {
    "objectID": "vignettes/modelsummary.html#notes-footers",
    "href": "vignettes/modelsummary.html#notes-footers",
    "title": "Model Summaries",
    "section": "notes: footers",
    "text": "notes: footers\nAdd notes to the bottom of your table:\nmodelsummary(models, \n   notes = list('Text of the first note.', \n                'Text of the second note.'))"
  },
  {
    "objectID": "vignettes/modelsummary.html#title-captions",
    "href": "vignettes/modelsummary.html#title-captions",
    "title": "Model Summaries",
    "section": "title: captions",
    "text": "title: captions\nYou can add a title to your table as follows:\nmodelsummary(models, title = 'This is a title for my table.')"
  },
  {
    "objectID": "vignettes/modelsummary.html#add_rows",
    "href": "vignettes/modelsummary.html#add_rows",
    "title": "Model Summaries",
    "section": "add_rows",
    "text": "add_rows\nUse the add_rows argument to add rows manually to a table. For example, let’s say you estimate two models with a factor variables and you want to insert (a) an empty line to identify the category of reference, and (b) customized information at the bottom of the table:\n\nmodels &lt;- list()\nmodels[['OLS']] &lt;- lm(mpg ~ factor(cyl), mtcars)\nmodels[['Logit']] &lt;- glm(am ~ factor(cyl), mtcars, family = binomial)\n\nWe create a data.frame with the same number of columns as the summary table. Then, we define a “position” attribute to specify where the new rows should be inserted in the table. Finally, we pass this data.frame to the add_rows argument:\n\nlibrary(tibble)\nrows &lt;- tribble(~term,          ~OLS,  ~Logit,\n                'factor(cyl)4', '-',   '-',\n                'Info',         '???', 'XYZ')\nattr(rows, 'position') &lt;- c(3, 9)\n\nmodelsummary(models, add_rows = rows)\n\n\n\n\n  \n    \n    \n       \n      OLS\n      Logit\n    \n  \n  \n    (Intercept)\n26.664\n0.981\n    \n(0.972)\n(0.677)\n    factor(cyl)4\n-\n-\n    factor(cyl)6\n-6.921\n-1.269\n    \n(1.558)\n(1.021)\n    factor(cyl)8\n-11.564\n-2.773\n    \n(1.299)\n(1.021)\n    Num.Obs.\n32\n32\n    Info\n???\nXYZ\n    R2\n0.732\n\n    R2 Adj.\n0.714\n\n    AIC\n170.6\n39.9\n    BIC\n176.4\n44.3\n    Log.Lik.\n-81.282\n-16.967\n    F\n39.698\n3.691\n    RMSE\n3.07\n0.42"
  },
  {
    "objectID": "vignettes/modelsummary.html#exponentiate",
    "href": "vignettes/modelsummary.html#exponentiate",
    "title": "Model Summaries",
    "section": "exponentiate",
    "text": "exponentiate\nWe can exponentiate their estimates using the exponentiate argument:\n\nmod_logit &lt;- glm(am ~ mpg, data = mtcars, family = binomial)\nmodelsummary(mod_logit, exponentiate = TRUE)\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    (Intercept)\n0.001\n    \n(0.003)\n    mpg\n1.359\n    \n(0.156)\n    Num.Obs.\n32\n    AIC\n33.7\n    BIC\n36.6\n    Log.Lik.\n-14.838\n    F\n7.148\n    RMSE\n0.39\n  \n  \n  \n\n\n\n\nWe can also present exponentiated and standard models side by side by using a logical vector:\n\nmod_logit &lt;- list(mod_logit, mod_logit)\nmodelsummary(mod_logit, exponentiate = c(TRUE, FALSE))\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    (Intercept)\n0.001\n-6.604\n    \n(0.003)\n(2.351)\n    mpg\n1.359\n0.307\n    \n(0.156)\n(0.115)\n    Num.Obs.\n32\n32\n    AIC\n33.7\n33.7\n    BIC\n36.6\n36.6\n    Log.Lik.\n-14.838\n-14.838\n    F\n7.148\n7.148\n    RMSE\n0.39\n0.39"
  },
  {
    "objectID": "vignettes/modelsummary.html#ellipsis-additional-arguments",
    "href": "vignettes/modelsummary.html#ellipsis-additional-arguments",
    "title": "Model Summaries",
    "section": "... ellipsis: Additional arguments",
    "text": "... ellipsis: Additional arguments\nAll arguments passed by the user to a modelsummary function are pushed forward in two other functions:\n\nThe function which extracts model estimates.\n\nBy default, additional arguments are pushed forward to parameters::parameters and performance::performance. Users can also can also use a different “backend” to extract information from model objects: the broom package. By setting the modelsummary_get global option, we tell modelsummary to use the easystats/parameters packages instead of broom. With these packages, other arguments are available, such as the metrics argument. Please refer to these package’s documentation to details.\n\nThe table-making functions.\n\nBy default, additional arguments are pushed forward to kableExtra::kbl, but users can use a different table-making function by setting the output argument to a different value such as \"gt\", \"flextable\", or \"huxtable\".\nSee the Appearance vignette for examples.\n\n\nAll arguments passed supported by these functions are thus automatically available directly in modelsummary, modelplot, and the datasummary family of functions."
  },
  {
    "objectID": "vignettes/modelsummary.html#custom-appearance",
    "href": "vignettes/modelsummary.html#custom-appearance",
    "title": "Model Summaries",
    "section": "Custom appearance",
    "text": "Custom appearance\nTo customize the appearance of tables, modelsummary supports five popular and extremely powerful table-making packages:\n\ngt: https://gt.rstudio.com\nkableExtra: http://haozhu233.github.io/kableExtra\nhuxtable: https://hughjonesd.github.io/huxtable/\nflextable: https://davidgohel.github.io/flextable/\nDT: https://rstudio.github.io/DT\n\nThe “customizing the look of your tables” vignette shows examples for all 4 packages."
  },
  {
    "objectID": "vignettes/modelsummary.html#supported-models",
    "href": "vignettes/modelsummary.html#supported-models",
    "title": "Model Summaries",
    "section": "Supported models",
    "text": "Supported models\nmodelsummary automatically supports all the models supported by the tidy function of the broom package or the parameters function of the parameters package. The list of supported models is rapidly expanding. At the moment, it covers the following model classes:\n\nsupported_models()\n\n  [1] \"aareg\"                    \"acf\"                     \n  [3] \"afex_aov\"                 \"AKP\"                     \n  [5] \"anova\"                    \"Anova.mlm\"               \n  [7] \"anova.rms\"                \"aov\"                     \n  [9] \"aovlist\"                  \"Arima\"                   \n [11] \"averaging\"                \"bamlss\"                  \n [13] \"bayesQR\"                  \"bcplm\"                   \n [15] \"befa\"                     \"betamfx\"                 \n [17] \"betaor\"                   \"betareg\"                 \n [19] \"BFBayesFactor\"            \"bfsl\"                    \n [21] \"BGGM\"                     \"bifeAPEs\"                \n [23] \"biglm\"                    \"binDesign\"               \n [25] \"binWidth\"                 \"blavaan\"                 \n [27] \"blrm\"                     \"boot\"                    \n [29] \"bracl\"                    \"brmsfit\"                 \n [31] \"brmultinom\"               \"btergm\"                  \n [33] \"cch\"                      \"censReg\"                 \n [35] \"cgam\"                     \"character\"               \n [37] \"cld\"                      \"clm\"                     \n [39] \"clm2\"                     \"clmm\"                    \n [41] \"clmm2\"                    \"coeftest\"                \n [43] \"comparisons\"              \"confint.glht\"            \n [45] \"confusionMatrix\"          \"coxph\"                   \n [47] \"cpglmm\"                   \"crr\"                     \n [49] \"cv.glmnet\"                \"data.frame\"              \n [51] \"dbscan\"                   \"default\"                 \n [53] \"deltaMethod\"              \"density\"                 \n [55] \"dep.effect\"               \"DirichletRegModel\"       \n [57] \"dist\"                     \"draws\"                   \n [59] \"drc\"                      \"durbinWatsonTest\"        \n [61] \"emm_list\"                 \"emmeans\"                 \n [63] \"emmeans_summary\"          \"emmGrid\"                 \n [65] \"epi.2by2\"                 \"ergm\"                    \n [67] \"fa\"                       \"fa.ci\"                   \n [69] \"factanal\"                 \"FAMD\"                    \n [71] \"feglm\"                    \"felm\"                    \n [73] \"fitdistr\"                 \"fixest\"                  \n [75] \"fixest_multi\"             \"flac\"                    \n [77] \"flic\"                     \"ftable\"                  \n [79] \"gam\"                      \"Gam\"                     \n [81] \"gamlss\"                   \"gamm\"                    \n [83] \"garch\"                    \"geeglm\"                  \n [85] \"ggeffects\"                \"glht\"                    \n [87] \"glimML\"                   \"glm\"                     \n [89] \"glmm\"                     \"glmmTMB\"                 \n [91] \"glmnet\"                   \"glmrob\"                  \n [93] \"glmRob\"                   \"glmx\"                    \n [95] \"gmm\"                      \"hclust\"                  \n [97] \"hdbscan\"                  \"hglm\"                    \n [99] \"hkmeans\"                  \"HLfit\"                   \n[101] \"htest\"                    \"hurdle\"                  \n[103] \"hypotheses\"               \"irlba\"                   \n[105] \"ivFixed\"                  \"ivprobit\"                \n[107] \"ivreg\"                    \"kappa\"                   \n[109] \"kde\"                      \"Kendall\"                 \n[111] \"kmeans\"                   \"lavaan\"                  \n[113] \"leveneTest\"               \"Line\"                    \n[115] \"Lines\"                    \"list\"                    \n[117] \"lm\"                       \"lm_robust\"               \n[119] \"lm.beta\"                  \"lme\"                     \n[121] \"lmodel2\"                  \"lmrob\"                   \n[123] \"lmRob\"                    \"logical\"                 \n[125] \"logistf\"                  \"logitmfx\"                \n[127] \"logitor\"                  \"lqm\"                     \n[129] \"lqmm\"                     \"lsmobj\"                  \n[131] \"manova\"                   \"maov\"                    \n[133] \"map\"                      \"marginaleffects\"         \n[135] \"marginalmeans\"            \"margins\"                 \n[137] \"maxim\"                    \"maxLik\"                  \n[139] \"mblogit\"                  \"Mclust\"                  \n[141] \"mcmc\"                     \"mcmc.list\"               \n[143] \"MCMCglmm\"                 \"mcp1\"                    \n[145] \"mcp2\"                     \"med1way\"                 \n[147] \"mediate\"                  \"merMod\"                  \n[149] \"merModList\"               \"meta_bma\"                \n[151] \"meta_fixed\"               \"meta_random\"             \n[153] \"metaplus\"                 \"mfx\"                     \n[155] \"mhurdle\"                  \"mipo\"                    \n[157] \"mira\"                     \"mixed\"                   \n[159] \"MixMod\"                   \"mixor\"                   \n[161] \"mjoint\"                   \"mle\"                     \n[163] \"mle2\"                     \"mlm\"                     \n[165] \"mlogit\"                   \"mmrm\"                    \n[167] \"mmrm_fit\"                 \"mmrm_tmb\"                \n[169] \"model_fit\"                \"model_parameters\"        \n[171] \"muhaz\"                    \"multinom\"                \n[173] \"mvord\"                    \"negbin\"                  \n[175] \"negbinirr\"                \"negbinmfx\"               \n[177] \"nestedLogit\"              \"nlrq\"                    \n[179] \"nls\"                      \"NULL\"                    \n[181] \"numeric\"                  \"omega\"                   \n[183] \"onesampb\"                 \"optim\"                   \n[185] \"orcutt\"                   \"osrt\"                    \n[187] \"pairwise.htest\"           \"pam\"                     \n[189] \"parameters_efa\"           \"parameters_pca\"          \n[191] \"PCA\"                      \"pgmm\"                    \n[193] \"plm\"                      \"PMCMR\"                   \n[195] \"poissonirr\"               \"poissonmfx\"              \n[197] \"poLCA\"                    \"polr\"                    \n[199] \"Polygon\"                  \"Polygons\"                \n[201] \"power.htest\"              \"prcomp\"                  \n[203] \"predictions\"              \"principal\"               \n[205] \"probitmfx\"                \"pvclust\"                 \n[207] \"pyears\"                   \"rcorr\"                   \n[209] \"ref.grid\"                 \"regsubsets\"              \n[211] \"ridgelm\"                  \"rlm\"                     \n[213] \"rlmerMod\"                 \"rma\"                     \n[215] \"robtab\"                   \"roc\"                     \n[217] \"rq\"                       \"rqs\"                     \n[219] \"rqss\"                     \"sarlm\"                   \n[221] \"Sarlm\"                    \"scam\"                    \n[223] \"selection\"                \"sem\"                     \n[225] \"SemiParBIV\"               \"slopes\"                  \n[227] \"SpatialLinesDataFrame\"    \"SpatialPolygons\"         \n[229] \"SpatialPolygonsDataFrame\" \"spec\"                    \n[231] \"speedglm\"                 \"speedlm\"                 \n[233] \"stanfit\"                  \"stanmvreg\"               \n[235] \"stanreg\"                  \"summary_emm\"             \n[237] \"summary.glht\"             \"summary.lm\"              \n[239] \"summary.plm\"              \"summaryDefault\"          \n[241] \"survdiff\"                 \"survexp\"                 \n[243] \"survfit\"                  \"survreg\"                 \n[245] \"svd\"                      \"svyglm\"                  \n[247] \"svyolr\"                   \"svytable\"                \n[249] \"systemfit\"                \"t1way\"                   \n[251] \"table\"                    \"tobit\"                   \n[253] \"trendPMCMR\"               \"trimcibt\"                \n[255] \"ts\"                       \"TukeyHSD\"                \n[257] \"varest\"                   \"vgam\"                    \n[259] \"wbgee\"                    \"wbm\"                     \n[261] \"wmcpAKP\"                  \"xyz\"                     \n[263] \"yuen\"                     \"zcpglm\"                  \n[265] \"zerocount\"                \"zeroinfl\"                \n[267] \"zoo\"                     \n\n\nTo see if a given model is supported, you can fit it, and then call this function:\n\nget_estimates(model)\n\nIf this function does not return a valid output, you can easily (really!!) add your own support. See the next section for a tutorial. If you do this, you may consider opening an issue on the Github website of the broom package: https://github.com/tidymodels/broom/issues"
  },
  {
    "objectID": "vignettes/modelsummary.html#rmarkdown-quarto-org-mode",
    "href": "vignettes/modelsummary.html#rmarkdown-quarto-org-mode",
    "title": "Model Summaries",
    "section": "Rmarkdown, Quarto, Org-Mode",
    "text": "Rmarkdown, Quarto, Org-Mode\n\nRmarkdown\nYou can use modelsummary to insert tables into dynamic documents with knitr or Rmarkdown. This minimal .Rmd file can produce tables in PDF, HTML, or RTF documents:\n\nminimal.Rmd\n\nThis .Rmd file shows illustrates how to use table numbering and cross-references to produce PDF documents using bookdown:\n\ncross_references.Rmd\n\nThis .Rmd file shows how to customize tables in PDF and HTML files using gt and kableExtra functions:\n\nappearance.Rmd\n\n\n\nQuarto\nQuarto is an open source publishing system built on top of Pandoc. It was designed as a “successor” to Rmarkdown, and includes useful features for technical writing, such as built-in support for cross-references. modelsummary works automatically with Quarto. This is a minimal document with cross-references which should render automatically to PDF, HTML, and more:\n\n---\nformat: pdf\ntitle: Example\n---\n\n@tbl-mtcars shows that cars with high horse power get low miles per gallon.\n\n```{r}\n##| label: tbl-mtcars\n##| tbl-cap: \"Horse Powers vs. Miles per Gallon\"\nlibrary(modelsummary)\nmod &lt;- lm(mpg ~ hp, mtcars)\nmodelsummary(mod)\n:::\n\n### Emacs Org-Mode\n\nYou can use `modelsummary` to insert tables into Emacs Org-Mode documents, which can be exported to a variety of formats, including HTML and PDF (via LaTeX). As with anything Emacs-related, there are many ways to achieve the outcomes you want. Here is one example of an Org-Mode document which can automatically export tables to HTML and PDF without manual tweaks:\n\n##+PROPERTY: header-args:R :var orgbackend=(prin1-to-string org-export-current-backend) ##+MACRO: Rtable (eval (concat “#+header: :results output” (prin1-to-string org-export-current-backend)))\n{{{Rtable}}} ##+BEGIN_SRC R :exports both library(modelsummary) options(modelsummary_factory_default = orgbackend)\nmod = lm(hp ~ mpg, data = mtcars)\nmodelsummary(mod) ##+END_SRC\n\nThe first line tells Org-mode to assign a variable called `orgbackend`. This variable will be accessible by the `R` session, and will be equal to \"html\" or \"latex\", depending on the export format.\n\nThe second line creates an Org macro which we will use to automatically add useful information to the header of source blocks. For instance, when we export to HTML, the macro will expand to `:results output html`. This tells Org-Mode to insert the last printed output from the `R` session, and to treat it as raw HTML. \n\nThe `{{{Rtable}}}` call expands the macro to add information to the header of the block that follows.\n\n`#+BEGIN_SRC R :exports both` says that we want to print both the original code and the output (`:exports results` would omit the code, for example).\n\nFinally, `options(modelsummary_factory_default=orgbackend` uses the variable we defined to set the default output format. That way, we don't have to use the `output` argument every time.\n\nOne potentially issue to keep in mind is that the code above extracts the printout from the `R` console. However, when we customize tables with `kableExtra` or `gt` functions, those functions do not always return printed raw HTML or LaTeX code. Sometimes, it can be necessary to add a call to `cat` at the end of a table customization pipeline. For example:\n\n{{{Rtable}}} ##+BEGIN_SRC R :exports both library(modelsummary) library(kableExtra)\nmod = lm(hp ~ mpg, data = mtcars)\nmodelsummary(mod, output = orgbackend) %&gt;% row_spec(1, background = “pink”) %&gt;% cat() ##+END_SRC\n\n## Global options\n\nUsers can change the default behavior of `modelsummary` by setting global options.\n\nOmit the note at the bottom of the table with significance threshold:\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(\"modelsummary_stars_note\" = FALSE)\n```\n:::\n\nChange the default output format:\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(modelsummary_factory_default = \"latex\")\noptions(modelsummary_factory_default = \"gt\")\n```\n:::\n\nChange the backend packages that `modelsummary` uses to create tables in different output formats:\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(modelsummary_factory_html = 'kableExtra')\noptions(modelsummary_factory_latex = 'flextable')\noptions(modelsummary_factory_word = 'huxtable')\noptions(modelsummary_factory_png = 'gt')\n```\n:::\n\nChange the packages that `modelsummary` uses to extract information from models:\n\n::: {.cell}\n\n```{.r .cell-code}\n## tidymodels: broom \noptions(modelsummary_get = \"broom\")\n\n## easystats: performance + parameters\noptions(modelsummary_get = \"easystats\")\n```\n:::\n\n[The `appearance` vignette](https://modelsummary.com/articles/appearance.html#themes) shows how to set \"themes\" for your tables using the `modelsummary_theme_gt`, `modelsummary_theme_kableExtra`, `modelsummary_theme_flextable` and `modelsummary_theme_huxtable` global options. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt)\n\n## The ... ellipsis is required!\ncustom_theme &lt;- function(x, ...) {\n    x %&gt;% gt::opt_row_striping(row_striping = TRUE)\n}\noptions(\"modelsummary_theme_gt\" = custom_theme)\n\nmod &lt;- lm(mpg ~ hp + drat, mtcars)\nmodelsummary(mod, output = \"gt\")\n```\n:::\n\n## Case studies\n\n### Subgroup estimation with `nest_by`\n\nSometimes, it is useful to estimate multiple regression models on subsets of the data. To do this efficiently, we can use the `nest_by` function from the `dplyr` package. Then, estimate the models with `lm`, extract them and name them with `pull`, and finally summarize them with `modelsummary`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmtcars %&gt;%\n    nest_by(cyl) %&gt;%\n    mutate(models = list(lm(mpg ~ hp, data))) %&gt;%\n    pull(models, name = cyl) %&gt;%\n    modelsummary\n```\n\n::: {.cell-output-display}\n\n```{=html}\n&lt;div id=\"zpghtentko\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"&gt;\n&lt;style&gt;#zpghtentko table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#zpghtentko thead, #zpghtentko tbody, #zpghtentko tfoot, #zpghtentko tr, #zpghtentko td, #zpghtentko th {\n  border-style: none;\n}\n\n#zpghtentko p {\n  margin: 0;\n  padding: 0;\n}\n\n#zpghtentko .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#zpghtentko .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#zpghtentko .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#zpghtentko .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#zpghtentko .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zpghtentko .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zpghtentko .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zpghtentko .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#zpghtentko .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#zpghtentko .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#zpghtentko .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#zpghtentko .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#zpghtentko .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#zpghtentko .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#zpghtentko .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#zpghtentko .gt_from_md &gt; :first-child {\n  margin-top: 0;\n}\n\n#zpghtentko .gt_from_md &gt; :last-child {\n  margin-bottom: 0;\n}\n\n#zpghtentko .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#zpghtentko .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zpghtentko .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#zpghtentko .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#zpghtentko .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#zpghtentko .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zpghtentko .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#zpghtentko .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#zpghtentko .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zpghtentko .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zpghtentko .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#zpghtentko .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zpghtentko .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#zpghtentko .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zpghtentko .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zpghtentko .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zpghtentko .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zpghtentko .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zpghtentko .gt_left {\n  text-align: left;\n}\n\n#zpghtentko .gt_center {\n  text-align: center;\n}\n\n#zpghtentko .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#zpghtentko .gt_font_normal {\n  font-weight: normal;\n}\n\n#zpghtentko .gt_font_bold {\n  font-weight: bold;\n}\n\n#zpghtentko .gt_font_italic {\n  font-style: italic;\n}\n\n#zpghtentko .gt_super {\n  font-size: 65%;\n}\n\n#zpghtentko .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#zpghtentko .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#zpghtentko .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#zpghtentko .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#zpghtentko .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#zpghtentko .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#zpghtentko .gt_indent_5 {\n  text-indent: 25px;\n}\n&lt;/style&gt;\n&lt;table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"&gt;\n  &lt;thead&gt;\n    \n    &lt;tr class=\"gt_col_headings\"&gt;\n      &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\" \"&gt; &lt;/th&gt;\n      &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"4\"&gt;4&lt;/th&gt;\n      &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"6\"&gt;6&lt;/th&gt;\n      &lt;th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"8\"&gt;8&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody class=\"gt_table_body\"&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;(Intercept)&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;35.983&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;20.674&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;18.080&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;(5.201)&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;(3.304)&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;(2.988)&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;hp&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;-0.113&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;-0.008&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;-0.014&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\" style=\"border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #000000;\"&gt;&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\" style=\"border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #000000;\"&gt;(0.061)&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\" style=\"border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #000000;\"&gt;(0.027)&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\" style=\"border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #000000;\"&gt;(0.014)&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;Num.Obs.&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;11&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;7&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;14&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;R2&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;0.274&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;0.016&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;0.080&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;R2 Adj.&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;0.193&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;-0.181&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;0.004&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;AIC&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;65.8&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;29.9&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;69.8&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;BIC&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;67.0&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;29.7&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;71.8&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;Log.Lik.&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;-29.891&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;-11.954&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;-31.920&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td headers=\"\" class=\"gt_row gt_left\"&gt;RMSE&lt;/td&gt;\n&lt;td headers=\"4\" class=\"gt_row gt_center\"&gt;3.66&lt;/td&gt;\n&lt;td headers=\"6\" class=\"gt_row gt_center\"&gt;1.33&lt;/td&gt;\n&lt;td headers=\"8\" class=\"gt_row gt_center\"&gt;2.37&lt;/td&gt;&lt;/tr&gt;\n  &lt;/tbody&gt;\n  \n  \n&lt;/table&gt;\n&lt;/div&gt;\n```\n\n:::\n:::\n\n### Statistics in separate columns instead of one over the other\n\nIn somes cases, you may want to display statistics in separate columns instead of one over the other. It is easy to achieve this outcome by using the `estimate` argument. This argument accepts a vector of values, one for each of the models we are trying to summarize. If we want to include estimates and standard errors in separate columns, all we need to do is repeat a model, but request different statistics. For example,\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modelsummary)\nlibrary(kableExtra)\n\nmod1 &lt;- lm(mpg ~ hp, mtcars)\nmod2 &lt;- lm(mpg ~ hp + drat, mtcars)\n\nmodels &lt;- list(\n    \"Coef.\"     = mod1,\n    \"Std.Error\" = mod1,\n    \"Coef.\"     = mod2,\n    \"Std.Error\" = mod2)\n\nmodelsummary(models,\n             estimate = c(\"estimate\", \"std.error\", \"estimate\", \"std.error\"),\n             statistic = NULL,\n             gof_omit = \".*\",\n             output = \"kableExtra\") %&gt;%\n    add_header_above(c(\" \" = 1, \"Model A\" = 2, \"Model B\" = 2))\n```\n\n::: {.cell-output-display}\n\n`````{=html}\n&lt;table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\"&gt;\n &lt;thead&gt;\n&lt;tr&gt;\n&lt;th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"&gt;&lt;/th&gt;\n&lt;th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"&gt;&lt;div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \"&gt;Model A&lt;/div&gt;&lt;/th&gt;\n&lt;th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"&gt;&lt;div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \"&gt;Model B&lt;/div&gt;&lt;/th&gt;\n&lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;th style=\"text-align:left;\"&gt;   &lt;/th&gt;\n   &lt;th style=\"text-align:center;\"&gt; Coef. &lt;/th&gt;\n   &lt;th style=\"text-align:center;\"&gt; Std.Error &lt;/th&gt;\n   &lt;th style=\"text-align:center;\"&gt; Coef.  &lt;/th&gt;\n   &lt;th style=\"text-align:center;\"&gt; Std.Error  &lt;/th&gt;\n  &lt;/tr&gt;\n &lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; (Intercept) &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 30.099 &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 1.634 &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 10.790 &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 5.078 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; hp &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; −0.068 &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 0.010 &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; −0.052 &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 0.009 &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n   &lt;td style=\"text-align:left;\"&gt; drat &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt;  &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt;  &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 4.698 &lt;/td&gt;\n   &lt;td style=\"text-align:center;\"&gt; 1.192 &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n\n:::\nThis can be automated using a simple function:\n\nside_by_side &lt;- function(models, estimates, ...) {\n    models &lt;- rep(models, each = length(estimates))\n    estimates &lt;- rep(estimates, times = 2)\n    names(models) &lt;- names(estimates)\n    modelsummary(models = models, estimate = estimates,\n                 statistic = NULL, gof_omit = \".*\", ...)\n}\n\nmodels = list(\n    lm(mpg ~ hp, mtcars),\n    lm(mpg ~ hp + drat, mtcars))\n\nestimates &lt;- c(\"Coef.\" = \"estimate\", \"Std.Error\" = \"std.error\")\n\nside_by_side(models, estimates = estimates)\n\n\n\n\n  \n    \n    \n       \n      Coef.\n      Std.Error\n      Coef. \n      Std.Error \n    \n  \n  \n    (Intercept)\n30.099\n1.634\n10.790\n5.078\n    hp\n-0.068\n0.010\n-0.052\n0.009\n    drat\n\n\n4.698\n1.192\n  \n  \n  \n\n\n\n\n\n\nBootstrap\nUsers often want to use estimates or standard errors that have been obtained using a custom strategy. To achieve this in an automated and replicable way, it can be useful to use the tidy_custom strategy described above in the “Cutomizing Existing Models” section.\nFor example, we can use the modelr package to draw 500 resamples of a dataset, and compute bootstrap standard errors by taking the standard deviation of estimates computed in all of those resampled datasets. To do this, we defined tidy_custom.lm function that will automatically bootstrap any lm model supplied to modelsummary, and replace the values in the table automatically.\nNote that the tidy_custom_lm returns a data.frame with 3 columns: term, estimate, and std.error:\n\nlibrary(\"modelsummary\")\nlibrary(\"broom\")\nlibrary(\"tidyverse\")\nlibrary(\"modelr\")\n\ntidy_custom.lm &lt;- function(x, ...) {\n  # extract data from the model\n  model.frame(x) %&gt;%\n    # draw 500 bootstrap resamples\n    modelr::bootstrap(n = 500) %&gt;%\n    # estimate the model 500 times\n    mutate(results = map(strap, ~ update(x, data = .))) %&gt;%\n    # extract results using `broom::tidy`\n    mutate(results = map(results, tidy)) %&gt;%\n    # unnest and summarize\n    unnest(results) %&gt;%\n    group_by(term) %&gt;%\n    summarize(std.error = sd(estimate),\n              estimate = mean(estimate))\n}\n\nmod = list(\n  lm(hp ~ mpg, mtcars) ,\n  lm(hp ~ mpg + drat, mtcars))\n\nmodelsummary(mod)\n\n\n\n\n  \n    \n    \n       \n      (1)\n      (2)\n    \n  \n  \n    (Intercept)\n326.800\n283.447\n    \n(30.453)\n(44.214)\n    mpg\n-8.985\n-10.014\n    \n(1.381)\n(2.367)\n    drat\n\n17.566\n    \n\n(21.597)\n    Num.Obs.\n32\n32\n    R2\n0.602\n0.614\n    R2 Adj.\n0.589\n0.588\n    AIC\n336.9\n337.9\n    BIC\n341.3\n343.7\n    Log.Lik.\n-165.428\n-164.940\n    F\n45.460\n23.100\n    RMSE\n42.55\n41.91\n  \n  \n  \n\n\n\n\n\n\nfixest: Fixed effects and instrumental variable regression\nOne common use-case for glance_custom is to include additional goodness-of-fit statistics. For example, in an instrumental variable estimation computed by the fixest package, we may want to include an IV-Wald statistic for the first-stage regression of each endogenous regressor:\n\nlibrary(fixest)\nlibrary(tidyverse)\n\n## create a toy dataset\nbase &lt;- iris\nnames(base) &lt;- c(\"y\", \"x1\", \"x_endo_1\", \"x_inst_1\", \"fe\")\nbase$x_inst_2 &lt;- 0.2 * base$y + 0.2 * base$x_endo_1 + rnorm(150, sd = 0.5)\nbase$x_endo_2 &lt;- 0.2 * base$y - 0.2 * base$x_inst_1 + rnorm(150, sd = 0.5)\n\n## estimate an instrumental variable model\nmod &lt;- feols(y ~ x1 | fe | x_endo_1 + x_endo_2 ~ x_inst_1 + x_inst_2, base)\n\n## custom extractor function returns a one-row data.frame (or tibble)\nglance_custom.fixest &lt;- function(x) {\n  tibble(\n    \"Wald (x_endo_1)\" = fitstat(x, \"ivwald\")[[1]]$stat,\n    \"Wald (x_endo_2)\" = fitstat(x, \"ivwald\")[[2]]$stat\n  )\n}\n\n## draw table\nmodelsummary(mod)\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    fit_x_endo_1\n0.532\n    \n(0.070)\n    fit_x_endo_2\n1.114\n    \n(1.006)\n    x1\n0.563\n    \n(0.039)\n    Num.Obs.\n150\n    R2\n0.446\n    R2 Adj.\n0.426\n    R2 Within\n-0.454\n    R2 Within Adj.\n-0.484\n    AIC\n291.6\n    BIC\n309.6\n    RMSE\n0.61\n    Std.Errors\nby: fe\n    FE: fe\nX\n    Wald (x_endo_1)\n79.5741050360215\n    Wald (x_endo_2)\n0.412576904642454\n  \n  \n  \n\n\n\n\n\nrm(\"glance_custom.fixest\")\n\n\n\nMultiple imputation\nmodelsummary can pool and display analyses on several datasets imputed using the mice or Amelia packages. This code illustrates how:\n\nlibrary(mice)\nlibrary(Amelia)\nlibrary(modelsummary)\n\n## Download data from `Rdatasets`\nurl &lt;- 'https://vincentarelbundock.github.io/Rdatasets/csv/HistData/Guerry.csv'\ndat &lt;- read.csv(url)[, c('Clergy', 'Commerce', 'Literacy')]\n\n## Insert missing values\ndat$Clergy[sample(1:nrow(dat), 10)] &lt;- NA\ndat$Commerce[sample(1:nrow(dat), 10)] &lt;- NA\ndat$Literacy[sample(1:nrow(dat), 10)] &lt;- NA\n\n## Impute with `mice` and `Amelia`\ndat_mice &lt;- mice(dat, m = 5, printFlag = FALSE)\ndat_amelia &lt;- amelia(dat, m = 5, p2s = 0)$imputations\n\n## Estimate models\nmod &lt;- list()\nmod[['Listwise deletion']] &lt;- lm(Clergy ~ Literacy + Commerce, dat)\nmod[['Mice']] &lt;- with(dat_mice, lm(Clergy ~ Literacy + Commerce)) \nmod[['Amelia']] &lt;- lapply(dat_amelia, function(x) lm(Clergy ~ Literacy + Commerce, x))\n\n## Pool results\nmod[['Mice']] &lt;- mice::pool(mod[['Mice']])\nmod[['Amelia']] &lt;- mice::pool(mod[['Amelia']])\n\n## Summarize\nmodelsummary(mod)\n\n\n\n\n  \n    \n    \n       \n      Listwise deletion\n      Mice\n      Amelia\n    \n  \n  \n    (Intercept)\n88.824\n74.503\n86.221\n    \n(12.236)\n(17.145)\n(13.622)\n    Literacy\n-0.700\n-0.413\n-0.572\n    \n(0.197)\n(0.261)\n(0.203)\n    Commerce\n-0.443\n-0.334\n-0.468\n    \n(0.132)\n(0.160)\n(0.152)\n    Num.Obs.\n61\n86\n86\n    Num.Imp.\n\n5\n5\n    R2\n0.211\n0.092\n0.167\n    R2 Adj.\n0.184\n0.069\n0.146\n    AIC\n553.3\n\n\n    BIC\n561.8\n\n\n    Log.Lik.\n-272.672\n\n\n    RMSE\n21.14"
  },
  {
    "objectID": "vignettes/modelsummary.html#table-making-packages",
    "href": "vignettes/modelsummary.html#table-making-packages",
    "title": "Model Summaries",
    "section": "Table-making packages",
    "text": "Table-making packages\nThe table-making backends supported by modelsummary have overlapping capabilities (e.g., several of them can produce HTML tables). These are the default packages used for different outputs:\nkableExtra:\n\nHTML\nLaTeX / PDF\n\nflextable:\n\nWord\nPowerpoint\n\ngt:\n\njpg\npng\n\nYou can modify these defaults by setting global options such as:\noptions(modelsummary_factory_html = \"kableExtra\")\noptions(modelsummary_factory_latex = \"gt\")\noptions(modelsummary_factory_word = \"huxtable\")\noptions(modelsummary_factory_png = \"gt\")"
  },
  {
    "objectID": "vignettes/modelsummary.html#faq",
    "href": "vignettes/modelsummary.html#faq",
    "title": "Model Summaries",
    "section": "FAQ",
    "text": "FAQ\n\nStack Overflow is useful\n\nStandardized coefficients\nRow group labels\nCustomizing Word tables\nHow to add p values to datasummary_correlation\n\n\n\nWhere can I get help?\nFirst, please read the documentation in ?modelsummary and on the modelsummary website. The website includes dozens of worked examples and a lot of detailed explanation.\nSecond, try to use the [modelsummary] tag on StackOverflow.\nThird, if you think you found a bug or have a feature request, please file it on the Github issue tracker:\n\n\nHow can I add or modify statistics in a table?\nSee the detailed documentation in the “Adding and Customizing Models” section of the modelsummary website.\n\n\nHow does modelsummary extract estimates and goodness-of-fit statistics?\nA modelsummary table is divided in two parts: “Estimates” (top of the table) and “Goodness-of-fit” (bottom of the table). To populate those two parts, modelsummary tries using the broom, parameters and performance packages in sequence.\nEstimates:\n\nTry the broom::tidy function to see if that package supports this model type, or if the user defined a custom tidy function in their global environment. If this fails…\nTry the parameters::model_parameters function to see if the parameters package supports this model type.\n\nGoodness-of-fit:\n\nTry the performance::model_performance function to see if the performance package supports this model type.\nTry the broom::glance function to see if that package supports this model type, or if the user defined a custom glance function in their global environment. If this fails…\n\nYou can change the order in which those steps are executed by setting a global option:\n\n## tidymodels: broom \noptions(modelsummary_get = \"broom\")\n\n## easystats: performance + parameters\noptions(modelsummary_get = \"easystats\")\n\nIf all of this fails, modelsummary will return an error message.\nIf you have problems with a model object, you can often diagnose the problem by running the following commands from a clean R session:\n## see if parameters and performance support your model type\nlibrary(parameters)\nlibrary(performance)\nmodel_parameters(model)\nmodel_performance(model)\n\n## see if broom supports your model type\nlibrary(broom)\ntidy(model)\nglance(model)\n\n## see if broom.mixed supports your model type\nlibrary(broom.mixed)\ntidy(model)\nglance(model)\nIf none of these options work, you can create your own tidy and glance methods, as described in the Adding new models section.\nIf one of the extractor functions does not work well or takes too long to process, you can define a new “custom” model class and choose your own extractors, as described in the Adding new models section.\n\n\nHow can I speed up modelsummary?\nThe modelsummary function, by itself, is not slow: it should only take a couple seconds to produce a table in any output format. However, sometimes it can be computationally expensive (and long) to extract estimates and to compute goodness-of-fit statistics for your model.\nThe main options to speed up modelsummary are:\n\nSet gof_map=NA to avoid computing expensive goodness-of-fit statistics.\nUse the easystats extractor functions and the metrics argument to avoid computing expensive statistics (see below for an example).\nUse parallel computation if you are summarizing multiple models. See the “Parallel computation” section in the ?modelsummary documentation.\n\nTo diagnose the slowdown and find the bottleneck, you can try to benchmark the various extractor functions:\n\nlibrary(tictoc)\n\ndata(trade)\nmod &lt;- lm(mpg ~ hp + drat, mtcars)\n\ntic(\"tidy\")\nx &lt;- broom::tidy(mod)\ntoc()\n\ntidy: 0.002 sec elapsed\n\ntic(\"glance\")\nx &lt;- broom::glance(mod)\ntoc()\n\nglance: 0.002 sec elapsed\n\ntic(\"parameters\")\nx &lt;- parameters::parameters(mod)\ntoc()\n\nparameters: 0.019 sec elapsed\n\ntic(\"performance\")\nx &lt;- performance::performance(mod)\ntoc()\n\nperformance: 0.006 sec elapsed\n\n\nIn my experience, the main bottleneck tends to be computing goodness-of-fit statistics. The performance extractor allows users to specify a metrics argument to select a subset of GOF to include. Using this can speedup things considerably.\nWe call modelsummary with the metrics argument:\n\nmodelsummary(mod, metrics = \"rmse\")\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    (Intercept)\n10.790\n    \n(5.078)\n    hp\n-0.052\n    \n(0.009)\n    drat\n4.698\n    \n(1.192)\n    Num.Obs.\n32\n    R2\n0.741\n    R2 Adj.\n0.723\n    AIC\n169.5\n    BIC\n175.4\n    Log.Lik.\n-80.752\n    F\n41.522\n  \n  \n  \n\n\n\n\n\n\nEscaped LaTeX characters\nSometimes, users want to include raw LaTeX commands in their tables, such as coefficient names including math mode: Apple $\\times$ Orange. The result of these attempts is often a weird string such as: \\$\\textbackslash{}times\\$ instead of proper LaTeX-rendered characters.\nThe source of the problem is that kableExtra, default table-making package in modelsummary, automatically escapes weird characters to make sure that your tables compile properly in LaTeX. To avoid this, we need to pass the escape=FALSE to modelsummary:\n\nmodelsummary(mod, escape = FALSE)\n\n\n\nBayesian models\nMany bayesian models are supported out-of-the-box, including those produced by the rstanarm and brms packages. The statistics available for bayesian models are slightly different than those available for most frequentist models. Users can call get_estimates to see what is available:\n\nlibrary(rstanarm)\n\nThis is rstanarm version 2.26.1\n\n\n- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!\n\n\n- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.\n\n\n- For execution on a local, multicore CPU with excess RAM we recommend calling\n\n\n  options(mc.cores = parallel::detectCores())\n\n\n\nAttaching package: 'rstanarm'\n\n\nThe following object is masked from 'package:fixest':\n\n    se\n\nmod &lt;- stan_glm(am ~ hp + drat, data = mtcars)\n\n\nget_estimates(mod)\n\n         term      estimate         mad conf.level     conf.low    conf.high\n1 (Intercept) -2.2514190222 0.579751509       0.95 -3.338994165 -1.058901900\n2          hp  0.0007124019 0.001046723       0.95 -0.001491624  0.002864724\n3        drat  0.7096793552 0.136494977       0.95  0.424006433  0.965220507\n  prior.distribution prior.location prior.scale group std.error statistic\n1             normal        0.40625  1.24747729              NA        NA\n2             normal        0.00000  0.01819465              NA        NA\n3             normal        0.00000  2.33313429              NA        NA\n  p.value\n1      NA\n2      NA\n3      NA\n\n\nThis shows that there is no std.error column, but that there is a mad statistic (mean absolute deviation). So we can do:\n\nmodelsummary(mod, statistic = \"mad\")\n\nWarning: \n`modelsummary` uses the `performance` package to extract goodness-of-fit\nstatistics from models of this class. You can specify the statistics you wish\nto compute by supplying a `metrics` argument to `modelsummary`, which will then\npush it forward to `performance`. Acceptable values are: \"all\", \"common\",\n\"none\", or a character vector of metrics names. For example: `modelsummary(mod,\nmetrics = c(\"RMSE\", \"R2\")` Note that some metrics are computationally\nexpensive. See `?performance::performance` for details.\n This warning appears once per session.\n\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    (Intercept)\n-2.251\n    \n(0.580)\n    hp\n0.001\n    \n(0.001)\n    drat\n0.710\n    \n(0.136)\n    Num.Obs.\n32\n    R2\n0.501\n    R2 Adj.\n0.429\n    Log.Lik.\n-12.021\n    ELPD\n-15.1\n    ELPD s.e.\n3.1\n    LOOIC\n30.2\n    LOOIC s.e.\n6.3\n    WAIC\n30.0\n    RMSE\n0.34\n  \n  \n  \n\n\n\n\nAs noted in the modelsummary() documentation, model results are extracted using the parameters package. Users can pass additional arguments to modelsummary(), which will then push forward those arguments to the parameters::parameters function to change the results. For example, the parameters documentation for bayesian models shows that there is a centrality argument, which allows users to report the mean and standard deviation of the posterior distribution, instead of the median and MAD:\n\nget_estimates(mod, centrality = \"mean\")\n\n         term      estimate     std.dev conf.level     conf.low    conf.high\n1 (Intercept) -2.2288335962 0.588310636       0.95 -3.338994165 -1.058901900\n2          hp  0.0006982008 0.001095271       0.95 -0.001491624  0.002864724\n3        drat  0.7038856362 0.137768291       0.95  0.424006433  0.965220507\n  prior.distribution prior.location prior.scale group std.error statistic\n1             normal        0.40625  1.24747729              NA        NA\n2             normal        0.00000  0.01819465              NA        NA\n3             normal        0.00000  2.33313429              NA        NA\n  p.value\n1      NA\n2      NA\n3      NA\n\nmodelsummary(mod, statistic = \"std.dev\", centrality = \"mean\")\n\n\n\n\n  \n    \n    \n       \n      (1)\n    \n  \n  \n    (Intercept)\n-2.229\n    \n(0.588)\n    hp\n0.001\n    \n(0.001)\n    drat\n0.704\n    \n(0.138)\n    Num.Obs.\n32\n    R2\n0.501\n    R2 Adj.\n0.429\n    Log.Lik.\n-12.021\n    ELPD\n-15.1\n    ELPD s.e.\n3.1\n    LOOIC\n30.2\n    LOOIC s.e.\n6.3\n    WAIC\n30.0\n    RMSE\n0.34\n  \n  \n  \n\n\n\n\nWe can also get additional test statistics using the test argument:\n\nget_estimates(mod, test = c(\"pd\", \"rope\"))\n\n         term      estimate         mad conf.level     conf.low    conf.high\n1 (Intercept) -2.2514190222 0.579751509       0.95 -3.338994165 -1.058901900\n2          hp  0.0007124019 0.001046723       0.95 -0.001491624  0.002864724\n3        drat  0.7096793552 0.136494977       0.95  0.424006433  0.965220507\n       pd rope.percentage prior.distribution prior.location prior.scale group\n1 1.00000               0             normal        0.40625  1.24747729      \n2 0.74775               1             normal        0.00000  0.01819465      \n3 1.00000               0             normal        0.00000  2.33313429      \n  std.error statistic p.value\n1        NA        NA      NA\n2        NA        NA      NA\n3        NA        NA      NA"
  },
  {
    "objectID": "vignettes/modelplot.html#rename-reorder-subset",
    "href": "vignettes/modelplot.html#rename-reorder-subset",
    "title": "Model Plots",
    "section": "Rename, reorder, subset",
    "text": "Rename, reorder, subset\nmodelplot uses the same mechanics as modelsummary to rename, reorder, and subset estimates. First, you can use the coef_omit argument. This will omit any coefficient that matches a string or regular expression. To omit the intercept, for example, we can type:\n\nmodelplot(mod, coef_omit = 'Interc')\n\n\n\n\nSecond, you can use the coef_map argument. coef_map is a named character vector, where names correspond to the original term names, and values correspond the names you want to assign. Any variable that is not included in coef_map will be excluded. Variables will also be drawn in the same order as in coef_map:\n\ncm &lt;- c('speciesChinstrap' = 'Chinstrap',\n        'speciesGentoo' = 'Gentoo', \n        'flipper_length_cm' = 'Flipper length (cm)')\n\nmodelplot(mod, coef_map = cm)"
  },
  {
    "objectID": "vignettes/modelplot.html#several-models",
    "href": "vignettes/modelplot.html#several-models",
    "title": "Model Plots",
    "section": "Several models",
    "text": "Several models\nThe main modelsummary functions allows you to create a table with the results of several models side-by-side, by storing them in a (potentially named) list:\n\nmodels &lt;- list(\n  \"Small model\" = lm(bill_length_cm ~ flipper_length_cm, data = dat),\n  \"Medium model\" = lm(bill_length_cm ~ flipper_length_cm + body_mass_g, data = dat),\n  \"Large model\" = lm(bill_length_cm ~ flipper_length_cm + body_mass_g + species, data = dat))\n\nmodelsummary(models, statistic = 'conf.int')\n\n\n\n\n\nSmall model\nMedium model\nLarge model\n\n\n\n\n(Intercept)\n−0.726\n−0.344\n0.984\n\n\n\n[−1.356, −0.097]\n[−1.245, 0.557]\n[0.215, 1.752]\n\n\nflipper_length_cm\n0.255\n0.222\n0.095\n\n\n\n[0.224, 0.286]\n[0.158, 0.285]\n[0.048, 0.142]\n\n\nbody_mass_g\n\n0.000\n0.000\n\n\n\n\n[0.000, 0.000]\n[0.000, 0.000]\n\n\nspeciesChinstrap\n\n\n0.939\n\n\n\n\n\n[0.867, 1.011]\n\n\nspeciesGentoo\n\n\n0.207\n\n\n\n\n\n[0.088, 0.326]\n\n\nNum.Obs.\n342\n342\n342\n\n\nR2\n0.431\n0.433\n0.817\n\n\nR2 Adj.\n0.429\n0.430\n0.815\n\n\nAIC\n369.0\n369.6\n−12.6\n\n\nBIC\n380.5\n385.0\n10.4\n\n\nLog.Lik.\n−181.499\n−180.813\n12.313\n\n\nF\n257.092\n129.365\n375.333\n\n\nRMSE\n0.41\n0.41\n0.23\n\n\n\n\n\n\n\nmodelplot works the same way:\n\nmodelplot(models, coef_omit = 'Interc')\n\n\n\n\nInstead of displaying results with “dodged” side-by-side lines, you can also use facet:\n\nmodelplot(models, facet = TRUE)"
  },
  {
    "objectID": "vignettes/modelplot.html#customizing-plots",
    "href": "vignettes/modelplot.html#customizing-plots",
    "title": "Model Plots",
    "section": "Customizing plots",
    "text": "Customizing plots\nThe graphs produced by modelplot are simple ggplot2 objects. You can thus post-process them using the normal suite of functions available for all objects of this type. Here, we change the axis labels, add a title and a caption, and use a color scheme inspired by Wes Anderson’s Darjeeling Limited:\n\nlibrary(wesanderson)\nlibrary(ggplot2)\n\nmodelplot(models) +\n    labs(x = 'Coefficients', \n         y = 'Term names',\n         title = 'Linear regression models of \"Bill Length (cm)\"',\n         caption = \"Data source: Gorman, Williams & Fraser (2014), packaged for R by @apreshill and @allison_horst\") +\n    scale_color_manual(values = wes_palette('Darjeeling1'))\n\n\n\n\nIn ggplot2, some visual choices must be made when calling the “geom”, rather than with post-processing functions. For instance, the size, color, fatten, linetype arguments must all be specified inside the geom_pointrange function for them to take effect. modelplot will pass any unknown argument to geom_pointrange, so users can simply call:\n\nmodelplot(mod, size = 1, fatten = .7, color = 'darkgreen', linetype = 'dotted') + \n    theme_classic()\n\n\n\n\n\nConditional colors and shape\nNote: This section requires a version of modelsummary greater than 1.2.0 or the development version.\nIn a very nice Stack Overflow answer, Allan Cameron shows how we can use the aes() function from ggplot2 to add conditional aesthetics. For example, if we want to display statistically significant coefficients in a different color:\n\n##| fig.asp = .3\nlibrary(ggplot2)\nmod &lt;- lm(hp ~ factor(gear) + factor(cyl), data = mtcars)\n\nmodelplot(mod, coef_rename = TRUE) +\n  aes(color = ifelse(p.value &lt; 0.001, \"Significant\", \"Not significant\")) +\n  scale_color_manual(values = c(\"grey\", \"black\"))\n\n\n\n\n\n\nExample: Using facets to compare models\nCustomizing plots with ggplot2 makes modelplot very flexible. For example, imagine you want to compare the coefficients of three models with different dependent variables. First, we load the packages and estimate our models:\n\nlibrary(ggplot2)\nlibrary(modelsummary)\n\nmodels &lt;- list(\n  lm(vs ~ carb + mpg + cyl, data = mtcars),\n  lm(disp ~ carb + mpg + cyl, data = mtcars),\n  lm(hp ~ carb + mpg + cyl, data = mtcars))\n\nThen, we use the dvnames function to rename our list with names matching the the dependent variable in each model:\n\nmodels &lt;- dvnames(models)\n\nBy calling modelplot with the draw=FALSE argument, we see the raw data used to draw the plot. Here, we see that there is a model column:\n\nmodelplot(models, draw = FALSE)\n\n          term model     estimate    std.error      conf.low    conf.high\n1  (Intercept)    vs   2.41742511   0.67622094    1.03224931   3.80260091\n5  (Intercept)  disp 112.57276339 114.86315481 -122.71374324 347.85927003\n9  (Intercept)    hp -10.56116383  68.75946117 -151.40853516 130.28620751\n2         carb    vs  -0.06945116   0.03943402   -0.15022810   0.01132577\n6         carb  disp -12.30144724   6.69827859  -26.02224894   1.41935446\n10        carb    hp  17.75593287   4.00972816    9.54237706  25.96948867\n3          mpg    vs  -0.01513960   0.01716410   -0.05029868   0.02001947\n7          mpg  disp  -7.14964651   2.91550156  -13.12178072  -1.17751230\n11         mpg    hp  -1.00486469   1.74527956   -4.57990780   2.57017842\n4          cyl    vs  -0.23926135   0.05687969   -0.35577411  -0.12274859\n8          cyl  disp  47.90105842   9.66160634   28.11015499  67.69196184\n12         cyl    hp  20.60581208   5.78363747    8.75856779  32.45305638\n        p.value\n1  1.296718e-03\n5  3.354494e-01\n9  8.790301e-01\n2  8.912324e-02\n6  7.692105e-02\n10 1.320972e-04\n3  3.852593e-01\n7  2.068858e-02\n11 5.693755e-01\n4  2.410214e-04\n8  3.111898e-05\n12 1.338485e-03\n\n\nFinally, we use the model column as our identifier in ggplot2’s facet_grid command to display models side by side:\n\nmodelplot(models, color = \"black\") + facet_grid(~model)"
  },
  {
    "objectID": "vignettes/modelplot.html#confidence-intervals-change-or-omit",
    "href": "vignettes/modelplot.html#confidence-intervals-change-or-omit",
    "title": "Model Plots",
    "section": "Confidence intervals: change or omit",
    "text": "Confidence intervals: change or omit\nYou can change the \\(\\alpha\\) level of your confidence intervals by changing the conf_level argument:\n\nmodelplot(mod, conf_level = .99)\n\n\n\nmodelplot(mod, conf_level = NULL)"
  },
  {
    "objectID": "vignettes/modelplot.html#background-annotations",
    "href": "vignettes/modelplot.html#background-annotations",
    "title": "Model Plots",
    "section": "Background annotations",
    "text": "Background annotations\nSometimes, you want to display annotations on a plot, but you would like to draw these annotations behind the geom_pointrange which displays the estimates. Since modelplot draws the geom_pointrange automatically, any ggplot2 annotation you add to the plot using + will be added on top of the existing ones.\nTo add your annotations in the background, you can pass them as a list of ggplot2 “geoms”:\n\nlibrary(ggplot2)\n\nb &lt;- list(geom_vline(xintercept = 0, color = 'orange'),\n          annotate(\"rect\", alpha = .1,\n                   xmin = -.5, xmax = .5, \n                   ymin = -Inf, ymax = Inf),\n          geom_point(aes(y = term, x = estimate), alpha = .3, \n                     size = 10, color = 'red'))\n\nmodelplot(mod, background = b)"
  },
  {
    "objectID": "vignettes/modelplot.html#raw-data-more-customization",
    "href": "vignettes/modelplot.html#raw-data-more-customization",
    "title": "Model Plots",
    "section": "Raw data & More customization",
    "text": "Raw data & More customization\nIf you would like to customize the plots even more than what modelplot allows, you can obtain the raw data used to draw the plots by setting draw=FALSE:\n\nmodelplot(models, draw = FALSE)\n\n          term model     estimate    std.error      conf.low    conf.high\n1  (Intercept)    vs   2.41742511   0.67622094    1.03224931   3.80260091\n5  (Intercept)  disp 112.57276339 114.86315481 -122.71374324 347.85927003\n9  (Intercept)    hp -10.56116383  68.75946117 -151.40853516 130.28620751\n2         carb    vs  -0.06945116   0.03943402   -0.15022810   0.01132577\n6         carb  disp -12.30144724   6.69827859  -26.02224894   1.41935446\n10        carb    hp  17.75593287   4.00972816    9.54237706  25.96948867\n3          mpg    vs  -0.01513960   0.01716410   -0.05029868   0.02001947\n7          mpg  disp  -7.14964651   2.91550156  -13.12178072  -1.17751230\n11         mpg    hp  -1.00486469   1.74527956   -4.57990780   2.57017842\n4          cyl    vs  -0.23926135   0.05687969   -0.35577411  -0.12274859\n8          cyl  disp  47.90105842   9.66160634   28.11015499  67.69196184\n12         cyl    hp  20.60581208   5.78363747    8.75856779  32.45305638\n        p.value\n1  1.296718e-03\n5  3.354494e-01\n9  8.790301e-01\n2  8.912324e-02\n6  7.692105e-02\n10 1.320972e-04\n3  3.852593e-01\n7  2.068858e-02\n11 5.693755e-01\n4  2.410214e-04\n8  3.111898e-05\n12 1.338485e-03\n\n\nThis allows users to use external tools such as the powerful ggdist package. In this example, we use the purrr::map_dfr function to call modelplot several times with different confidence levels. Then, we draw a plot where the different confidence intervals are drawn with different thicknesses:\n\nlibrary(tidyverse)\nlibrary(modelsummary)\nlibrary(ggdist)\n\n## fit\nmodels &lt;- list(\n  lm(mpg ~ am, mtcars),\n  lm(mpg ~ am + cyl, mtcars))\n\n## summarize\ndat &lt;- map_dfr(c(.8, .9, .99), function(x) {\n  modelplot(models, conf_level = x, draw = FALSE) %&gt;%\n  mutate(.width = x)\n})\n\n## plot\nggplot(dat, aes(\n    y = term, x = estimate,\n    xmin = conf.low, xmax = conf.high,\n    color = model)) +\n  ggdist::geom_pointinterval(\n    position = \"dodge\",\n    interval_size_range = c(1, 3),\n    fatten_point = .1)"
  },
  {
    "objectID": "vignettes/modelsummary_extension.html#unsupported-models-modelsummary_list",
    "href": "vignettes/modelsummary_extension.html#unsupported-models-modelsummary_list",
    "title": "Extension and Customization",
    "section": "Unsupported models: modelsummary_list",
    "text": "Unsupported models: modelsummary_list\nThe simplest way to summarize an unsupported model is to create a modelsummary_list object. This approach is super flexible, but it requires manual intervention, and it can become tedious if you need to summarize many models. The next section shows how to add formal support for an unsupported model type.\nA modelsummary_list is a list with two element that conform to the broom package specification: tidy and glance. tidy is a data.frame with at least three columns: term, estimate, and std.error. glance is a data.frame with only a single row, and where each column will be displayed at the bottom of the table in the goodness-of-fit section. Finally, we wrap those two elements in a list and assign it a modelsummary_list class:\n\nti &lt;- data.frame(\n  term = c(\"coef1\", \"coef2\", \"coef3\"),\n  estimate = 1:3,\n  std.error = c(pi, exp(1), sqrt(2)))\n\ngl &lt;- data.frame(\n  stat1 = \"blah\",\n  stat2 = \"blah blah\")\n\nmod &lt;- list(\n  tidy = ti,\n  glance = gl)\nclass(mod) &lt;- \"modelsummary_list\"\n\nmodelsummary(mod)\n\n\n\n\n\n (1)\n\n\n\n\ncoef1\n1.000\n\n\n\n(3.142)\n\n\ncoef2\n2.000\n\n\n\n(2.718)\n\n\ncoef3\n3.000\n\n\n\n(1.414)\n\n\nstat1\nblah\n\n\nstat2\nblah blah"
  },
  {
    "objectID": "vignettes/modelsummary_extension.html#unsupported-models-glance-and-tidy",
    "href": "vignettes/modelsummary_extension.html#unsupported-models-glance-and-tidy",
    "title": "Extension and Customization",
    "section": "Unsupported models: glance and tidy",
    "text": "Unsupported models: glance and tidy\nmodelsummary relies on two functions from the broom package to extract model information: tidy and glance. If broom doesn’t support the type of model you are trying to summarize, modelsummary won’t support it out of the box. Thankfully, it is extremely easy to add support for most models using custom methods.\nFor example, models produced by the MCMCglmm package are not currently supported by broom. To add support, you simply need to create a tidy and a glance method:\n# load packages and data\nlibrary(modelsummary)\nlibrary(MCMCglmm)\ndata(PlodiaPO)\n\n# add custom functions to extract estimates (tidy) and goodness-of-fit (glance) information\ntidy.MCMCglmm &lt;- function(x, ...) {\n    s &lt;- summary(x, ...)\n    ret &lt;- data.frame(\n      term      = row.names(s$solutions),\n      estimate  = s$solutions[, 1],\n      conf.low  = s$solutions[, 2],\n      conf.high = s$solutions[, 3])\n    ret\n}\n\nglance.MCMCglmm &lt;- function(x, ...) {\n    ret &lt;- data.frame(\n      dic = x$DIC,\n      n   = nrow(x$X))\n    ret\n}\n\n# estimate a simple model\nmodel &lt;- MCMCglmm(PO ~ 1 + plate, random = ~ FSfamily, data = PlodiaPO, verbose=FALSE, pr=TRUE)\n\n# summarize the model\nmodelsummary(model, statistic = 'conf.int')\nThree important things to note.\nFirst, the methods are named tidy.MCMCglmm and glance.MCMCglmm because the model object I am trying to summarize is of class MCMCglmm. You can find the class of a model by running: class(model).\nSecond, both of the methods include the ellipsis ... argument.\nThird, in the example above we used the statistic = 'conf.int' argument. This is because the tidy method produces conf.low and conf.high columns. In most cases, users will define std.error column in their custom tidy methods, so the statistic argument will need to be adjusted.\nIf you create new tidy and glance methods, please consider contributing them to broom so that the rest of the community can benefit from your work: https://github.com/tidymodels/broom"
  },
  {
    "objectID": "vignettes/modelsummary_extension.html#modifying-information-tidy_custom-and-glance_custom",
    "href": "vignettes/modelsummary_extension.html#modifying-information-tidy_custom-and-glance_custom",
    "title": "Extension and Customization",
    "section": "Modifying information: tidy_custom and glance_custom",
    "text": "Modifying information: tidy_custom and glance_custom\nUsers may want to include more information than is made available by the default extractor function. For example, models produced by the MASS::polr do not produce p values by default, which means that we cannot use the stars=TRUE argument in modelsummary. However, it is possible to extract this information by using the lmtest::coeftest function. To include such custom information, we will define new glance_custom and tidy_custom methods.\nWe begin by estimating a model with the MASS::polr:\n\nlibrary(MASS)\n\nmod_ordinal &lt;- polr(as.ordered(gear) ~ mpg + drat, data = mtcars)\n\nget_estimates(mod_ordinal)\n\n  term     estimate  std.error conf.level   conf.low  conf.high  statistic\n1  3|4 13.962948762 4.04107299       0.95  5.6851860 22.2407115  3.4552578\n2  4|5 16.898937339 4.39497069       0.95  7.8962480 25.9016267  3.8450626\n3  mpg -0.008646679 0.09034201       0.95 -0.1916706  0.1708667 -0.0957105\n4 drat  3.949431922 1.30665144       0.95  1.6191505  6.8457246  3.0225597\n  df.error      p.value component s.value group\n1       28 0.0017706302     alpha     9.1      \n2       28 0.0006356348     alpha    10.6      \n3       28 0.9244322337      beta     0.1      \n4       28 0.0053120619      beta     7.6      \n\n\nThe get_estimates function shows that our default extractor does not produce a p.value column. As a result, setting stars=TRUE in modelsummary will produce an error.\nWe know that the MASS::polr produces an object of class polr:\n\nclass(mod_ordinal)\n\n[1] \"polr\"\n\n\nTo extract more (custom) information from a model of this class, we thus define a method called tidy_custom.polr which returns a data.frame with two columns: term and p.value:\n\ntidy_custom.polr &lt;- function(x, ...) {\n  s &lt;- lmtest::coeftest(x)\n  out &lt;- data.frame(\n    term = row.names(s),\n    p.value = s[, \"Pr(&gt;|t|)\"])\n  out\n}\n\nWhen this method is defined, modelsummary can automatically extract p values from all models of this class, and will now work properly with stars=TRUE:\n\nmodelsummary(mod_ordinal, stars = TRUE)\n\n\n\n\n\n (1)\n\n\n\n\n3|4\n13.963**\n\n\n\n(4.041)\n\n\n4|5\n16.899***\n\n\n\n(4.395)\n\n\nmpg\n−0.009\n\n\n\n(0.090)\n\n\ndrat\n3.949**\n\n\n\n(1.307)\n\n\nNum.Obs.\n32\n\n\nAIC\n51.1\n\n\nBIC\n57.0\n\n\nRMSE\n3.44\n\n\n\n + p &lt; 0.1, * p &lt; 0.05, ** p &lt; 0.01, *** p &lt; 0.001"
  },
  {
    "objectID": "vignettes/modelsummary_extension.html#new-information-tidy_custom-and-glance_custom",
    "href": "vignettes/modelsummary_extension.html#new-information-tidy_custom-and-glance_custom",
    "title": "Extension and Customization",
    "section": "New information: tidy_custom and glance_custom",
    "text": "New information: tidy_custom and glance_custom\nSometimes users will want to include information that is not supplied by those functions. A pretty easy way to include extra information is to define new glance_custom and tidy_custom methods. To illustrate, we estimate two linear regression models using the lm function:\n\nlibrary(modelsummary)\n\nmod &lt;- list()\nmod[[1]] &lt;- lm(hp ~ mpg + drat, mtcars)\nmod[[2]] &lt;- lm(wt ~ mpg + drat + am, mtcars)\n\nIn R, the lm function produces models of class “lm”:\n\nclass(mod[[1]])\n\n[1] \"lm\"\n\n\nLet’s say you would like to print the dependent variable for each model of this particular class. All you need to do is define a new method called glance_custom.lm. This method should return a data.frame (or tibble) with 1 row, and 1 column per piece of information you want to display. For example:\n\nglance_custom.lm &lt;- function(x, ...) {\n    dv &lt;- as.character(formula(x)[2])\n    out &lt;- data.frame(\"DV\" = dv)\n    return(out)\n}\n\nNow, let’s customize the body of the table. The vcov argument already allows users to customize uncertainty estimates. But imagine you want to override the coefficient estimates of your “lm” models. Easy! All you need to do is define a tidy_custom.lm method which returns a data.frame (or tibble) with one column called “term” and one column called “estimate”.\nHere, we’ll substitute estimates by an up/down-pointing triangles which represents their signs:\n\ntidy_custom.lm &lt;- function(x, ...) {\n    s &lt;- summary(x)$coefficients\n    out &lt;- data.frame(\n      term = row.names(s),\n      estimate = ifelse(s[,1] &gt; 0, '▲', '▼'))\n    return(out)\n}\n\nAfter you define the glance_custom and tidy_custom methods, modelsummary will automatically display your customized model information:\n\nmodelsummary(mod)\n\n\n\n\n\n (1)\n  (2)\n\n\n\n\n(Intercept)\n▲\n▲\n\n\n\n(55.415)\n(0.728)\n\n\nmpg\n▼\n▼\n\n\n\n(1.792)\n(0.019)\n\n\ndrat\n▲\n▼\n\n\n\n(20.198)\n(0.245)\n\n\nam\n\n▼\n\n\n\n\n(0.240)\n\n\nNum.Obs.\n32\n32\n\n\nR2\n0.614\n0.803\n\n\nR2 Adj.\n0.588\n0.782\n\n\nAIC\n337.9\n46.4\n\n\nBIC\n343.7\n53.7\n\n\nLog.Lik.\n−164.940\n−18.201\n\n\nF\n23.100\n38.066\n\n\nRMSE\n41.91\n0.43\n\n\nDV\nhp\nwt\n\n\n\n\n\n\n\nNote that you can define a std.error column in tidy_custom.lm to replace the uncertainty estimates instead of the coefficients."
  },
  {
    "objectID": "vignettes/modelsummary_extension.html#customization-new-model-class",
    "href": "vignettes/modelsummary_extension.html#customization-new-model-class",
    "title": "Extension and Customization",
    "section": "Customization: New model class",
    "text": "Customization: New model class\nAn even more fundamental way to customize the output would be to completely bypass modelsummary’s extractor functions by assigning a new class name to your model. For example,\n\n# estimate a linear model\nmod_custom &lt;- lm(hp ~ mpg + drat, mtcars)\n\n# assign it a new class\nclass(mod_custom) &lt;- \"custom\"\n\n# define tidy and glance methods\ntidy.custom &lt;- function(x, ...) {\n  data.frame(\n    term = names(coef(x)),\n    estimate = letters[1:length(coef(x))],\n    std.error = seq_along(coef(x))\n  )\n}\n\nglance.custom &lt;- function(x, ...) {\n  data.frame(\n    \"Model\" = \"Custom\",\n    \"nobs\" = stats:::nobs.lm(x)\n  )\n}\n\n# summarize\nmodelsummary(mod_custom)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\na\n\n\n\n(1.000)\n\n\nmpg\nb\n\n\n\n(2.000)\n\n\ndrat\nc\n\n\n\n(3.000)\n\n\nNum.Obs.\n32\n\n\nModel\nCustom\n\n\n\n\n\n\n\nWarning: When defining new tidy and glance methods, it is important to include an ellipsis argument (...).\nNote that in the glance.custom() method, we called stats:::nobs.lm() instead of the default stats::nobs() method, because the latter know does not know where to dispatch models of our new “custom” class. Being more explicit solves the problem.\nAn alternative would be to set a new class that inherits from the previous one, and to use a global option to set broom as the default extractor function (otherwise modelsummary will use its standard lm extractors by inheritance):\n\noptions(modelsummary_get = \"broom\")\nclass(mod_custom) &lt;- c(\"custom\", \"lm\")"
  },
  {
    "objectID": "vignettes/modelsummary_extension.html#customization-modelsummary_list",
    "href": "vignettes/modelsummary_extension.html#customization-modelsummary_list",
    "title": "Extension and Customization",
    "section": "Customization: modelsummary_list",
    "text": "Customization: modelsummary_list\nAnother flexible way to customize model output is to use output = \"modelsummary_list\". With this output option, modelsummary() returns a list with two elements: tidy contains parameter estimates, standard errors, etc., and glance contains model statistics such as the AIC. For example,\n\nmod &lt;- lm(hp ~ mpg + drat, mtcars)\nmod_list &lt;- modelsummary(mod, output = \"modelsummary_list\")\nmod_list$tidy\n\n         term   estimate std.error  statistic df.error      p.value s.value\n1 (Intercept) 278.515455 55.414866  5.0260061       29 2.359726e-05    15.4\n2         mpg  -9.985499  1.791837 -5.5727709       29 5.172030e-06    17.6\n3        drat  19.125752 20.197756  0.9469246       29 3.515013e-01     1.5\n  group conf.low conf.high\n1             NA        NA\n2             NA        NA\n3             NA        NA\n\nmod_list$glance\n\n       aic      bic r.squared adj.r.squared     rmse nobs        F    logLik\n1 337.8809 343.7438 0.6143611     0.5877653 41.90687   32 23.09994 -164.9404\n\n\nBoth tidy and glance can now be customized, and the updated model can be passed back to modelsummary using modelsummary(mod_list). All information that is displayed in the table is contained in mod_list, so this pattern allows for very flexible adjustments of output tables.\nA useful example for this pattern concerns mixed models using lme4. Assume we want to compare the effect of using different degrees-of-freedom adjustments on the significance of the coefficients. The models have identical parameter estimates, standard errors, and model fit statistics - we only want to change the p-values. We use the parameters package to compute the adjusted p-values.\n\nlibrary(\"lme4\")\nmod &lt;- lmer(mpg ~ drat + (1 | am), data = mtcars)\nmod_list &lt;- modelsummary(mod, output = \"modelsummary_list\", effects = \"fixed\")\n# create a copy, where we'll change the p-values\nmod_list_kenward &lt;- as.list(mod_list)\nmod_list_kenward$tidy$p.value &lt;- parameters::p_value_kenward(mod)$p\n\nmodelsummary(list(\"Wald\" = mod_list, \"Kenward\" = mod_list_kenward), \n            statistic = \"{std.error} ({p.value}) {stars}\")\n\n\n\n\n\nWald\nKenward\n\n\n\n\n(Intercept)\n−5.159\n−5.159\n\n\n\n6.409 (0.428)\n6.409 (0.680)\n\n\ndrat\n7.045\n7.045\n\n\n\n1.736 (&lt;0.001) ***\n1.736 (0.086) +\n\n\nNum.Obs.\n32\n32\n\n\nR2 Marg.\n0.402\n0.402\n\n\nR2 Cond.\n0.440\n0.440\n\n\nAIC\n188.7\n188.7\n\n\nBIC\n194.6\n194.6\n\n\nICC\n0.1\n0.1\n\n\nRMSE\n4.28\n4.28"
  },
  {
    "objectID": "vignettes/appearance.html",
    "href": "vignettes/appearance.html",
    "title": "Themes & Styles",
    "section": "",
    "text": "To customize the appearance of tables, modelsummary supports five of the most popular table-making packages:\n\ngt: https://gt.rstudio.com\nkableExtra: http://haozhu233.github.io/kableExtra\nhuxtable: https://hughjonesd.github.io/huxtable/\nflextable: https://davidgohel.github.io/flextable/\nDT: https://rstudio.github.io/DT\n\nUsers are encouraged to visit these websites to determine which package suits their needs best. Each of them has different strengths and weaknesses. For instance, gt allows seamless integration with the RStudio IDE, but kableExtra’s LaTeX (and PDF) output is far more mature.\nTo create customized tables, the analyst begins by calling modelsummary(models) to create a summary table. Then, she post-processes the table by applying functions from one of the packages listed above. It is often convenient to use the %&gt;% operator to do this.\nTo illustrate, we download data from the Rdatasets repository and we estimate 5 models:"
  },
  {
    "objectID": "man/modelplot.html",
    "href": "man/modelplot.html",
    "title": "modelplot",
    "section": "",
    "text": "Model Summary Plots with Estimates and Confidence Intervals\n\nDescription\nDot-Whisker plot of coefficient estimates with confidence intervals. For more information, see the Details and Examples sections below, and the vignettes on the modelsummary website: https://modelsummary.com/\n\n\nmodelplot Vignette.\n\n\n\n\nUsage\nmodelplot(\n  models,\n  conf_level = 0.95,\n  coef_map = NULL,\n  coef_omit = NULL,\n  coef_rename = NULL,\n  vcov = NULL,\n  exponentiate = FALSE,\n  add_rows = NULL,\n  facet = FALSE,\n  draw = TRUE,\n  background = NULL,\n  ...\n)\n\n\n\nArguments\n\n\n\nmodels\n\n\na model, (named) list of models, or nested list of models.\n\n\nSingle model: modelsummary(model)\n\n\nUnnamed list of models: modelsummary(list(model1, model2))\n\n\nModels are labelled automatically. The default label style can be altered by setting a global option. See below.\n\n\n\n\nNamed list of models: modelsummary(list(“A”=model1, “B”=model2))\n\n\nModels are labelled using the list names.\n\n\n\n\nNested list of models: When using the shape=“rbind” argument, models can be a nested list of models to display \"panels\" or \"stacks\" of regression models. See the shape argument documentation and examples below.\n\n\n\n\n\n\nconf_level\n\n\nnumeric value between 0 and 1. confidence level to use for confidence intervals. Setting this argument to NULL does not extract confidence intervals, which can be faster for some models.\n\n\n\n\ncoef_map\n\n\ncharacter vector. Subset, rename, and reorder coefficients. Coefficients omitted from this vector are omitted from the table. The order of the vector determines the order of the table. coef_map can be a named or an unnamed character vector. If coef_map is a named vector, its values define the labels that must appear in the table, and its names identify the original term names stored in the model object: c(“hp:mpg”=“HPxM/G”). See Examples section below.\n\n\n\n\ncoef_omit\n\n\ninteger vector or regular expression to identify which coefficients to omit (or keep) from the table. Positive integers determine which coefficients to omit. Negative integers determine which coefficients to keep. A regular expression can be used to omit coefficients, and perl-compatible \"negative lookaheads\" can be used to specify which coefficients to keep in the table. Examples:\n\n\nc(2, 3, 5): omits the second, third, and fifth coefficients.\n\n\nc(-2, -3, -5): negative values keep the second, third, and fifth coefficients.\n\n\n“ei”: omit coefficients matching the \"ei\" substring.\n\n\n“^Volume$”: omit the \"Volume\" coefficient.\n\n\n“ei|rc”: omit coefficients matching either the \"ei\" or the \"rc\" substrings.\n\n\n“^(?!Vol)”: keep coefficients starting with \"Vol\" (inverse match using a negative lookahead).\n\n\n“^(?!.*ei)“: keep coefficients matching the”ei\" substring.\n\n\n“^(?!.ei|.pt)”: keep coefficients matching either the \"ei\" or the \"pt\" substrings.\n\n\nSee the Examples section below for complete code.\n\n\n\n\n\n\ncoef_rename\n\n\nlogical, named or unnamed character vector, or function\n\n\nLogical: TRUE renames variables based on the \"label\" attribute of each column. See the Example section below.\n\n\nUnnamed character vector of length equal to the number of coefficients in the final table, after coef_omit is applied.\n\n\nNamed character vector: Values refer to the variable names that will appear in the table. Names refer to the original term names stored in the model object. Ex: c(\"hp:mpg\"=\"hp X mpg\")\n\n\nFunction: Accepts a character vector of the model’s term names and returns a named vector like the one described above. The modelsummary package supplies a coef_rename() function which can do common cleaning tasks: modelsummary(model, coef_rename = coef_rename)\n\n\n\n\n\n\nvcov\n\n\nrobust standard errors and other manual statistics. The vcov argument accepts six types of input (see the ‘Details’ and ‘Examples’ sections below):\n\n\nNULL returns the default uncertainty estimates of the model object\n\n\nstring, vector, or (named) list of strings. \"iid\", \"classical\", and \"constant\" are aliases for NULL, which returns the model’s default uncertainty estimates. The strings \"HC\", \"HC0\", \"HC1\" (alias: \"stata\"), \"HC2\", \"HC3\" (alias: \"robust\"), \"HC4\", \"HC4m\", \"HC5\", \"HAC\", \"NeweyWest\", \"Andrews\", \"panel-corrected\", \"outer-product\", and \"weave\" use variance-covariance matrices computed using functions from the sandwich package, or equivalent method. The behavior of those functions can (and sometimes must) be altered by passing arguments to sandwich directly from modelsummary through the ellipsis (…), but it is safer to define your own custom functions as described in the next bullet.\n\n\nfunction or (named) list of functions which return variance-covariance matrices with row and column names equal to the names of your coefficient estimates (e.g., stats::vcov, sandwich::vcovHC, function(x) vcovPC(x, cluster=“country”)).\n\n\nformula or (named) list of formulas with the cluster variable(s) on the right-hand side (e.g., ~clusterid).\n\n\nnamed list of length(models) variance-covariance matrices with row and column names equal to the names of your coefficient estimates.\n\n\na named list of length(models) vectors with names equal to the names of your coefficient estimates. See ‘Examples’ section below. Warning: since this list of vectors can include arbitrary strings or numbers, modelsummary cannot automatically calculate p values. The stars argument may thus use incorrect significance thresholds when vcov is a list of vectors.\n\n\n\n\n\n\nexponentiate\n\n\nTRUE, FALSE, or logical vector of length equal to the number of models. If TRUE, the estimate, conf.low, and conf.high statistics are exponentiated, and the std.error is transformed to exp(estimate)*std.error.\n\n\n\n\nadd_rows\n\n\na data.frame (or tibble) with the same number of columns as your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the row positions. See Examples section below.\n\n\n\n\nfacet\n\n\nTRUE or FALSE. When the ‘models’ argument includes several model objects, TRUE draws terms in separate facets, and FALSE draws terms side-by-side (dodged).\n\n\n\n\ndraw\n\n\nTRUE returns a ‘ggplot2’ object, FALSE returns the data.frame used to draw the plot.\n\n\n\n\nbackground\n\n\nA list of ‘ggplot2’ geoms to add to the background of the plot. This is especially useful to display annotations \"behind\" the ‘geom_pointrange’ that ‘modelplot’ draws.\n\n\n\n\n…\n\n\nall other arguments are passed through to three functions. See the documentation of these functions for lists of available arguments.\n\n\nparameters::model_parameters extracts parameter estimates. Available arguments depend on model type, but include:\n\n\nstandardize, centrality, dispersion, test, ci_method, prior, diagnostic, rope_range, power, cluster, etc.\n\n\n\n\nperformance::model_performance extracts goodness-of-fit statistics. Available arguments depend on model type, but include:\n\n\nmetrics, estimator, etc.\n\n\n\n\nkableExtra::kbl or gt::gt draw tables, depending on the value of the output argument.\n\n\n\n\n\n\n\nExamples\n\nlibrary(modelsummary)\n\nlibrary(modelsummary)\n\n# single model\nmod &lt;- lm(hp ~ vs + drat, mtcars)\nmodelplot(mod)\n\n\n\n# omit terms with string matches or regexes\nmodelplot(mod, coef_omit = 'Interc')\n\n\n\n# rename, reorder and subset with 'coef_map'\ncm &lt;- c('vs' = 'V-shape engine',\n  'drat' = 'Rear axle ratio')\nmodelplot(mod, coef_map = cm)\n\n\n\n# several models\nmodels &lt;- list()\nmodels[['Small model']] &lt;- lm(hp ~ vs, mtcars)\nmodels[['Medium model']] &lt;- lm(hp ~ vs + factor(cyl), mtcars)\nmodels[['Large model']] &lt;- lm(hp ~ vs + drat + factor(cyl), mtcars)\nmodelplot(models)\n\n\n\n# add_rows: add an empty reference category\n\nmod &lt;- lm(hp ~ factor(cyl), mtcars)\n\nadd_rows = data.frame(\n  term = \"factory(cyl)4\",\n  model = \"(1)\",\n  estimate = NA)\nattr(add_rows, \"position\") = 3\nmodelplot(mod, add_rows = add_rows)\n\n\n\n# customize your plots with 'ggplot2' functions\nlibrary(ggplot2)\n\nmodelplot(models) +\n  scale_color_brewer(type = 'qual') +\n  theme_classic()\n\n\n\n# pass arguments to 'geom_pointrange' through the ... ellipsis\nmodelplot(mod, color = 'red', size = 1, fatten = .5)\n\n\n\n# add geoms to the background, behind geom_pointrange\nb &lt;- list(geom_vline(xintercept = 0, color = 'orange'),\n  annotate(\"rect\", alpha = .1,\n    xmin = -.5, xmax = .5,\n    ymin = -Inf, ymax = Inf),\n  geom_point(aes(y = term, x = estimate), alpha = .3,\n    size = 10, color = 'red', shape = 'square'))\nmodelplot(mod, background = b)\n\n\n\n# logistic regression example\ndf &lt;- as.data.frame(Titanic)\nmod_titanic &lt;- glm(\n  Survived ~ Class + Sex,\n  family = binomial,\n  weight = Freq,\n  data = df\n)\n\n# displaying odds ratio using a log scale\nmodelplot(mod_titanic, exponentiate = TRUE) +\n  scale_x_log10() +\n  xlab(\"Odds Ratios and 95% confidence intervals\")"
  },
  {
    "objectID": "man/modelsummary.html",
    "href": "man/modelsummary.html",
    "title": "modelsummary",
    "section": "",
    "text": "Model Summary Tables\n\nDescription\nCreate beautiful and customizable tables to summarize several statistical models side-by-side. This function supports dozens of statistical models, and it can produce tables in HTML, LaTeX, Word, Markdown, PDF, PowerPoint, Excel, RTF, JPG, or PNG. The appearance of the tables can be customized extensively by specifying the output argument, and by using functions from one of the supported table customization packages: kableExtra, gt, flextable, huxtable, DT. For more information, see the Details and Examples sections below, and the vignettes on the modelsummary website: https://modelsummary.com/\n\n\nThe modelsummary Vignette includes dozens of examples of tables with extensive customizations.\n\n\nThe Appearance Vignette shows how to modify the look of tables.\n\n\n\n\nUsage\nmodelsummary(\n  models,\n  output = \"default\",\n  fmt = 3,\n  estimate = \"estimate\",\n  statistic = \"std.error\",\n  vcov = NULL,\n  conf_level = 0.95,\n  exponentiate = FALSE,\n  stars = FALSE,\n  shape = term + statistic ~ model,\n  coef_map = NULL,\n  coef_omit = NULL,\n  coef_rename = FALSE,\n  gof_map = NULL,\n  gof_omit = NULL,\n  group_map = NULL,\n  add_columns = NULL,\n  add_rows = NULL,\n  align = NULL,\n  notes = NULL,\n  title = NULL,\n  escape = TRUE,\n  ...\n)\n\n\n\nArguments\n\n\n\nmodels\n\n\na model, (named) list of models, or nested list of models.\n\n\nSingle model: modelsummary(model)\n\n\nUnnamed list of models: modelsummary(list(model1, model2))\n\n\nModels are labelled automatically. The default label style can be altered by setting a global option. See below.\n\n\n\n\nNamed list of models: modelsummary(list(“A”=model1, “B”=model2))\n\n\nModels are labelled using the list names.\n\n\n\n\nNested list of models: When using the shape=“rbind” argument, models can be a nested list of models to display \"panels\" or \"stacks\" of regression models. See the shape argument documentation and examples below.\n\n\n\n\n\n\noutput\n\n\nfilename or object type (character string)\n\n\nSupported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg\n\n\nSupported object types: \"default\", \"html\", \"markdown\", \"latex\", \"latex_tabular\", \"data.frame\", \"gt\", \"kableExtra\", \"huxtable\", \"flextable\", \"DT\", \"jupyter\". The \"modelsummary_list\" value produces a lightweight object which can be saved and fed back to the modelsummary function.\n\n\nThe \"default\" output format can be set to \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\nIf the user does not choose a default value, the packages listed above are tried in sequence.\n\n\nSession-specific configuration: options(“modelsummary_factory_default” = “gt”)\n\n\nPersistent configuration: config_modelsummary(output = “markdown”)\n\n\n\n\nWarning: Users should not supply a file name to the output argument if they intend to customize the table with external packages. See the ‘Details’ section.\n\n\nLaTeX compilation requires the booktabs and siunitx packages, but siunitx can be disabled or replaced with global options. See the ‘Details’ section.\n\n\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_decimal(digits = 2, pdigits = 3): Decimal digits for estimate and p values\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_term(“(Intercept)” = 1, “X” = 2): Format terms differently\n\n\nfmt = fmt_statistic(“estimate” = 1, “r.squared” = 6): Format statistics differently.\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\nstring:\n\n\nNote on LaTeX output: To ensure proper typography, all numeric entries are enclosed in the ⁠⁠ command, which requires the siunitx package to be loaded in the LaTeX preamble. This behavior can be altered with global options. See the ‘Details’ section.\n\n\n\n\n\n\nestimate\n\n\na single string or a character vector of length equal to the number of models. Valid entries include any column name of the data.frame produced by get_estimates(model), and strings with curly braces compatible with the glue package format. Examples:\n\n\n“estimate”\n\n\n“{estimate} ({std.error}){stars}”\n\n\n“{estimate} [{conf.low}, {conf.high}]”\n\n\n\n\n\n\nstatistic\n\n\nvector of strings or glue strings which select uncertainty statistics to report vertically below the estimate. NULL omits all uncertainty statistics.\n\n\n\"conf.int\", \"std.error\", \"statistic\", \"p.value\", \"conf.low\", \"conf.high\", . or any column name produced by get_estimates(model)\n\n\nglue package strings with braces, with or without R functions, such as:\n\n\n“{p.value} [{conf.low}, {conf.high}]”\n\n\n“Std.Error: {std.error}”\n\n\n“{exp(estimate) * std.error}”\n\n\n\n\nNumbers are automatically rounded and converted to strings. To apply functions to their numeric values, as in the last glue example, users must set fmt=NULL.\n\n\nParentheses are added automatically unless the string includes glue curly braces {}.\n\n\nSome statistics are not supported for all models. See column names in get_estimates(model), and visit the website to learn how to add custom statistics.\n\n\n\n\n\n\nvcov\n\n\nrobust standard errors and other manual statistics. The vcov argument accepts six types of input (see the ‘Details’ and ‘Examples’ sections below):\n\n\nNULL returns the default uncertainty estimates of the model object\n\n\nstring, vector, or (named) list of strings. \"iid\", \"classical\", and \"constant\" are aliases for NULL, which returns the model’s default uncertainty estimates. The strings \"HC\", \"HC0\", \"HC1\" (alias: \"stata\"), \"HC2\", \"HC3\" (alias: \"robust\"), \"HC4\", \"HC4m\", \"HC5\", \"HAC\", \"NeweyWest\", \"Andrews\", \"panel-corrected\", \"outer-product\", and \"weave\" use variance-covariance matrices computed using functions from the sandwich package, or equivalent method. The behavior of those functions can (and sometimes must) be altered by passing arguments to sandwich directly from modelsummary through the ellipsis (…), but it is safer to define your own custom functions as described in the next bullet.\n\n\nfunction or (named) list of functions which return variance-covariance matrices with row and column names equal to the names of your coefficient estimates (e.g., stats::vcov, sandwich::vcovHC, function(x) vcovPC(x, cluster=“country”)).\n\n\nformula or (named) list of formulas with the cluster variable(s) on the right-hand side (e.g., ~clusterid).\n\n\nnamed list of length(models) variance-covariance matrices with row and column names equal to the names of your coefficient estimates.\n\n\na named list of length(models) vectors with names equal to the names of your coefficient estimates. See ‘Examples’ section below. Warning: since this list of vectors can include arbitrary strings or numbers, modelsummary cannot automatically calculate p values. The stars argument may thus use incorrect significance thresholds when vcov is a list of vectors.\n\n\n\n\n\n\nconf_level\n\n\nnumeric value between 0 and 1. confidence level to use for confidence intervals. Setting this argument to NULL does not extract confidence intervals, which can be faster for some models.\n\n\n\n\nexponentiate\n\n\nTRUE, FALSE, or logical vector of length equal to the number of models. If TRUE, the estimate, conf.low, and conf.high statistics are exponentiated, and the std.error is transformed to exp(estimate)*std.error.\n\n\n\n\nstars\n\n\nto indicate statistical significance\n\n\nFALSE (default): no significance stars.\n\n\nTRUE: +=.1, =.05, =.01, =0.001\n\n\nNamed numeric vector for custom stars such as c(’*’ = .1, ‘+’ = .05)\n\n\nNote: a legend will not be inserted at the bottom of the table when the estimate or statistic arguments use \"glue strings\" with {stars}.\n\n\n\n\n\n\nshape\n\n\nNULL, formula, or string which determines the shape of a table.\n\n\nNULL: Default shape with terms in rows and models in columns.\n\n\nFormula: The left side determines what appears on rows, and the right side determines what appears on columns. The formula can include one or more group identifier(s) to display related terms together, which can be useful for models with multivariate outcomes or grouped coefficients (See examples section below). The group identifier(s) must be column names produced by: get_estimates(model). The group identifier(s) can be combined with the term identifier in a single column by using the colon to represent an interaction. If an incomplete formula is supplied (e.g., ~statistic), modelsummary tries to complete it automatically. Goodness-of-fit statistics are only appended to the bottom of the table when model is on the right hand side of the formula (i.e., columns). Potential shape values include:\n\n\nterm + statistic ~ model: default\n\n\nterm ~ model + statistic: statistics in separate columns\n\n\nmodel + statistic ~ term: models in rows and terms in columns\n\n\nterm + response + statistic ~ model: term and group id in separate columns\n\n\nterm : response + statistic ~ model: term and group id in a single column\n\n\nterm ~ response\n\n\n\n\nString: \"rbind\" or \"rcollapse\" to bind rows of two or more regression tables to create \"panels\" or \"stacks\" of regression models.\n\n\nthe models argument must be a (potentially named) nested list of models.\n\n\n\n\nUnnamed nested list with 2 panels: list(list(model1, model2), list(model3, model4))\n\n\nNamed nested list with 2 panels: list(“Panel A” = list(model1, model2), “Panel B” = list(model3, model4))\n\n\nNamed panels and named models: list(“Panel A” = list(“(I)” = model1, “(II)” = model2), “Panel B” = list(“(I)” = model3, “(II)” = model4))\n\n\n\n\n\"rbind\": Bind the rows of independent regression tables\n\n\n\"rcollapse\": Bind the rows of regression tables and create a panel at the bottom where we \"collapse\" goodness-of-fit statistics which are identical across models.\n\n\n\n\n\n\n\n\ncoef_map\n\n\ncharacter vector. Subset, rename, and reorder coefficients. Coefficients omitted from this vector are omitted from the table. The order of the vector determines the order of the table. coef_map can be a named or an unnamed character vector. If coef_map is a named vector, its values define the labels that must appear in the table, and its names identify the original term names stored in the model object: c(“hp:mpg”=“HPxM/G”). See Examples section below.\n\n\n\n\ncoef_omit\n\n\ninteger vector or regular expression to identify which coefficients to omit (or keep) from the table. Positive integers determine which coefficients to omit. Negative integers determine which coefficients to keep. A regular expression can be used to omit coefficients, and perl-compatible \"negative lookaheads\" can be used to specify which coefficients to keep in the table. Examples:\n\n\nc(2, 3, 5): omits the second, third, and fifth coefficients.\n\n\nc(-2, -3, -5): negative values keep the second, third, and fifth coefficients.\n\n\n“ei”: omit coefficients matching the \"ei\" substring.\n\n\n“^Volume$”: omit the \"Volume\" coefficient.\n\n\n“ei|rc”: omit coefficients matching either the \"ei\" or the \"rc\" substrings.\n\n\n“^(?!Vol)”: keep coefficients starting with \"Vol\" (inverse match using a negative lookahead).\n\n\n“^(?!.*ei)“: keep coefficients matching the”ei\" substring.\n\n\n“^(?!.ei|.pt)”: keep coefficients matching either the \"ei\" or the \"pt\" substrings.\n\n\nSee the Examples section below for complete code.\n\n\n\n\n\n\ncoef_rename\n\n\nlogical, named or unnamed character vector, or function\n\n\nLogical: TRUE renames variables based on the \"label\" attribute of each column. See the Example section below.\n\n\nUnnamed character vector of length equal to the number of coefficients in the final table, after coef_omit is applied.\n\n\nNamed character vector: Values refer to the variable names that will appear in the table. Names refer to the original term names stored in the model object. Ex: c(\"hp:mpg\"=\"hp X mpg\")\n\n\nFunction: Accepts a character vector of the model’s term names and returns a named vector like the one described above. The modelsummary package supplies a coef_rename() function which can do common cleaning tasks: modelsummary(model, coef_rename = coef_rename)\n\n\n\n\n\n\ngof_map\n\n\nrename, reorder, and omit goodness-of-fit statistics and other model information. This argument accepts 4 types of values:\n\n\nNULL (default): the modelsummary::gof_map dictionary is used for formatting, and all unknown statistic are included.\n\n\ncharacter vector: \"all\", \"none\", or a vector of statistics such as c(“rmse”, “nobs”, “r.squared”). Elements correspond to colnames in the data.frame produced by get_gof(model). The modelsummary::gof_map default dictionary is used to format and rename statistics.\n\n\nNA: excludes all statistics from the bottom part of the table.\n\n\ndata.frame with 3 columns named \"raw\", \"clean\", \"fmt\". Unknown statistics are omitted. See the ‘Examples’ section below.\n\n\nlist of lists, each of which includes 3 elements named \"raw\", \"clean\", \"fmt\". Unknown statistics are omitted. See the ‘Examples section below’.\n\n\n\n\n\n\ngof_omit\n\n\nstring regular expression (perl-compatible) used to determine which statistics to omit from the bottom section of the table. A \"negative lookahead\" can be used to specify which statistics to keep in the table. Examples:\n\n\n“IC”: omit statistics matching the \"IC\" substring.\n\n\n“BIC|AIC”: omit statistics matching the \"AIC\" or \"BIC\" substrings.\n\n\n“^(?!.*IC)“: keep statistics matching the”IC\" substring.\n\n\n\n\n\n\ngroup_map\n\n\nnamed or unnamed character vector. Subset, rename, and reorder coefficient groups specified a grouping variable specified in the shape argument formula. This argument behaves like coef_map.\n\n\n\n\nadd_columns\n\n\na data.frame (or tibble) with the same number of rows as #’ your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the columns positions. See Examples section below.\n\n\n\n\nadd_rows\n\n\na data.frame (or tibble) with the same number of columns as your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the row positions. See Examples section below.\n\n\n\n\nalign\n\n\nA string with a number of characters equal to the number of columns in the table (e.g., align = “lcc”). Valid characters: l, c, r, d.\n\n\n\"l\": left-aligned column\n\n\n\"c\": centered column\n\n\n\"r\": right-aligned column\n\n\n\"d\": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):\n\n\n⁠\n⁠\n\n\n⁠\n⁠\n\n\n⁠⁠\n\n\n\n\n\n\n\n\nnotes\n\n\nlist or vector of notes to append to the bottom of the table.\n\n\n\n\ntitle\n\n\nstring\n\n\n\n\nescape\n\n\nboolean TRUE escapes or substitutes LaTeX/HTML characters which could prevent the file from compiling/displaying. This setting does not affect captions or notes.\n\n\n\n\n…\n\n\nall other arguments are passed through to three functions. See the documentation of these functions for lists of available arguments.\n\n\nparameters::model_parameters extracts parameter estimates. Available arguments depend on model type, but include:\n\n\nstandardize, centrality, dispersion, test, ci_method, prior, diagnostic, rope_range, power, cluster, etc.\n\n\n\n\nperformance::model_performance extracts goodness-of-fit statistics. Available arguments depend on model type, but include:\n\n\nmetrics, estimator, etc.\n\n\n\n\nkableExtra::kbl or gt::gt draw tables, depending on the value of the output argument.\n\n\n\n\n\n\n\nDetails\n\noutput\n\nThe modelsummary_list output is a lightweight format which can be used to save model results, so they can be fed back to modelsummary later to avoid extracting results again.\nWhen a file name with a valid extension is supplied to the output argument, the table is written immediately to file. If you want to customize your table by post-processing it with an external package, you need to choose a different output format and saving mechanism. Unfortunately, the approach differs from package to package:\n\n\ngt: set output=“gt”, post-process your table, and use the gt::gtsave function.\n\n\nkableExtra: set output to your destination format (e.g., \"latex\", \"html\", \"markdown\"), post-process your table, and use kableExtra::save_kable function.\n\n\n\nvcov\n\nTo use a string such as \"robust\" or \"HC0\", your model must be supported by the sandwich package. This includes objects such as: lm, glm, survreg, coxph, mlogit, polr, hurdle, zeroinfl, and more.\nNULL, \"classical\", \"iid\", and \"constant\" are aliases which do not modify uncertainty estimates and simply report the default standard errors stored in the model object.\nOne-sided formulas such as ~clusterid are passed to the sandwich::vcovCL function.\nMatrices and functions producing variance-covariance matrices are first passed to lmtest. If this does not work, modelsummary attempts to take the square root of the diagonal to adjust \"std.error\", but the other uncertainty estimates are not be adjusted.\nNumeric vectors are formatted according to fmt and placed in brackets. Character vectors printed as given, without parentheses.\nIf your model type is supported by the lmtest package, the vcov argument will try to use that package to adjust all the uncertainty estimates, including \"std.error\", \"statistic\", \"p.value\", and \"conf.int\". If your model is not supported by lmtest, only the \"std.error\" will be adjusted by, for example, taking the square root of the matrix’s diagonal.\n\n\nValue\na regression table in a format determined by the output argument.\n\n\nGlobal Options\nThe behavior of modelsummary can be modified by setting global options. For example:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\nThe rest of this section describes each of the options above.\n\nModel labels: default column names\n\nThese global option changes the style of the default column headers:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\noptions(modelsummary_panel_labels = “roman”)\n\n\nThe supported styles are: \"model\", \"panel\", \"arabic\", \"letters\", \"roman\", \"(arabic)\", \"(letters)\", \"(roman)\"\"\nThe panel-specific option is only used when shape=“rbind”\n\nTable-making packages\n\nmodelsummary supports 4 table-making packages: kableExtra, gt, flextable, huxtable, and DT. Some of these packages have overlapping functionalities. For example, 3 of those packages can export to LaTeX. To change the default backend used for a specific file format, you can use the options function:\noptions(modelsummary_factory_html = ‘kableExtra’)\noptions(modelsummary_factory_latex = ‘gt’)\noptions(modelsummary_factory_word = ‘huxtable’)\noptions(modelsummary_factory_png = ‘gt’)\n\nTable themes\n\nChange the look of tables in an automated and replicable way, using the modelsummary theming functionality. See the vignette: https://modelsummary.com/articles/appearance.html\n\n\nmodelsummary_theme_gt\n\n\nmodelsummary_theme_kableExtra\n\n\nmodelsummary_theme_huxtable\n\n\nmodelsummary_theme_flextable\n\n\nmodelsummary_theme_dataframe\n\n\n\nModel extraction functions\n\nmodelsummary can use two sets of packages to extract information from statistical models: the easystats family (performance and parameters) and broom. By default, it uses easystats first and then falls back on broom in case of failure. You can change the order of priorities or include goodness-of-fit extracted by both packages by setting:\noptions(modelsummary_get = “broom”)\noptions(modelsummary_get = “easystats”)\noptions(modelsummary_get = “all”)\n\nFormatting numeric entries\n\nBy default, LaTeX tables enclose all numeric entries in the ⁠⁠ command from the siunitx package. To prevent this behavior, or to enclose numbers in dollar signs (for LaTeX math mode), users can call:\noptions(modelsummary_format_numeric_latex = “plain”)\noptions(modelsummary_format_numeric_latex = “mathmode”)\nA similar option can be used to display numerical entries using MathJax in HTML tables:\noptions(modelsummary_format_numeric_html = “mathjax”)\n\n\nParallel computation\nIt can take a long time to compute and extract summary statistics from certain models (e.g., Bayesian). In those cases, users can parallelize the process. Since parallelization occurs at the model level, no speedup is available for tables with a single model. Users on mac or linux can launch parallel computation using the built-in parallel package. All they need to do is supply a mc.cores argument which will be pushed forward to the parallel::mclapply function:\n\nmodelsummary(model_list, mc.cores = 5)\n\n\nAll users can also use the future.apply package to parallelize model summaries. For example, to use 4 cores to extract results:\n\nlibrary(future.apply)\nplan(multicore, workers = 4)\noptions(\"modelsummary_future\" = TRUE)\nmodelsummary(model_list)\n\n\nNote that the \"multicore\" plan only parallelizes under mac or linux. Windows users can use plan(multisession) instead. However, note that the first time modelsummary() is called under multisession can be a fair bit longer, because of extra costs in passing data to and loading required packages on to workers. Subsequent calls to modelsummary() will often be much faster.\nSome users have reported difficult to reproduce errors when using the future package with some packages. The future parallelization in modelsummary can be disabled by calling:\noptions(“modelsummary_future” = FALSE)\n\n\nExamples\n\nlibrary(modelsummary)\n\n\nlibrary(modelsummary)\n\n# load data and estimate models\nutils::data(trees)\nmodels &lt;- list()\nmodels[['Bivariate']] &lt;- lm(Girth ~ Height, data = trees)\nmodels[['Multivariate']] &lt;- lm(Girth ~ Height + Volume, data = trees)\n\n# simple table\nmodelsummary(models)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# statistic\nmodelsummary(models, statistic = NULL)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\nHeight\n0.256\n−0.045\n\n\nVolume\n\n0.195\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models, statistic = 'p.value')\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(0.308)\n(&lt;0.001)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.003)\n(0.119)\n\n\nVolume\n\n0.195\n\n\n\n\n(&lt;0.001)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models, statistic = 'statistic')\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(−1.038)\n(5.482)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(3.272)\n(−1.609)\n\n\nVolume\n\n0.195\n\n\n\n\n(17.816)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models, statistic = 'conf.int', conf_level = 0.99)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n[−22.617, 10.240]\n[5.364, 16.269]\n\n\nHeight\n0.256\n−0.045\n\n\n\n[0.040, 0.471]\n[−0.124, 0.033]\n\n\nVolume\n\n0.195\n\n\n\n\n[0.165, 0.225]\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models, statistic = c(\"t = {statistic}\",\n                                   \"se = {std.error}\",\n                                   \"conf.int\"))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\nt = −1.038\nt = 5.482\n\n\n\nse = 5.960\nse = 1.973\n\n\n\n[−18.378, 6.002]\n[6.774, 14.858]\n\n\nHeight\n0.256\n−0.045\n\n\n\nt = 3.272\nt = −1.609\n\n\n\nse = 0.078\nse = 0.028\n\n\n\n[0.096, 0.416]\n[−0.103, 0.012]\n\n\nVolume\n\n0.195\n\n\n\n\nt = 17.816\n\n\n\n\nse = 0.011\n\n\n\n\n[0.173, 0.218]\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# estimate\nmodelsummary(models,\n  statistic = NULL,\n  estimate = \"{estimate} [{conf.low}, {conf.high}]\")\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188 [−18.378, 6.002]\n10.816 [6.774, 14.858]\n\n\nHeight\n0.256 [0.096, 0.416]\n−0.045 [−0.103, 0.012]\n\n\nVolume\n\n0.195 [0.173, 0.218]\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models,\n  estimate = c(\"{estimate}{stars}\",\n               \"{estimate} ({std.error})\"))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816 (1.973)\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256**\n−0.045 (0.028)\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195 (0.011)\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# vcov\nmodelsummary(models, vcov = \"robust\")\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(6.717)\n(2.544)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.090)\n(0.035)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.014)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n8.021\n100.427\n\n\nRMSE\n2.64\n0.75\n\n\nStd.Errors\nHC3\nHC3\n\n\n\n\n\n\nmodelsummary(models, vcov = list(\"classical\", \"stata\"))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(2.261)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.031)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.012)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n151.435\n\n\nRMSE\n2.64\n0.75\n\n\nStd.Errors\nIID\nHC1\n\n\n\n\n\n\nmodelsummary(models, vcov = sandwich::vcovHC)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(6.717)\n(2.544)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.090)\n(0.035)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.014)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nRMSE\n2.64\n0.75\n\n\nStd.Errors\nCustom\nCustom\n\n\n\n\n\n\nmodelsummary(models,\n  vcov = list(stats::vcov, sandwich::vcovHC))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(2.544)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.035)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.014)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nRMSE\n2.64\n0.75\n\n\nStd.Errors\nCustom\nCustom\n\n\n\n\n\n\nmodelsummary(models,\n  vcov = list(c(\"(Intercept)\"=\"\", \"Height\"=\"!\"),\n              c(\"(Intercept)\"=\"\", \"Height\"=\"!\", \"Volume\"=\"!!\")))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\nHeight\n0.256\n−0.045\n\n\n\n!\n!\n\n\nVolume\n\n0.195\n\n\n\n\n!!\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nRMSE\n2.64\n0.75\n\n\nStd.Errors\nCustom\nCustom\n\n\n\n\n\n\n# vcov with custom names\nmodelsummary(\n  models,\n  vcov = list(\"Stata Corp\" = \"stata\",\n              \"Newey Lewis & the News\" = \"NeweyWest\"))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(6.171)\n(1.839)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.083)\n(0.022)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.007)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nRMSE\n2.64\n0.75\n\n\nStd.Errors\nStata Corp\nNewey Lewis & the News\n\n\n\n\n\n\n# fmt\nmod &lt;- lm(mpg ~ hp + drat + qsec, data = mtcars)\n\nmodelsummary(mod, fmt = 3)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n17.737\n\n\n\n(13.020)\n\n\nhp\n−0.058\n\n\n\n(0.014)\n\n\ndrat\n4.429\n\n\n\n(1.292)\n\n\nqsec\n−0.284\n\n\n\n(0.489)\n\n\nNum.Obs.\n32\n\n\nR2\n0.744\n\n\nR2 Adj.\n0.717\n\n\nAIC\n171.1\n\n\nBIC\n178.5\n\n\nLog.Lik.\n−80.561\n\n\nF\n27.161\n\n\nRMSE\n3.00\n\n\n\n\n\n\nmodelsummary(mod, fmt = fmt_significant(3))\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n17.7\n\n\n\n(13.0)\n\n\nhp\n−0.0580\n\n\n\n(0.0142)\n\n\ndrat\n4.43\n\n\n\n(1.29)\n\n\nqsec\n−0.284\n\n\n\n(0.489)\n\n\nNum.Obs.\n32\n\n\nR2\n0.744\n\n\nR2 Adj.\n0.717\n\n\nAIC\n171.1\n\n\nBIC\n178.5\n\n\nLog.Lik.\n−80.561\n\n\nF\n27.161\n\n\nRMSE\n3.00\n\n\n\n\n\n\nmodelsummary(mod, fmt = NULL)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n17.7366200480466\n\n\n\n(13.0197907534221)\n\n\nhp\n-0.057972987581075\n\n\n\n(0.014208609097443)\n\n\ndrat\n4.42875344653986\n\n\n\n(1.29169225236228)\n\n\nqsec\n-0.284074290906574\n\n\n\n(0.489229280152)\n\n\nNum.Obs.\n32\n\n\nR2\n0.744\n\n\nR2 Adj.\n0.717\n\n\nAIC\n171.1\n\n\nBIC\n178.5\n\n\nLog.Lik.\n−80.561\n\n\nF\n27.161\n\n\nRMSE\n3.00\n\n\n\n\n\n\nmodelsummary(mod, fmt = fmt_decimal(4))\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n17.7366\n\n\n\n(13.0198)\n\n\nhp\n−0.0580\n\n\n\n(0.0142)\n\n\ndrat\n4.4288\n\n\n\n(1.2917)\n\n\nqsec\n−0.2841\n\n\n\n(0.4892)\n\n\nNum.Obs.\n32\n\n\nR2\n0.744\n\n\nR2 Adj.\n0.717\n\n\nAIC\n171.1\n\n\nBIC\n178.5\n\n\nLog.Lik.\n−80.561\n\n\nF\n27.161\n\n\nRMSE\n3.00\n\n\n\n\n\n\nmodelsummary(mod, fmt = fmt_sprintf(\"%.5f\"))\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n17.73662\n\n\n\n(13.01979)\n\n\nhp\n−0.05797\n\n\n\n(0.01421)\n\n\ndrat\n4.42875\n\n\n\n(1.29169)\n\n\nqsec\n−0.28407\n\n\n\n(0.48923)\n\n\nNum.Obs.\n32\n\n\nR2\n0.744\n\n\nR2 Adj.\n0.717\n\n\nAIC\n171.1\n\n\nBIC\n178.5\n\n\nLog.Lik.\n−80.561\n\n\nF\n27.161\n\n\nRMSE\n3.00\n\n\n\n\n\n\nmodelsummary(mod, fmt = fmt_statistic(estimate = 4, conf.int = 1), statistic = \"conf.int\")\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n17.7366\n\n\n\n[−8.9, 44.4]\n\n\nhp\n−0.0580\n\n\n\n[−0.1, 0.0]\n\n\ndrat\n4.4288\n\n\n\n[1.8, 7.1]\n\n\nqsec\n−0.2841\n\n\n\n[−1.3, 0.7]\n\n\nNum.Obs.\n32\n\n\nR2\n0.744\n\n\nR2 Adj.\n0.717\n\n\nAIC\n171.1\n\n\nBIC\n178.5\n\n\nLog.Lik.\n−80.561\n\n\nF\n27.161\n\n\nRMSE\n3.00\n\n\n\n\n\n\nmodelsummary(mod, fmt = fmt_term(hp = 4, drat = 1, default = 2))\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n17.74\n\n\n\n(13.02)\n\n\nhp\n−0.0580\n\n\n\n(0.0142)\n\n\ndrat\n4.4\n\n\n\n(1.3)\n\n\nqsec\n−0.28\n\n\n\n(0.49)\n\n\nNum.Obs.\n32\n\n\nR2\n0.744\n\n\nR2 Adj.\n0.717\n\n\nAIC\n171.1\n\n\nBIC\n178.5\n\n\nLog.Lik.\n−80.561\n\n\nF\n27.161\n\n\nRMSE\n3.00\n\n\n\n\n\n\nm &lt;- lm(mpg ~ I(hp * 1000) + drat, data = mtcars)\nf &lt;- function(x) format(x, digits = 3, nsmall = 2, scientific = FALSE, trim = TRUE)\nmodelsummary(m, fmt = f, gof_map = NA)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n10.7898612\n\n\n\n(5.07775160)\n\n\nI(hp * 1000)\n−0.0000518\n\n\n\n(0.00000929)\n\n\ndrat\n4.6981578\n\n\n\n(1.19163348)\n\n\n\n\n\n\n# coef_rename\nmodelsummary(models, coef_rename = c('Volume' = 'Large', 'Height' = 'Tall'))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nTall\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nLarge\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models, coef_rename = toupper)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(INTERCEPT)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHEIGHT\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVOLUME\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models, coef_rename = coef_rename)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# coef_rename = TRUE for variable labels\ndatlab &lt;- mtcars\ndatlab$cyl &lt;- factor(datlab$cyl)\nattr(datlab$hp, \"label\") &lt;- \"Horsepower\"\nattr(datlab$cyl, \"label\") &lt;- \"Cylinders\"\nmodlab &lt;- lm(mpg ~ hp * drat + cyl, data = datlab)\nmodelsummary(modlab, coef_rename = TRUE)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n14.850\n\n\n\n(11.923)\n\n\nHorsepower\n−0.011\n\n\n\n(0.082)\n\n\ndrat\n3.612\n\n\n\n(3.019)\n\n\nCylinders [6]\n−4.091\n\n\n\n(1.881)\n\n\nCylinders [8]\n−5.019\n\n\n\n(3.056)\n\n\nHorsepower × drat\n−0.006\n\n\n\n(0.021)\n\n\nNum.Obs.\n32\n\n\nR2\n0.784\n\n\nR2 Adj.\n0.742\n\n\nAIC\n169.7\n\n\nBIC\n180.0\n\n\nLog.Lik.\n−77.860\n\n\nF\n18.871\n\n\nRMSE\n2.76\n\n\n\n\n\n\n# coef_rename: unnamed vector of length equal to the number of terms in the final table\nm &lt;- lm(hp ~ mpg + factor(cyl), data = mtcars)\nmodelsummary(m, coef_omit = -(3:4), coef_rename = c(\"Cyl 6\", \"Cyl 8\"))\n\n\n\n\n\n (1)\n\n\n\n\nCyl 6\n16.623\n\n\n\n(23.197)\n\n\nCyl 8\n88.105\n\n\n\n(28.819)\n\n\nNum.Obs.\n32\n\n\nR2\n0.737\n\n\nR2 Adj.\n0.709\n\n\nAIC\n327.7\n\n\nBIC\n335.0\n\n\nLog.Lik.\n−158.831\n\n\nF\n26.122\n\n\nRMSE\n34.62\n\n\n\n\n\n\n# coef_map\nmodelsummary(models, coef_map = c('Volume' = 'Large', 'Height' = 'Tall'))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\nLarge\n\n0.195\n\n\n\n\n(0.011)\n\n\nTall\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\nmodelsummary(models, coef_map = c('Volume', 'Height'))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# coef_omit: omit the first and second coefficients\nmodelsummary(models, coef_omit = 1:2)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# coef_omit: omit coefficients matching one substring\nmodelsummary(models, coef_omit = \"ei\", gof_omit = \".*\")\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\n\n\n\n\n# coef_omit: omit a specific coefficient\nmodelsummary(models, coef_omit = \"^Volume$\", gof_omit = \".*\")\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\n\n\n\n\n# coef_omit: omit coefficients matching either one of two substring\n#modelsummary(models, coef_omit = \"ei|rc\", gof_omit = \".*\")\n\n# coef_omit: keep coefficients starting with a substring (using a negative lookahead)\n#modelsummary(models, coef_omit = \"^(?!Vol)\", gof_omit = \".*\")\n\n# coef_omit: keep coefficients matching a substring\nmodelsummary(models, coef_omit = \"^(?!.*ei|.*pt)\", gof_omit = \".*\")\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\n\n\n\n\n# shape: multinomial model\nlibrary(nnet)\nmulti &lt;- multinom(factor(cyl) ~ mpg + hp, data = mtcars, trace = FALSE) \n\n# shape: term names and group ids in rows, models in columns\nmodelsummary(multi, shape = response ~ model)\n\n\n\n\n\nresponse\n (1)\n\n\n\n\n(Intercept)\n6\n0.500\n\n\n\n\n(41.760)\n\n\n\n8\n8.400\n\n\n\n\n(0.502)\n\n\nmpg\n6\n−83.069\n\n\n\n\n(416.777)\n\n\n\n8\n−120.167\n\n\n\n\n(508.775)\n\n\nhp\n6\n16.230\n\n\n\n\n(81.808)\n\n\n\n8\n20.307\n\n\n\n\n(87.777)\n\n\nNum.Obs.\n\n32\n\n\nR2\n\n1.000\n\n\nR2 Adj.\n\n0.971\n\n\nAIC\n\n12.0\n\n\nBIC\n\n20.8\n\n\nRMSE\n\n0.00\n\n\n\n\n\n\n# shape: term names and group ids in rows in a single column\nmodelsummary(multi, shape = term : response ~ model)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept) 6\n0.500\n\n\n\n(41.760)\n\n\nmpg 6\n−83.069\n\n\n\n(416.777)\n\n\nhp 6\n16.230\n\n\n\n(81.808)\n\n\n(Intercept) 8\n8.400\n\n\n\n(0.502)\n\n\nmpg 8\n−120.167\n\n\n\n(508.775)\n\n\nhp 8\n20.307\n\n\n\n(87.777)\n\n\nNum.Obs.\n32\n\n\nR2\n1.000\n\n\nR2 Adj.\n0.971\n\n\nAIC\n12.0\n\n\nBIC\n20.8\n\n\nRMSE\n0.00\n\n\n\n\n\n\n# shape: term names in rows and group ids in columns\nmodelsummary(multi, shape = term ~ response:model)\n\n\n\n\n\n\n\n\n\n\n\n(1)\n\n\n\n\n 6\n 8\n\n\n\n\n(Intercept)\n0.500\n8.400\n\n\n\n(41.760)\n(0.502)\n\n\nmpg\n−83.069\n−120.167\n\n\n\n(416.777)\n(508.775)\n\n\nhp\n16.230\n20.307\n\n\n\n(81.808)\n(87.777)\n\n\n\n\n\n\n# shape = \"rcollapse\"\npanels &lt;- list(\n    \"Panel A: MPG\" = list(\n        \"A\" = lm(mpg ~ hp, data = mtcars),\n        \"B\" = lm(mpg ~ hp + factor(gear), data = mtcars)),\n    \"Panel B: Displacement\" = list(\n        \"A\" = lm(disp ~ hp, data = mtcars),\n        \"C\" = lm(disp ~ hp + factor(gear), data = mtcars))\n)\n\nmodelsummary(\n    panels,\n    shape = \"rbind\",\n    gof_map = c(\"nobs\", \"r.squared\"))\n\n\n\n\n\nA\nB\nC\n\n\n\n\nPanel A: MPG\n\n\n(Intercept)\n30.099\n27.882\n\n\n\n\n(1.634)\n(2.109)\n\n\n\nhp\n-0.068\n-0.067\n\n\n\n\n(0.010)\n(0.011)\n\n\n\nfactor(gear)4\n\n2.635\n\n\n\n\n\n(1.552)\n\n\n\nfactor(gear)5\n\n6.575\n\n\n\n\n\n(1.643)\n\n\n\nNum.Obs.\n32\n32\n\n\n\nR2\n0.602\n0.753\n\n\n\nPanel B: Displacement\n\n\n(Intercept)\n20.992\n\n112.093\n\n\n\n(32.607)\n\n(34.704)\n\n\nhp\n1.430\n\n1.216\n\n\n\n(0.202)\n\n(0.182)\n\n\nfactor(gear)4\n\n\n-97.923\n\n\n\n\n\n(25.532)\n\n\nfactor(gear)5\n\n\n-147.495\n\n\n\n\n\n(27.030)\n\n\nNum.Obs.\n32\n\n32\n\n\nR2\n0.626\n\n0.842\n\n\n\n\n\n\n# title\nmodelsummary(models, title = 'This is the title')\n\n\nThis is the title\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# title with LaTeX label (for numbering and referencing)\nmodelsummary(models, title = 'This is the title \\\\label{tab:description}')\n\n\nThis is the title \\label{tab:description}\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# add_rows\nrows &lt;- tibble::tribble(~term, ~Bivariate, ~Multivariate,\n  'Empty row', '-', '-',\n  'Another empty row', '?', '?')\nattr(rows, 'position') &lt;- c(1, 3)\nmodelsummary(models, add_rows = rows)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\nEmpty row\n-\n-\n\n\n(Intercept)\n−6.188\n10.816\n\n\nAnother empty row\n?\n?\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n\n\n\n# notes\nmodelsummary(models, notes = list('A first note', 'A second note'))\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nNum.Obs.\n31\n31\n\n\nR2\n0.270\n0.941\n\n\nR2 Adj.\n0.244\n0.937\n\n\nAIC\n154.1\n78.2\n\n\nBIC\n158.4\n84.0\n\n\nLog.Lik.\n−74.061\n−35.116\n\n\nF\n10.707\n222.471\n\n\nRMSE\n2.64\n0.75\n\n\n\n A first note\n\n\n\n\n\n\n\n\n\n# gof_map: tribble\nlibrary(tibble)\ngm &lt;- tribble(\n  ~raw,        ~clean,      ~fmt,\n  \"r.squared\", \"R Squared\", 5)\nmodelsummary(models, gof_map = gm)\n\n\n\n\n\nBivariate\nMultivariate\n\n\n\n\n(Intercept)\n−6.188\n10.816\n\n\n\n(5.960)\n(1.973)\n\n\nHeight\n0.256\n−0.045\n\n\n\n(0.078)\n(0.028)\n\n\nVolume\n\n0.195\n\n\n\n\n(0.011)\n\n\nR Squared\n0.26965\n0.94080"
  },
  {
    "objectID": "man/datasummary_balance.html",
    "href": "man/datasummary_balance.html",
    "title": "datasummary_balance",
    "section": "",
    "text": "Balance table: Summary statistics for different subsets of the data (e.g., control and treatment groups)\n\nDescription\nCreates balance tables with summary statistics for different subsets of the data (e.g., control and treatment groups). It can also be used to create summary tables for full data sets. See the Details and Examples sections below, and the vignettes on the modelsummary website:\n\n\nhttps://modelsummary.com/\n\n\nhttps://modelsummary.com/articles/datasummary.html\n\n\n\n\nUsage\ndatasummary_balance(\n  formula,\n  data,\n  output = \"default\",\n  fmt = fmt_decimal(digits = 1, pdigits = 3),\n  title = NULL,\n  notes = NULL,\n  align = NULL,\n  stars = FALSE,\n  add_columns = NULL,\n  add_rows = NULL,\n  dinm = TRUE,\n  dinm_statistic = \"std.error\",\n  escape = TRUE,\n  ...\n)\n\n\n\nArguments\n\n\n\nformula\n\n\na one-sided formula with the \"condition\" or \"column\" variable on the right-hand side. ~1 can be used to show summary statistics for the full data set\n\n\n\n\ndata\n\n\nA data.frame (or tibble). If this data includes columns called \"blocks\", \"clusters\", and/or \"weights\", the \"estimatr\" package will consider them when calculating the difference in means. If there is a weights column, the reported mean and standard errors will also be weighted.\n\n\n\n\noutput\n\n\nfilename or object type (character string)\n\n\nSupported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg\n\n\nSupported object types: \"default\", \"html\", \"markdown\", \"latex\", \"latex_tabular\", \"data.frame\", \"gt\", \"kableExtra\", \"huxtable\", \"flextable\", \"DT\", \"jupyter\". The \"modelsummary_list\" value produces a lightweight object which can be saved and fed back to the modelsummary function.\n\n\nThe \"default\" output format can be set to \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\nIf the user does not choose a default value, the packages listed above are tried in sequence.\n\n\nSession-specific configuration: options(“modelsummary_factory_default” = “gt”)\n\n\nPersistent configuration: config_modelsummary(output = “markdown”)\n\n\n\n\nWarning: Users should not supply a file name to the output argument if they intend to customize the table with external packages. See the ‘Details’ section.\n\n\nLaTeX compilation requires the booktabs and siunitx packages, but siunitx can be disabled or replaced with global options. See the ‘Details’ section.\n\n\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\n\n\nnotes\n\n\nlist or vector of notes to append to the bottom of the table.\n\n\n\n\nalign\n\n\nA string with a number of characters equal to the number of columns in the table (e.g., align = “lcc”). Valid characters: l, c, r, d.\n\n\n\"l\": left-aligned column\n\n\n\"c\": centered column\n\n\n\"r\": right-aligned column\n\n\n\"d\": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):\n\n\n⁠\n⁠\n\n\n⁠\n⁠\n\n\n⁠⁠\n\n\n\n\n\n\n\n\nstars\n\n\nto indicate statistical significance\n\n\nFALSE (default): no significance stars.\n\n\nTRUE: +=.1, =.05, =.01, =0.001\n\n\nNamed numeric vector for custom stars such as c(’*’ = .1, ‘+’ = .05)\n\n\nNote: a legend will not be inserted at the bottom of the table when the estimate or statistic arguments use \"glue strings\" with {stars}.\n\n\n\n\n\n\nadd_columns\n\n\na data.frame (or tibble) with the same number of rows as your main table.\n\n\n\n\nadd_rows\n\n\na data.frame (or tibble) with the same number of columns as your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the row positions. See Examples section below.\n\n\n\n\ndinm\n\n\nTRUE calculates a difference in means with uncertainty estimates. This option is only available if the estimatr package is installed. If data includes columns named \"blocks\", \"clusters\", or \"weights\", this information will be taken into account automatically by estimatr::difference_in_means.\n\n\n\n\ndinm_statistic\n\n\nstring: \"std.error\" or \"p.value\"\n\n\n\n\nescape\n\n\nboolean TRUE escapes or substitutes LaTeX/HTML characters which could prevent the file from compiling/displaying. This setting does not affect captions or notes.\n\n\n\n\n…\n\n\nall other arguments are passed through to the table-making functions kableExtra::kbl, gt::gt, DT::datatable, etc. depending on the output argument. This allows users to pass arguments directly to datasummary in order to affect the behavior of other functions behind the scenes.\n\n\n\n\n\nGlobal Options\nThe behavior of modelsummary can be modified by setting global options. For example:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\nThe rest of this section describes each of the options above.\n\nModel labels: default column names\n\nThese global option changes the style of the default column headers:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\noptions(modelsummary_panel_labels = “roman”)\n\n\nThe supported styles are: \"model\", \"panel\", \"arabic\", \"letters\", \"roman\", \"(arabic)\", \"(letters)\", \"(roman)\"\"\nThe panel-specific option is only used when shape=“rbind”\n\nTable-making packages\n\nmodelsummary supports 4 table-making packages: kableExtra, gt, flextable, huxtable, and DT. Some of these packages have overlapping functionalities. For example, 3 of those packages can export to LaTeX. To change the default backend used for a specific file format, you can use the options function:\noptions(modelsummary_factory_html = ‘kableExtra’)\noptions(modelsummary_factory_latex = ‘gt’)\noptions(modelsummary_factory_word = ‘huxtable’)\noptions(modelsummary_factory_png = ‘gt’)\n\nTable themes\n\nChange the look of tables in an automated and replicable way, using the modelsummary theming functionality. See the vignette: https://modelsummary.com/articles/appearance.html\n\n\nmodelsummary_theme_gt\n\n\nmodelsummary_theme_kableExtra\n\n\nmodelsummary_theme_huxtable\n\n\nmodelsummary_theme_flextable\n\n\nmodelsummary_theme_dataframe\n\n\n\nModel extraction functions\n\nmodelsummary can use two sets of packages to extract information from statistical models: the easystats family (performance and parameters) and broom. By default, it uses easystats first and then falls back on broom in case of failure. You can change the order of priorities or include goodness-of-fit extracted by both packages by setting:\noptions(modelsummary_get = “broom”)\noptions(modelsummary_get = “easystats”)\noptions(modelsummary_get = “all”)\n\nFormatting numeric entries\n\nBy default, LaTeX tables enclose all numeric entries in the ⁠⁠ command from the siunitx package. To prevent this behavior, or to enclose numbers in dollar signs (for LaTeX math mode), users can call:\noptions(modelsummary_format_numeric_latex = “plain”)\noptions(modelsummary_format_numeric_latex = “mathmode”)\nA similar option can be used to display numerical entries using MathJax in HTML tables:\noptions(modelsummary_format_numeric_html = “mathjax”)\n\n\nExamples\n\nlibrary(modelsummary)\n\nlibrary(modelsummary)\ndatasummary_balance(~am, mtcars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n1\n\n\n\n\n\nMean\nStd. Dev.\nMean\nStd. Dev.\nDiff. in Means\nStd. Error\n\n\n\n\nmpg\n17.1\n3.8\n24.4\n6.2\n7.2\n1.9\n\n\ncyl\n6.9\n1.5\n5.1\n1.6\n-1.9\n0.6\n\n\ndisp\n290.4\n110.2\n143.5\n87.2\n-146.8\n35.0\n\n\nhp\n160.3\n53.9\n126.8\n84.1\n-33.4\n26.4\n\n\ndrat\n3.3\n0.4\n4.0\n0.4\n0.8\n0.1\n\n\nwt\n3.8\n0.8\n2.4\n0.6\n-1.4\n0.2\n\n\nqsec\n18.2\n1.8\n17.4\n1.8\n-0.8\n0.6\n\n\nvs\n0.4\n0.5\n0.5\n0.5\n0.2\n0.2\n\n\ngear\n3.2\n0.4\n4.4\n0.5\n1.2\n0.2\n\n\ncarb\n2.7\n1.1\n2.9\n2.2\n0.2\n0.7"
  },
  {
    "objectID": "man/datasummary_correlation_format.html",
    "href": "man/datasummary_correlation_format.html",
    "title": "datasummary_correlation_format",
    "section": "",
    "text": "Format the content of a correlation table\n\nDescription\nMostly for internal use, but can be useful when users supply a function to the method argument of datasummary_correlation.\n\n\nUsage\ndatasummary_correlation_format(\n  x,\n  fmt,\n  leading_zero = FALSE,\n  diagonal = NULL,\n  upper_triangle = NULL\n)\n\n\n\nArguments\n\n\n\nx\n\n\nsquare numeric matrix\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\n\n\n\n\nleading_zero\n\n\nboolean. If FALSE, leading zeros are removed\n\n\n\n\ndiagonal\n\n\ncharacter or NULL. If character, all elements of the diagonal are replaced by the same character (e.g., \"1\").\n\n\n\n\nupper_triangle\n\n\ncharacter or NULL. If character, all elements of the upper triangle are replaced by the same character (e.g., \"\" or \".\").\n\n\n\n\n\nExamples\n\nlibrary(modelsummary)\n\nlibrary(modelsummary)\n\ndat &lt;- mtcars[, c(\"mpg\", \"hp\", \"disp\")]\n\ncor_fun &lt;- function(x) {\n  out &lt;- cor(x, method = \"kendall\")\n  datasummary_correlation_format(\n    out,\n    fmt = 2,\n    upper_triangle = \"x\",\n    diagonal = \".\")\n}\n\ndatasummary_correlation(dat, method = cor_fun)\n\n\n\n\n\nmpg\nhp\ndisp\n\n\n\n\nmpg\n.\nx\nx\n\n\nhp\n−.74\n.\nx\n\n\ndisp\n−.77\n.67\n."
  },
  {
    "objectID": "man/datasummary_correlation.html",
    "href": "man/datasummary_correlation.html",
    "title": "datasummary_correlation",
    "section": "",
    "text": "Generate a correlation table for all numeric variables in your dataset.\n\nDescription\nThe names of the variables displayed in the correlation table are the names of the columns in the data. You can rename those columns (with or without spaces) to produce a table of human-readable variables. See the Details and Examples sections below, and the vignettes on the modelsummary website:\n\n\nhttps://modelsummary.com/\n\n\nhttps://modelsummary.com/articles/datasummary.html\n\n\n\n\nUsage\ndatasummary_correlation(\n  data,\n  output = \"default\",\n  method = \"pearson\",\n  fmt = 2,\n  align = NULL,\n  add_rows = NULL,\n  add_columns = NULL,\n  title = NULL,\n  notes = NULL,\n  escape = TRUE,\n  ...\n)\n\n\n\nArguments\n\n\n\ndata\n\n\nA data.frame (or tibble)\n\n\n\n\noutput\n\n\nfilename or object type (character string)\n\n\nSupported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg\n\n\nSupported object types: \"default\", \"html\", \"markdown\", \"latex\", \"latex_tabular\", \"data.frame\", \"gt\", \"kableExtra\", \"huxtable\", \"flextable\", \"DT\", \"jupyter\". The \"modelsummary_list\" value produces a lightweight object which can be saved and fed back to the modelsummary function.\n\n\nThe \"default\" output format can be set to \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\nIf the user does not choose a default value, the packages listed above are tried in sequence.\n\n\nSession-specific configuration: options(“modelsummary_factory_default” = “gt”)\n\n\nPersistent configuration: config_modelsummary(output = “markdown”)\n\n\n\n\nWarning: Users should not supply a file name to the output argument if they intend to customize the table with external packages. See the ‘Details’ section.\n\n\nLaTeX compilation requires the booktabs and siunitx packages, but siunitx can be disabled or replaced with global options. See the ‘Details’ section.\n\n\n\n\n\n\nmethod\n\n\ncharacter or function\n\n\ncharacter: \"pearson\", \"kendall\", \"spearman\", or \"pearspear\" (Pearson correlations above and Spearman correlations below the diagonal)\n\n\nfunction: takes a data.frame with numeric columns and returns a square matrix or data.frame with unique row.names and colnames corresponding to variable names. Note that the datasummary_correlation_format can often be useful for formatting the output of custom correlation functions.\n\n\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\n\n\n\n\nalign\n\n\nA string with a number of characters equal to the number of columns in the table (e.g., align = “lcc”). Valid characters: l, c, r, d.\n\n\n\"l\": left-aligned column\n\n\n\"c\": centered column\n\n\n\"r\": right-aligned column\n\n\n\"d\": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):\n\n\n⁠\n⁠\n\n\n⁠\n⁠\n\n\n⁠⁠\n\n\n\n\n\n\n\n\nadd_rows\n\n\na data.frame (or tibble) with the same number of columns as your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the row positions. See Examples section below.\n\n\n\n\nadd_columns\n\n\na data.frame (or tibble) with the same number of rows as your main table.\n\n\n\n\ntitle\n\n\nstring\n\n\n\n\nnotes\n\n\nlist or vector of notes to append to the bottom of the table.\n\n\n\n\nescape\n\n\nboolean TRUE escapes or substitutes LaTeX/HTML characters which could prevent the file from compiling/displaying. This setting does not affect captions or notes.\n\n\n\n\n…\n\n\nother parameters are passed through to the table-making packages.\n\n\n\n\n\nGlobal Options\nThe behavior of modelsummary can be modified by setting global options. For example:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\nThe rest of this section describes each of the options above.\n\nModel labels: default column names\n\nThese global option changes the style of the default column headers:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\noptions(modelsummary_panel_labels = “roman”)\n\n\nThe supported styles are: \"model\", \"panel\", \"arabic\", \"letters\", \"roman\", \"(arabic)\", \"(letters)\", \"(roman)\"\"\nThe panel-specific option is only used when shape=“rbind”\n\nTable-making packages\n\nmodelsummary supports 4 table-making packages: kableExtra, gt, flextable, huxtable, and DT. Some of these packages have overlapping functionalities. For example, 3 of those packages can export to LaTeX. To change the default backend used for a specific file format, you can use the options function:\noptions(modelsummary_factory_html = ‘kableExtra’)\noptions(modelsummary_factory_latex = ‘gt’)\noptions(modelsummary_factory_word = ‘huxtable’)\noptions(modelsummary_factory_png = ‘gt’)\n\nTable themes\n\nChange the look of tables in an automated and replicable way, using the modelsummary theming functionality. See the vignette: https://modelsummary.com/articles/appearance.html\n\n\nmodelsummary_theme_gt\n\n\nmodelsummary_theme_kableExtra\n\n\nmodelsummary_theme_huxtable\n\n\nmodelsummary_theme_flextable\n\n\nmodelsummary_theme_dataframe\n\n\n\nModel extraction functions\n\nmodelsummary can use two sets of packages to extract information from statistical models: the easystats family (performance and parameters) and broom. By default, it uses easystats first and then falls back on broom in case of failure. You can change the order of priorities or include goodness-of-fit extracted by both packages by setting:\noptions(modelsummary_get = “broom”)\noptions(modelsummary_get = “easystats”)\noptions(modelsummary_get = “all”)\n\nFormatting numeric entries\n\nBy default, LaTeX tables enclose all numeric entries in the ⁠⁠ command from the siunitx package. To prevent this behavior, or to enclose numbers in dollar signs (for LaTeX math mode), users can call:\noptions(modelsummary_format_numeric_latex = “plain”)\noptions(modelsummary_format_numeric_latex = “mathmode”)\nA similar option can be used to display numerical entries using MathJax in HTML tables:\noptions(modelsummary_format_numeric_html = “mathjax”)\n\n\nExamples\n\nlibrary(modelsummary)\n\nlibrary(modelsummary)\n\n# clean variable names (base R)\ndat &lt;- mtcars[, c(\"mpg\", \"hp\")]\ncolnames(dat) &lt;- c(\"Miles / Gallon\", \"Horse Power\")\ndatasummary_correlation(dat)\n\n\n\n\n\nMiles / Gallon\nHorse Power\n\n\n\n\nMiles / Gallon\n1\n.\n\n\nHorse Power\n−.78\n1\n\n\n\n\n\n\n# clean variable names (tidyverse)\nlibrary(tidyverse)\ndat &lt;- mtcars %&gt;%\n  select(`Miles / Gallon` = mpg,\n         `Horse Power` = hp)\ndatasummary_correlation(dat)\n\n\n\n\n\nMiles / Gallon\nHorse Power\n\n\n\n\nMiles / Gallon\n1\n.\n\n\nHorse Power\n−.78\n1\n\n\n\n\n\n\n# alternative methods\ndatasummary_correlation(dat, method = \"pearspear\")\n\n\n\n\n\nMiles / Gallon\nHorse Power\n\n\n\n\nMiles / Gallon\n1\n−.78\n\n\nHorse Power\n−.89\n1\n\n\n\n\n\n\n# custom function\ncor_fun &lt;- function(x) cor(x, method = \"kendall\")\ndatasummary_correlation(dat, method = cor_fun)\n\n\n\n\n\nMiles / Gallon\nHorse Power\n\n\n\n\nMiles / Gallon\n1.00\n−.74\n\n\nHorse Power\n−.74\n1.00\n\n\n\n\n\n\n# rename columns alphabetically and include a footnote for reference\nnote &lt;- sprintf(\"(%s) %s\", letters[1:ncol(dat)], colnames(dat))\nnote &lt;- paste(note, collapse = \"; \")\n\ncolnames(dat) &lt;- sprintf(\"(%s)\", letters[1:ncol(dat)])\n\ndatasummary_correlation(dat, notes = note)\n\n\n\n\n\n(a)\n(b)\n\n\n\n\n(a)\n1\n.\n\n\n(b)\n−.78\n1\n\n\n\n (a) Miles / Gallon; (b) Horse Power\n\n\n\n\n\n\n\n\n\n# `datasummary_correlation_format`: custom function with formatting\ndat &lt;- mtcars[, c(\"mpg\", \"hp\", \"disp\")]\n\ncor_fun &lt;- function(x) {\n  out &lt;- cor(x, method = \"kendall\")\n  datasummary_correlation_format(\n    out,\n    fmt = 2,\n    upper_triangle = \"x\",\n    diagonal = \".\")\n}\n\ndatasummary_correlation(dat, method = cor_fun)\n\n\n\n\n\nmpg\nhp\ndisp\n\n\n\n\nmpg\n.\nx\nx\n\n\nhp\n−.74\n.\nx\n\n\ndisp\n−.77\n.67\n.\n\n\n\n\n\n\n# use kableExtra and psych to color significant cells\nlibrary(psych)\nlibrary(kableExtra)\n\ndat &lt;- mtcars[, c(\"vs\", \"hp\", \"gear\")]\n\ncor_fun &lt;- function(dat) {\n  # compute correlations and format them\n  correlations &lt;- data.frame(cor(dat))\n  correlations &lt;- datasummary_correlation_format(correlations, fmt = 2)\n\n  # calculate pvalues using the `psych` package\n  pvalues &lt;- psych::corr.test(dat)$p\n\n  # use `kableExtra::cell_spec` to color significant cells\n  for (i in 1:nrow(correlations)) {\n    for (j in 1:ncol(correlations)) {\n      if (pvalues[i, j] &lt; 0.05 && i != j) {\n        correlations[i, j] &lt;- cell_spec(correlations[i, j], background = \"pink\")\n      }\n    }\n  }\n  return(correlations)\n}\n\n# The `escape=FALSE` is important here!\ndatasummary_correlation(dat, method = cor_fun, escape = FALSE)\n\n\n\n\n\nvs\nhp\ngear\n\n\n\n\nvs\n1.00\n−.72\n.21\n\n\nhp\n−.72\n1.00\n−.13\n\n\ngear\n.21\n−.13\n1.00"
  },
  {
    "objectID": "man/datasummary_crosstab.html",
    "href": "man/datasummary_crosstab.html",
    "title": "datasummary_crosstab",
    "section": "",
    "text": "Cross tabulations for categorical variables\n\nDescription\nConvenience function to tabulate counts, cell percentages, and row/column percentages for categorical variables. See the Details section for a description of the internal design. For more complex cross tabulations, use datasummary directly. See the Details and Examples sections below, and the vignettes on the modelsummary website:\n\n\nhttps://modelsummary.com/\n\n\nhttps://modelsummary.com/articles/datasummary.html\n\n\n\n\nUsage\ndatasummary_crosstab(\n  formula,\n  statistic = 1 ~ 1 + N + Percent(\"row\"),\n  data,\n  output = \"default\",\n  fmt = 1,\n  title = NULL,\n  notes = NULL,\n  align = NULL,\n  add_columns = NULL,\n  add_rows = NULL,\n  sparse_header = TRUE,\n  escape = TRUE,\n  ...\n)\n\n\n\nArguments\n\n\n\nformula\n\n\nA two-sided formula to describe the table: rows ~ columns, where rows and columns are variables in the data. Rows and columns may contain interactions, e.g., var1 * var2 ~ var3.\n\n\n\n\nstatistic\n\n\nA formula of the form 1 ~ 1 + N + Percent(“row”). The left-hand side may only be empty or contain a 1 to include row totals. The right-hand side may contain: 1 for column totals, N for counts, Percent() for cell percentages, Percent(“row”) for row percentages, Percent(“col”) for column percentages.\n\n\n\n\ndata\n\n\nA data.frame (or tibble)\n\n\n\n\noutput\n\n\nfilename or object type (character string)\n\n\nSupported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg\n\n\nSupported object types: \"default\", \"html\", \"markdown\", \"latex\", \"latex_tabular\", \"data.frame\", \"gt\", \"kableExtra\", \"huxtable\", \"flextable\", \"DT\", \"jupyter\". The \"modelsummary_list\" value produces a lightweight object which can be saved and fed back to the modelsummary function.\n\n\nThe \"default\" output format can be set to \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\nIf the user does not choose a default value, the packages listed above are tried in sequence.\n\n\nSession-specific configuration: options(“modelsummary_factory_default” = “gt”)\n\n\nPersistent configuration: config_modelsummary(output = “markdown”)\n\n\n\n\nWarning: Users should not supply a file name to the output argument if they intend to customize the table with external packages. See the ‘Details’ section.\n\n\nLaTeX compilation requires the booktabs and siunitx packages, but siunitx can be disabled or replaced with global options. See the ‘Details’ section.\n\n\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\n\n\nnotes\n\n\nlist or vector of notes to append to the bottom of the table.\n\n\n\n\nalign\n\n\nA string with a number of characters equal to the number of columns in the table (e.g., align = “lcc”). Valid characters: l, c, r, d.\n\n\n\"l\": left-aligned column\n\n\n\"c\": centered column\n\n\n\"r\": right-aligned column\n\n\n\"d\": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):\n\n\n⁠\n⁠\n\n\n⁠\n⁠\n\n\n⁠⁠\n\n\n\n\n\n\n\n\nadd_columns\n\n\na data.frame (or tibble) with the same number of rows as your main table.\n\n\n\n\nadd_rows\n\n\na data.frame (or tibble) with the same number of columns as your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the row positions. See Examples section below.\n\n\n\n\nsparse_header\n\n\nTRUE or FALSE. TRUE eliminates column headers which have a unique label across all columns, except for the row immediately above the data. FALSE keeps all headers. The order in which terms are entered in the formula determines the order in which headers appear. For example, x~mean*z will print the mean-related header above the z-related header.’\n\n\n\n\nescape\n\n\nboolean TRUE escapes or substitutes LaTeX/HTML characters which could prevent the file from compiling/displaying. This setting does not affect captions or notes.\n\n\n\n\n…\n\n\nall other arguments are passed through to the table-making functions kableExtra::kbl, gt::gt, DT::datatable, etc. depending on the output argument. This allows users to pass arguments directly to datasummary in order to affect the behavior of other functions behind the scenes.\n\n\n\n\n\nDetails\ndatasummary_crosstab is a wrapper around the datasummary function. This wrapper works by creating a customized formula and by feeding it to datasummary. The customized formula comes in two parts.\nFirst, we take a two-sided formula supplied by the formula argument. All variables of that formula are wrapped in a Factor() call to ensure that the variables are treated as categorical.\nSecond, the statistic argument gives a two-sided formula which specifies the statistics to include in the table. datasummary_crosstab modifies this formula automatically to include \"clean\" labels.\nFinally, the formula and statistic formulas are combined into a single formula which is fed directly to the datasummary function to produce the table.\nVariables in formula are automatically wrapped in Factor().\n\n\nGlobal Options\nThe behavior of modelsummary can be modified by setting global options. For example:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\nThe rest of this section describes each of the options above.\n\nModel labels: default column names\n\nThese global option changes the style of the default column headers:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\noptions(modelsummary_panel_labels = “roman”)\n\n\nThe supported styles are: \"model\", \"panel\", \"arabic\", \"letters\", \"roman\", \"(arabic)\", \"(letters)\", \"(roman)\"\"\nThe panel-specific option is only used when shape=“rbind”\n\nTable-making packages\n\nmodelsummary supports 4 table-making packages: kableExtra, gt, flextable, huxtable, and DT. Some of these packages have overlapping functionalities. For example, 3 of those packages can export to LaTeX. To change the default backend used for a specific file format, you can use the options function:\noptions(modelsummary_factory_html = ‘kableExtra’)\noptions(modelsummary_factory_latex = ‘gt’)\noptions(modelsummary_factory_word = ‘huxtable’)\noptions(modelsummary_factory_png = ‘gt’)\n\nTable themes\n\nChange the look of tables in an automated and replicable way, using the modelsummary theming functionality. See the vignette: https://modelsummary.com/articles/appearance.html\n\n\nmodelsummary_theme_gt\n\n\nmodelsummary_theme_kableExtra\n\n\nmodelsummary_theme_huxtable\n\n\nmodelsummary_theme_flextable\n\n\nmodelsummary_theme_dataframe\n\n\n\nModel extraction functions\n\nmodelsummary can use two sets of packages to extract information from statistical models: the easystats family (performance and parameters) and broom. By default, it uses easystats first and then falls back on broom in case of failure. You can change the order of priorities or include goodness-of-fit extracted by both packages by setting:\noptions(modelsummary_get = “broom”)\noptions(modelsummary_get = “easystats”)\noptions(modelsummary_get = “all”)\n\nFormatting numeric entries\n\nBy default, LaTeX tables enclose all numeric entries in the ⁠⁠ command from the siunitx package. To prevent this behavior, or to enclose numbers in dollar signs (for LaTeX math mode), users can call:\noptions(modelsummary_format_numeric_latex = “plain”)\noptions(modelsummary_format_numeric_latex = “mathmode”)\nA similar option can be used to display numerical entries using MathJax in HTML tables:\noptions(modelsummary_format_numeric_html = “mathjax”)\n\n\nExamples\n\nlibrary(modelsummary)\n\nlibrary(modelsummary)\n\n# crosstab of two variables, showing counts, row percentages, and row/column totals\ndatasummary_crosstab(cyl ~ gear, data = mtcars)\n\n\n\n\ncyl\n\n 3\n 4\n 5\nAll\n\n\n\n\n4\nN\n1\n8\n2\n11\n\n\n\n% row\n9.1\n72.7\n18.2\n100.0\n\n\n6\nN\n2\n4\n1\n7\n\n\n\n% row\n28.6\n57.1\n14.3\n100.0\n\n\n8\nN\n12\n0\n2\n14\n\n\n\n% row\n85.7\n0.0\n14.3\n100.0\n\n\nAll\nN\n15\n12\n5\n32\n\n\n\n% row\n46.9\n37.5\n15.6\n100.0\n\n\n\n\n\n\n# crosstab of two variables, showing counts only and no totals\ndatasummary_crosstab(cyl ~ gear, statistic = ~ N, data = mtcars)\n\n\n\n\ncyl\n\n 3\n 4\n 5\n\n\n\n\n4\nN\n1\n8\n2\n\n\n6\nN\n2\n4\n1\n\n\n8\nN\n12\n0\n2\n\n\n\n\n\n\n# crosstab of three variables\n  datasummary_crosstab(am * cyl ~ gear, data = mtcars)\n\n\n\n\nam\ncyl\n\n 3\n 4\n 5\nAll\n\n\n\n\n0\n4\nN\n1\n2\n0\n3\n\n\n\n\n% row\n33.3\n66.7\n0.0\n100.0\n\n\n\n6\nN\n2\n2\n0\n4\n\n\n\n\n% row\n50.0\n50.0\n0.0\n100.0\n\n\n\n8\nN\n12\n0\n0\n12\n\n\n\n\n% row\n100.0\n0.0\n0.0\n100.0\n\n\n1\n4\nN\n0\n6\n2\n8\n\n\n\n\n% row\n0.0\n75.0\n25.0\n100.0\n\n\n\n6\nN\n0\n2\n1\n3\n\n\n\n\n% row\n0.0\n66.7\n33.3\n100.0\n\n\n\n8\nN\n0\n0\n2\n2\n\n\n\n\n% row\n0.0\n0.0\n100.0\n100.0\n\n\n\nAll\nN\n15\n12\n5\n32\n\n\n\n\n% row\n46.9\n37.5\n15.6\n100.0\n\n\n\n\n\n\n# crosstab with two variables and column percentages \ndatasummary_crosstab(am ~ gear, statistic = ~ Percent(\"col\"), data = mtcars)\n\n\n\n\nam\n\n 3\n 4\n 5\n\n\n\n\n0\n% col\n100.0\n33.3\n0.0\n\n\n1\n% col\n0.0\n66.7\n100.0"
  },
  {
    "objectID": "man/datasummary_df.html",
    "href": "man/datasummary_df.html",
    "title": "datasummary_df",
    "section": "",
    "text": "Draw a table from a data.frame\n\nDescription\nDraw a table from a data.frame\n\n\nUsage\ndatasummary_df(\n  data,\n  output = \"default\",\n  fmt = 2,\n  align = NULL,\n  hrule = NULL,\n  title = NULL,\n  notes = NULL,\n  add_rows = NULL,\n  add_columns = NULL,\n  escape = TRUE,\n  ...\n)\n\n\n\nArguments\n\n\n\ndata\n\n\nA data.frame (or tibble)\n\n\n\n\noutput\n\n\nfilename or object type (character string)\n\n\nSupported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg\n\n\nSupported object types: \"default\", \"html\", \"markdown\", \"latex\", \"latex_tabular\", \"data.frame\", \"gt\", \"kableExtra\", \"huxtable\", \"flextable\", \"DT\", \"jupyter\". The \"modelsummary_list\" value produces a lightweight object which can be saved and fed back to the modelsummary function.\n\n\nThe \"default\" output format can be set to \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\nIf the user does not choose a default value, the packages listed above are tried in sequence.\n\n\nSession-specific configuration: options(“modelsummary_factory_default” = “gt”)\n\n\nPersistent configuration: config_modelsummary(output = “markdown”)\n\n\n\n\nWarning: Users should not supply a file name to the output argument if they intend to customize the table with external packages. See the ‘Details’ section.\n\n\nLaTeX compilation requires the booktabs and siunitx packages, but siunitx can be disabled or replaced with global options. See the ‘Details’ section.\n\n\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\n\n\n\n\nalign\n\n\nA string with a number of characters equal to the number of columns in the table (e.g., align = “lcc”). Valid characters: l, c, r, d.\n\n\n\"l\": left-aligned column\n\n\n\"c\": centered column\n\n\n\"r\": right-aligned column\n\n\n\"d\": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):\n\n\n⁠\n⁠\n\n\n⁠\n⁠\n\n\n⁠⁠\n\n\n\n\n\n\n\n\nhrule\n\n\nposition of horizontal rules (integer vector)\n\n\n\n\ntitle\n\n\nstring\n\n\n\n\nnotes\n\n\nlist or vector of notes to append to the bottom of the table.\n\n\n\n\nadd_rows\n\n\na data.frame (or tibble) with the same number of columns as your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the row positions. See Examples section below.\n\n\n\n\nadd_columns\n\n\na data.frame (or tibble) with the same number of rows as your main table.\n\n\n\n\nescape\n\n\nboolean TRUE escapes or substitutes LaTeX/HTML characters which could prevent the file from compiling/displaying. This setting does not affect captions or notes.\n\n\n\n\n…\n\n\nall other arguments are passed through to the table-making functions kableExtra::kbl, gt::gt, DT::datatable, etc. depending on the output argument. This allows users to pass arguments directly to datasummary in order to affect the behavior of other functions behind the scenes.\n\n\n\n\n\nReferences\nArel-Bundock V (2022). “modelsummary: Data and Model Summaries in R.” Journal of Statistical Software, 103(1), 1-23. .’"
  },
  {
    "objectID": "man/datasummary_skim.html",
    "href": "man/datasummary_skim.html",
    "title": "datasummary_skim",
    "section": "",
    "text": "Quick overview of numeric or categorical variables\n\nDescription\nThis function was inspired by the excellent skimr package for R. See the Details and Examples sections below, and the vignettes on the modelsummary website:\n\n\nhttps://modelsummary.com/\n\n\nhttps://modelsummary.com/articles/datasummary.html\n\n\n\n\nUsage\ndatasummary_skim(\n  data,\n  type = \"numeric\",\n  output = \"default\",\n  fmt = \"%.1f\",\n  histogram = TRUE,\n  title = NULL,\n  notes = NULL,\n  align = NULL,\n  escape = TRUE,\n  ...\n)\n\n\n\nArguments\n\n\n\ndata\n\n\nA data.frame (or tibble)\n\n\n\n\ntype\n\n\nof variables to summarize: \"numeric\" or \"categorical\" (character)\n\n\n\n\noutput\n\n\nfilename or object type (character string)\n\n\nSupported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg\n\n\nSupported object types: \"default\", \"html\", \"markdown\", \"latex\", \"latex_tabular\", \"data.frame\", \"gt\", \"kableExtra\", \"huxtable\", \"flextable\", \"DT\", \"jupyter\". The \"modelsummary_list\" value produces a lightweight object which can be saved and fed back to the modelsummary function.\n\n\nThe \"default\" output format can be set to \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\nIf the user does not choose a default value, the packages listed above are tried in sequence.\n\n\nSession-specific configuration: options(“modelsummary_factory_default” = “gt”)\n\n\nPersistent configuration: config_modelsummary(output = “markdown”)\n\n\n\n\nWarning: Users should not supply a file name to the output argument if they intend to customize the table with external packages. See the ‘Details’ section.\n\n\nLaTeX compilation requires the booktabs and siunitx packages, but siunitx can be disabled or replaced with global options. See the ‘Details’ section.\n\n\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\n\n\n\n\nhistogram\n\n\ninclude a histogram (TRUE/FALSE). Supported for:\n\n\ntype = \"numeric\"\n\n\noutput is \"html\", \"default\", \"jpg\", \"png\", or \"kableExtra\"\n\n\nPDF and HTML documents compiled via Rmarkdown or knitr\n\n\nSee the examples section below for an example of how to use datasummary to include histograms in other formats such as markdown.\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\n\n\nnotes\n\n\nlist or vector of notes to append to the bottom of the table.\n\n\n\n\nalign\n\n\nA string with a number of characters equal to the number of columns in the table (e.g., align = “lcc”). Valid characters: l, c, r, d.\n\n\n\"l\": left-aligned column\n\n\n\"c\": centered column\n\n\n\"r\": right-aligned column\n\n\n\"d\": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):\n\n\n⁠\n⁠\n\n\n⁠\n⁠\n\n\n⁠⁠\n\n\n\n\n\n\n\n\nescape\n\n\nboolean TRUE escapes or substitutes LaTeX/HTML characters which could prevent the file from compiling/displaying. This setting does not affect captions or notes.\n\n\n\n\n…\n\n\nall other arguments are passed through to the table-making functions kableExtra::kbl, gt::gt, DT::datatable, etc. depending on the output argument. This allows users to pass arguments directly to datasummary in order to affect the behavior of other functions behind the scenes.\n\n\n\n\n\nGlobal Options\nThe behavior of modelsummary can be modified by setting global options. For example:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\nThe rest of this section describes each of the options above.\n\nModel labels: default column names\n\nThese global option changes the style of the default column headers:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\noptions(modelsummary_panel_labels = “roman”)\n\n\nThe supported styles are: \"model\", \"panel\", \"arabic\", \"letters\", \"roman\", \"(arabic)\", \"(letters)\", \"(roman)\"\"\nThe panel-specific option is only used when shape=“rbind”\n\nTable-making packages\n\nmodelsummary supports 4 table-making packages: kableExtra, gt, flextable, huxtable, and DT. Some of these packages have overlapping functionalities. For example, 3 of those packages can export to LaTeX. To change the default backend used for a specific file format, you can use the options function:\noptions(modelsummary_factory_html = ‘kableExtra’)\noptions(modelsummary_factory_latex = ‘gt’)\noptions(modelsummary_factory_word = ‘huxtable’)\noptions(modelsummary_factory_png = ‘gt’)\n\nTable themes\n\nChange the look of tables in an automated and replicable way, using the modelsummary theming functionality. See the vignette: https://modelsummary.com/articles/appearance.html\n\n\nmodelsummary_theme_gt\n\n\nmodelsummary_theme_kableExtra\n\n\nmodelsummary_theme_huxtable\n\n\nmodelsummary_theme_flextable\n\n\nmodelsummary_theme_dataframe\n\n\n\nModel extraction functions\n\nmodelsummary can use two sets of packages to extract information from statistical models: the easystats family (performance and parameters) and broom. By default, it uses easystats first and then falls back on broom in case of failure. You can change the order of priorities or include goodness-of-fit extracted by both packages by setting:\noptions(modelsummary_get = “broom”)\noptions(modelsummary_get = “easystats”)\noptions(modelsummary_get = “all”)\n\nFormatting numeric entries\n\nBy default, LaTeX tables enclose all numeric entries in the ⁠⁠ command from the siunitx package. To prevent this behavior, or to enclose numbers in dollar signs (for LaTeX math mode), users can call:\noptions(modelsummary_format_numeric_latex = “plain”)\noptions(modelsummary_format_numeric_latex = “mathmode”)\nA similar option can be used to display numerical entries using MathJax in HTML tables:\noptions(modelsummary_format_numeric_html = “mathjax”)\n\n\nExamples\n\nlibrary(modelsummary)\n\ndat &lt;- mtcars\ndat$vs &lt;- as.logical(dat$vs)\ndat$cyl &lt;- as.factor(dat$cyl)\ndatasummary_skim(dat)\n\n\n\n\n\nUnique (#)\nMissing (%)\nMean\nSD\nMin\nMedian\nMax\n\n\n\n\n\nmpg\n25\n0\n20.1\n6.0\n10.4\n19.2\n33.9\n\n\n\ndisp\n27\n0\n230.7\n123.9\n71.1\n196.3\n472.0\n\n\n\nhp\n22\n0\n146.7\n68.6\n52.0\n123.0\n335.0\n\n\n\ndrat\n22\n0\n3.6\n0.5\n2.8\n3.7\n4.9\n\n\n\nwt\n29\n0\n3.2\n1.0\n1.5\n3.3\n5.4\n\n\n\nqsec\n30\n0\n17.8\n1.8\n14.5\n17.7\n22.9\n\n\n\nam\n2\n0\n0.4\n0.5\n0.0\n0.0\n1.0\n\n\n\ngear\n3\n0\n3.7\n0.7\n3.0\n4.0\n5.0\n\n\n\ncarb\n6\n0\n2.8\n1.6\n1.0\n2.0\n8.0\n\n\n\n\n\n\n\ndatasummary_skim(dat, \"categorical\")\n\n\n\n\n\n\nN\n%\n\n\n\n\ncyl\n4\n11\n34.4\n\n\n\n6\n7\n21.9\n\n\n\n8\n14\n43.8\n\n\nvs\nFALSE\n18\n56.2\n\n\n\nTRUE\n14\n43.8\n\n\n\n\n\n\n# You can use `datasummary` to produce a similar table in different formats.\n# Note that the `Histogram` function relies on unicode characters. These\n# characters will only display correctly in some operating systems, under some\n# locales, using some fonts. Displaying such histograms on Windows computers\n# is notoriously tricky. The `modelsummary` authors cannot provide support to\n# display these unicode histograms.\n\nf &lt;- All(mtcars) ~ Mean + SD + Min + Median + Max + Histogram\n# datasummary(f, mtcars, output=\"markdown\")"
  },
  {
    "objectID": "man/datasummary.html",
    "href": "man/datasummary.html",
    "title": "datasummary",
    "section": "",
    "text": "Summary tables using 2-sided formulae: crosstabs, frequencies, table 1s and more.\n\nDescription\ndatasummary can use any summary function which produces one numeric or character value per variable. The examples section of this documentation shows how to define custom summary functions.\nmodelsummary also supplies several shortcut summary functions which can be used in datasummary() formulas: Min, Max, Mean, Median, Var, SD, NPercent, NUnique, Ncol, P0, P25, P50, P75, P100.\nSee the Details and Examples sections below, and the vignettes on the modelsummary website:\n\n\nhttps://modelsummary.com/\n\n\nhttps://modelsummary.com/articles/datasummary.html\n\n\n\n\nUsage\ndatasummary(\n  formula,\n  data,\n  output = \"default\",\n  fmt = 2,\n  title = NULL,\n  notes = NULL,\n  align = NULL,\n  add_columns = NULL,\n  add_rows = NULL,\n  sparse_header = TRUE,\n  escape = TRUE,\n  ...\n)\n\n\n\nArguments\n\n\n\nformula\n\n\nA two-sided formula to describe the table: rows ~ columns. See the Examples section for a mini-tutorial and the Details section for more resources. Grouping/nesting variables can appear on both sides of the formula, but all summary functions must be on one side.\n\n\n\n\ndata\n\n\nA data.frame (or tibble)\n\n\n\n\noutput\n\n\nfilename or object type (character string)\n\n\nSupported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg\n\n\nSupported object types: \"default\", \"html\", \"markdown\", \"latex\", \"latex_tabular\", \"data.frame\", \"gt\", \"kableExtra\", \"huxtable\", \"flextable\", \"DT\", \"jupyter\". The \"modelsummary_list\" value produces a lightweight object which can be saved and fed back to the modelsummary function.\n\n\nThe \"default\" output format can be set to \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\nIf the user does not choose a default value, the packages listed above are tried in sequence.\n\n\nSession-specific configuration: options(“modelsummary_factory_default” = “gt”)\n\n\nPersistent configuration: config_modelsummary(output = “markdown”)\n\n\n\n\nWarning: Users should not supply a file name to the output argument if they intend to customize the table with external packages. See the ‘Details’ section.\n\n\nLaTeX compilation requires the booktabs and siunitx packages, but siunitx can be disabled or replaced with global options. See the ‘Details’ section.\n\n\n\n\n\n\nfmt\n\n\nhow to format numeric values: integer, user-supplied function, or modelsummary function.\n\n\nInteger: Number of decimal digits\n\n\nUser-supplied functions:\n\n\nAny function which accepts a numeric vector and returns a character vector of the same length.\n\n\n\n\nmodelsummary functions:\n\n\nfmt = fmt_significant(2): Two significant digits (at the term-level)\n\n\nfmt = fmt_sprintf(“%.3f”): See ?sprintf\n\n\nfmt = fmt_identity(): unformatted raw values\n\n\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\n\n\nnotes\n\n\nlist or vector of notes to append to the bottom of the table.\n\n\n\n\nalign\n\n\nA string with a number of characters equal to the number of columns in the table (e.g., align = “lcc”). Valid characters: l, c, r, d.\n\n\n\"l\": left-aligned column\n\n\n\"c\": centered column\n\n\n\"r\": right-aligned column\n\n\n\"d\": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):\n\n\n⁠\n⁠\n\n\n⁠\n⁠\n\n\n⁠⁠\n\n\n\n\n\n\n\n\nadd_columns\n\n\na data.frame (or tibble) with the same number of rows as your main table.\n\n\n\n\nadd_rows\n\n\na data.frame (or tibble) with the same number of columns as your main table. By default, rows are appended to the bottom of the table. You can define a \"position\" attribute of integers to set the row positions. See Examples section below.\n\n\n\n\nsparse_header\n\n\nTRUE or FALSE. TRUE eliminates column headers which have a unique label across all columns, except for the row immediately above the data. FALSE keeps all headers. The order in which terms are entered in the formula determines the order in which headers appear. For example, x~mean*z will print the mean-related header above the z-related header.’\n\n\n\n\nescape\n\n\nboolean TRUE escapes or substitutes LaTeX/HTML characters which could prevent the file from compiling/displaying. This setting does not affect captions or notes.\n\n\n\n\n…\n\n\nall other arguments are passed through to the table-making functions kableExtra::kbl, gt::gt, DT::datatable, etc. depending on the output argument. This allows users to pass arguments directly to datasummary in order to affect the behavior of other functions behind the scenes.\n\n\n\n\n\nDetails\nVisit the ‘modelsummary’ website for more usage examples: https://modelsummary.com\nThe ‘datasummary’ function is a thin wrapper around the ‘tabular’ function from the ‘tables’ package. More details about table-making formulas can be found in the ‘tables’ package documentation: ?tables::tabular\nHierarchical or \"nested\" column labels are only available for these output formats: kableExtra, gt, html, rtf, and LaTeX. When saving tables to other formats, nested labels will be combined to a \"flat\" header.\n\n\nGlobal Options\nThe behavior of modelsummary can be modified by setting global options. For example:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\nThe rest of this section describes each of the options above.\n\nModel labels: default column names\n\nThese global option changes the style of the default column headers:\n\n\noptions(modelsummary_model_labels = “roman”)\n\n\noptions(modelsummary_panel_labels = “roman”)\n\n\nThe supported styles are: \"model\", \"panel\", \"arabic\", \"letters\", \"roman\", \"(arabic)\", \"(letters)\", \"(roman)\"\"\nThe panel-specific option is only used when shape=“rbind”\n\nTable-making packages\n\nmodelsummary supports 4 table-making packages: kableExtra, gt, flextable, huxtable, and DT. Some of these packages have overlapping functionalities. For example, 3 of those packages can export to LaTeX. To change the default backend used for a specific file format, you can use the options function:\noptions(modelsummary_factory_html = ‘kableExtra’)\noptions(modelsummary_factory_latex = ‘gt’)\noptions(modelsummary_factory_word = ‘huxtable’)\noptions(modelsummary_factory_png = ‘gt’)\n\nTable themes\n\nChange the look of tables in an automated and replicable way, using the modelsummary theming functionality. See the vignette: https://modelsummary.com/articles/appearance.html\n\n\nmodelsummary_theme_gt\n\n\nmodelsummary_theme_kableExtra\n\n\nmodelsummary_theme_huxtable\n\n\nmodelsummary_theme_flextable\n\n\nmodelsummary_theme_dataframe\n\n\n\nModel extraction functions\n\nmodelsummary can use two sets of packages to extract information from statistical models: the easystats family (performance and parameters) and broom. By default, it uses easystats first and then falls back on broom in case of failure. You can change the order of priorities or include goodness-of-fit extracted by both packages by setting:\noptions(modelsummary_get = “broom”)\noptions(modelsummary_get = “easystats”)\noptions(modelsummary_get = “all”)\n\nFormatting numeric entries\n\nBy default, LaTeX tables enclose all numeric entries in the ⁠⁠ command from the siunitx package. To prevent this behavior, or to enclose numbers in dollar signs (for LaTeX math mode), users can call:\noptions(modelsummary_format_numeric_latex = “plain”)\noptions(modelsummary_format_numeric_latex = “mathmode”)\nA similar option can be used to display numerical entries using MathJax in HTML tables:\noptions(modelsummary_format_numeric_html = “mathjax”)\n\n\nExamples\n\nlibrary(modelsummary)\n\nlibrary(modelsummary)\n\n# The left-hand side of the formula describes rows, and the right-hand side\n# describes columns. This table uses the \"mpg\" variable as a row and the \"mean\"\n# function as a column:\n\ndatasummary(mpg ~ mean, data = mtcars)\n\n\n\n\n\nmean\n\n\n\n\nmpg\n20.09\n\n\n\n\n\n\n# This table uses the \"mean\" function as a row and the \"mpg\" variable as a column:\n\ndatasummary(mean ~ mpg, data = mtcars)\n\n\n\n\n\nmpg\n\n\n\n\nmean\n20.09\n\n\n\n\n\n\n# Display several variables or functions of the data using the \"+\"\n# concatenation operator. This table has 2 rows and 2 columns:\n\ndatasummary(hp + mpg ~ mean + sd, data = mtcars)\n\n\n\n\n\nmean\nsd\n\n\n\n\nhp\n146.69\n68.56\n\n\nmpg\n20.09\n6.03\n\n\n\n\n\n\n# Nest variables or statistics inside a \"factor\" variable using the \"*\" nesting\n# operator. This table shows the mean of \"hp\" and \"mpg\" for each value of\n# \"cyl\":\n\nmtcars$cyl &lt;- as.factor(mtcars$cyl)\ndatasummary(hp + mpg ~ cyl * mean, data = mtcars)\n\n\n\n\n\n 4\n 6\n 8\n\n\n\n\nhp\n82.64\n122.29\n209.21\n\n\nmpg\n26.66\n19.74\n15.10\n\n\n\n\n\n\n# If you don't want to convert your original data\n# to factors, you can use the 'Factor()'\n# function inside 'datasummary' to obtain an identical result:\n\ndatasummary(hp + mpg ~ Factor(cyl) * mean, data = mtcars)\n\n\n\n\n\n 4\n 6\n 8\n\n\n\n\nhp\n82.64\n122.29\n209.21\n\n\nmpg\n26.66\n19.74\n15.10\n\n\n\n\n\n\n# You can nest several variables or statistics inside a factor by using\n# parentheses. This table shows the mean and the standard deviation for each\n# subset of \"cyl\":\n\ndatasummary(hp + mpg ~ cyl * (mean + sd), data = mtcars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n6\n\n\n8\n\n\n\n\nmean\nsd\nmean\nsd\nmean\nsd\n\n\n\n\nhp\n82.64\n20.93\n122.29\n24.26\n209.21\n50.98\n\n\nmpg\n26.66\n4.51\n19.74\n1.45\n15.10\n2.56\n\n\n\n\n\n\n# Summarize all numeric variables with 'All()'\ndatasummary(All(mtcars) ~ mean + sd, data = mtcars)\n\n\n\n\n\nmean\nsd\n\n\n\n\nmpg\n20.09\n6.03\n\n\ndisp\n230.72\n123.94\n\n\nhp\n146.69\n68.56\n\n\ndrat\n3.60\n0.53\n\n\nwt\n3.22\n0.98\n\n\nqsec\n17.85\n1.79\n\n\nvs\n0.44\n0.50\n\n\nam\n0.41\n0.50\n\n\ngear\n3.69\n0.74\n\n\ncarb\n2.81\n1.62\n\n\n\n\n\n\n# Define custom summary statistics. Your custom function should accept a vector\n# of numeric values and return a single numeric or string value:\n\nminmax &lt;- function(x) sprintf(\"[%.2f, %.2f]\", min(x), max(x))\nmean_na &lt;- function(x) mean(x, na.rm = TRUE)\n\ndatasummary(hp + mpg ~ minmax + mean_na, data = mtcars)\n\n\n\n\n\nminmax\nmean_na\n\n\n\n\nhp\n[52.00, 335.00]\n146.69\n\n\nmpg\n[10.40, 33.90]\n20.09\n\n\n\n\n\n\n# To handle missing values, you can pass arguments to your functions using\n# '*Arguments()'\n\ndatasummary(hp + mpg ~ mean * Arguments(na.rm = TRUE), data = mtcars)\n\n\n\n\n\nmean\n\n\n\n\nhp\n146.69\n\n\nmpg\n20.09\n\n\n\n\n\n\n# For convenience, 'modelsummary' supplies several convenience functions\n# with the argument `na.rm=TRUE` by default: Mean, Median, Min, Max, SD, Var,\n# P0, P25, P50, P75, P100, NUnique, Histogram\n\n#datasummary(hp + mpg ~ Mean + SD + Histogram, data = mtcars)\n\n# These functions also accept a 'fmt' argument which allows you to\n# round/format the results\n\ndatasummary(hp + mpg ~ Mean * Arguments(fmt = \"%.3f\") + SD * Arguments(fmt = \"%.1f\"), data = mtcars)\n\n\n\n\n\nMean\nSD\n\n\n\n\nhp\n146.688\n68.6\n\n\nmpg\n20.091\n6.0\n\n\n\n\n\n\n# Save your tables to a variety of output formats:\nf &lt;- hp + mpg ~ Mean + SD\n#datasummary(f, data = mtcars, output = 'table.html')\n#datasummary(f, data = mtcars, output = 'table.tex')\n#datasummary(f, data = mtcars, output = 'table.md')\n#datasummary(f, data = mtcars, output = 'table.docx')\n#datasummary(f, data = mtcars, output = 'table.pptx')\n#datasummary(f, data = mtcars, output = 'table.jpg')\n#datasummary(f, data = mtcars, output = 'table.png')\n\n# Display human-readable code\n#datasummary(f, data = mtcars, output = 'html')\n#datasummary(f, data = mtcars, output = 'markdown')\n#datasummary(f, data = mtcars, output = 'latex')\n\n# Return a table object to customize using a table-making package\n#datasummary(f, data = mtcars, output = 'gt')\n#datasummary(f, data = mtcars, output = 'kableExtra')\n#datasummary(f, data = mtcars, output = 'flextable')\n#datasummary(f, data = mtcars, output = 'huxtable')\n\n# add_rows\nnew_rows &lt;- data.frame(a = 1:2, b = 2:3, c = 4:5)\nattr(new_rows, 'position') &lt;- c(1, 3)\ndatasummary(mpg + hp ~ mean + sd, data = mtcars, add_rows = new_rows)\n\n\n\n\n\nmean\nsd\n\n\n\n\n1.00\n2.00\n4.00\n\n\nmpg\n20.09\n6.03\n\n\n2.00\n3.00\n5.00\n\n\nhp\n146.69\n68.56"
  },
  {
    "objectID": "man/get_estimates.html",
    "href": "man/get_estimates.html",
    "title": "get_estimates",
    "section": "",
    "text": "Extract model estimates in a tidy format.\n\nDescription\nThis is a mostly internal function which could be useful to users who want a unified approach to extract results from a wide variety of models. For some models get_estimates attaches useful attributes to the output. You can access this information by calling the attributes function: attributes(get_estimates(model))\n\n\nUsage\nget_estimates(\n  model,\n  conf_level = 0.95,\n  vcov = NULL,\n  shape = NULL,\n  coef_rename = FALSE,\n  ...\n)\n\n\n\nArguments\n\n\n\nmodel\n\n\na single model object\n\n\n\n\nconf_level\n\n\nnumeric value between 0 and 1. confidence level to use for confidence intervals. Setting this argument to NULL does not extract confidence intervals, which can be faster for some models.\n\n\n\n\nvcov\n\n\nrobust standard errors and other manual statistics. The vcov argument accepts six types of input (see the ‘Details’ and ‘Examples’ sections below):\n\n\nNULL returns the default uncertainty estimates of the model object\n\n\nstring, vector, or (named) list of strings. \"iid\", \"classical\", and \"constant\" are aliases for NULL, which returns the model’s default uncertainty estimates. The strings \"HC\", \"HC0\", \"HC1\" (alias: \"stata\"), \"HC2\", \"HC3\" (alias: \"robust\"), \"HC4\", \"HC4m\", \"HC5\", \"HAC\", \"NeweyWest\", \"Andrews\", \"panel-corrected\", \"outer-product\", and \"weave\" use variance-covariance matrices computed using functions from the sandwich package, or equivalent method. The behavior of those functions can (and sometimes must) be altered by passing arguments to sandwich directly from modelsummary through the ellipsis (…), but it is safer to define your own custom functions as described in the next bullet.\n\n\nfunction or (named) list of functions which return variance-covariance matrices with row and column names equal to the names of your coefficient estimates (e.g., stats::vcov, sandwich::vcovHC, function(x) vcovPC(x, cluster=“country”)).\n\n\nformula or (named) list of formulas with the cluster variable(s) on the right-hand side (e.g., ~clusterid).\n\n\nnamed list of length(models) variance-covariance matrices with row and column names equal to the names of your coefficient estimates.\n\n\na named list of length(models) vectors with names equal to the names of your coefficient estimates. See ‘Examples’ section below. Warning: since this list of vectors can include arbitrary strings or numbers, modelsummary cannot automatically calculate p values. The stars argument may thus use incorrect significance thresholds when vcov is a list of vectors.\n\n\n\n\n\n\nshape\n\n\nNULL, formula, or string which determines the shape of a table.\n\n\nNULL: Default shape with terms in rows and models in columns.\n\n\nFormula: The left side determines what appears on rows, and the right side determines what appears on columns. The formula can include one or more group identifier(s) to display related terms together, which can be useful for models with multivariate outcomes or grouped coefficients (See examples section below). The group identifier(s) must be column names produced by: get_estimates(model). The group identifier(s) can be combined with the term identifier in a single column by using the colon to represent an interaction. If an incomplete formula is supplied (e.g., ~statistic), modelsummary tries to complete it automatically. Goodness-of-fit statistics are only appended to the bottom of the table when model is on the right hand side of the formula (i.e., columns). Potential shape values include:\n\n\nterm + statistic ~ model: default\n\n\nterm ~ model + statistic: statistics in separate columns\n\n\nmodel + statistic ~ term: models in rows and terms in columns\n\n\nterm + response + statistic ~ model: term and group id in separate columns\n\n\nterm : response + statistic ~ model: term and group id in a single column\n\n\nterm ~ response\n\n\n\n\nString: \"rbind\" or \"rcollapse\" to bind rows of two or more regression tables to create \"panels\" or \"stacks\" of regression models.\n\n\nthe models argument must be a (potentially named) nested list of models.\n\n\n\n\nUnnamed nested list with 2 panels: list(list(model1, model2), list(model3, model4))\n\n\nNamed nested list with 2 panels: list(“Panel A” = list(model1, model2), “Panel B” = list(model3, model4))\n\n\nNamed panels and named models: list(“Panel A” = list(“(I)” = model1, “(II)” = model2), “Panel B” = list(“(I)” = model3, “(II)” = model4))\n\n\n\n\n\"rbind\": Bind the rows of independent regression tables\n\n\n\"rcollapse\": Bind the rows of regression tables and create a panel at the bottom where we \"collapse\" goodness-of-fit statistics which are identical across models.\n\n\n\n\n\n\n\n\ncoef_rename\n\n\nlogical, named or unnamed character vector, or function\n\n\nLogical: TRUE renames variables based on the \"label\" attribute of each column. See the Example section below.\n\n\nUnnamed character vector of length equal to the number of coefficients in the final table, after coef_omit is applied.\n\n\nNamed character vector: Values refer to the variable names that will appear in the table. Names refer to the original term names stored in the model object. Ex: c(\"hp:mpg\"=\"hp X mpg\")\n\n\nFunction: Accepts a character vector of the model’s term names and returns a named vector like the one described above. The modelsummary package supplies a coef_rename() function which can do common cleaning tasks: modelsummary(model, coef_rename = coef_rename)\n\n\n\n\n\n\n…\n\n\nall other arguments are passed through to three functions. See the documentation of these functions for lists of available arguments.\n\n\nparameters::model_parameters extracts parameter estimates. Available arguments depend on model type, but include:\n\n\nstandardize, centrality, dispersion, test, ci_method, prior, diagnostic, rope_range, power, cluster, etc.\n\n\n\n\nperformance::model_performance extracts goodness-of-fit statistics. Available arguments depend on model type, but include:\n\n\nmetrics, estimator, etc.\n\n\n\n\nkableExtra::kbl or gt::gt draw tables, depending on the value of the output argument."
  },
  {
    "objectID": "man/get_gof.html",
    "href": "man/get_gof.html",
    "title": "get_gof",
    "section": "",
    "text": "Extract model gof A mostly internal function with some potential uses outside.\n\nDescription\nExtract model gof A mostly internal function with some potential uses outside.\n\n\nUsage\nget_gof(model, vcov_type = NULL, ...)\n\n\n\nArguments\n\n\n\nmodel\n\n\na single model object\n\n\n\n\nvcov_type\n\n\nstring vcov type to add at the bottom of the table\n\n\n\n\n…\n\n\nall other arguments are passed through to three functions. See the documentation of these functions for lists of available arguments.\n\n\nparameters::model_parameters extracts parameter estimates. Available arguments depend on model type, but include:\n\n\nstandardize, centrality, dispersion, test, ci_method, prior, diagnostic, rope_range, power, cluster, etc.\n\n\n\n\nperformance::model_performance extracts goodness-of-fit statistics. Available arguments depend on model type, but include:\n\n\nmetrics, estimator, etc.\n\n\n\n\nkableExtra::kbl or gt::gt draw tables, depending on the value of the output argument."
  },
  {
    "objectID": "man/coef_rename.html",
    "href": "man/coef_rename.html",
    "title": "coef_rename",
    "section": "",
    "text": "Rename model terms\n\nDescription\nA convenience function which can be passed to the coef_rename argument of the modelsummary function.\n\n\nUsage\ncoef_rename(\n  x,\n  factor = TRUE,\n  factor_name = TRUE,\n  backticks = TRUE,\n  titlecase = TRUE,\n  underscore = TRUE,\n  asis = TRUE\n)\n\n\n\nArguments\n\n\n\nx\n\n\ncharacter vector of term names to transform\n\n\n\n\nfactor\n\n\nboolean remove the \"factor()\" label\n\n\n\n\nfactor_name\n\n\nboolean remove the \"factor()\" label and the name of the variable\n\n\n\n\nbackticks\n\n\nboolean remove backticks\n\n\n\n\ntitlecase\n\n\nboolean convert to title case\n\n\n\n\nunderscore\n\n\nboolean replace underscores by spaces\n\n\n\n\nasis\n\n\nboolean remove the I from as-is formula calls\n\n\n\n\n\nExamples\n\nlibrary(modelsummary)\n\nlibrary(modelsummary)\ndat &lt;- mtcars\ndat$horse_power &lt;- dat$hp\nmod &lt;- lm(mpg ~ horse_power + factor(cyl), dat)\nmodelsummary(mod, coef_rename = coef_rename)\n\n\n\n\n\n (1)\n\n\n\n\n(Intercept)\n28.650\n\n\n\n(1.588)\n\n\nHorse Power\n−0.024\n\n\n\n(0.015)\n\n\n6\n−5.968\n\n\n\n(1.639)\n\n\n8\n−8.521\n\n\n\n(2.326)\n\n\nNum.Obs.\n32\n\n\nR2\n0.754\n\n\nR2 Adj.\n0.727\n\n\nAIC\n169.9\n\n\nBIC\n177.2\n\n\nLog.Lik.\n−79.948\n\n\nF\n28.585\n\n\nRMSE\n2.94"
  },
  {
    "objectID": "man/dvnames.html",
    "href": "man/dvnames.html",
    "title": "dvnames",
    "section": "",
    "text": "Title models with their dependent variables\n\nDescription\nA convenience function for use with a regression model or list of regression models. Returns a named list of models, where the names are the models’ respective dependent variables. Pass your list of models to dvnames before sending to modelsummary to automatically get dependent variable-titled columns.\n\n\nUsage\ndvnames(models, number = FALSE, strip = FALSE, fill = \"Model\")\n\n\n\nArguments\n\n\n\nmodels\n\n\nA regression model or list of regression models\n\n\n\n\nnumber\n\n\nShould the models be numbered (1), (2), etc., in addition to their dependent variable names?\n\n\n\n\nstrip\n\n\nboolean FALSE returns the dependent variable names as they appear in the model. TRUE returns the dependent variable names as they appear in the data, without transformations.\n\n\n\n\nfill\n\n\nIf insight::find_response() cannot find a response, the column title to use in its place. Set to ’ ’ to leave blank.\n\n\n\n\n\nExamples\n\nlibrary(modelsummary)\n\n\nm1 &lt;- lm(mpg ~ hp, data = mtcars)\nm2 &lt;- lm(mpg ~ hp + wt, data = mtcars)\n\n# Without dvnames, column names are (1) and (2)\nmodelsummary(list(m1, m2))\n\n\n\n\n\n (1)\n  (2)\n\n\n\n\n(Intercept)\n30.099\n37.227\n\n\n\n(1.634)\n(1.599)\n\n\nhp\n−0.068\n−0.032\n\n\n\n(0.010)\n(0.009)\n\n\nwt\n\n−3.878\n\n\n\n\n(0.633)\n\n\nNum.Obs.\n32\n32\n\n\nR2\n0.602\n0.827\n\n\nR2 Adj.\n0.589\n0.815\n\n\nAIC\n181.2\n156.7\n\n\nBIC\n185.6\n162.5\n\n\nLog.Lik.\n−87.619\n−74.326\n\n\nF\n45.460\n69.211\n\n\nRMSE\n3.74\n2.47\n\n\n\n\n\n\n# With dvnames, they are \"mpg\" and \"mpg\"\nmodelsummary(dvnames(list(m1,m2)))\n\n\n\n\n\nmpg\nmpg\n\n\n\n\n(Intercept)\n30.099\n37.227\n\n\n\n(1.634)\n(1.599)\n\n\nhp\n−0.068\n−0.032\n\n\n\n(0.010)\n(0.009)\n\n\nwt\n\n−3.878\n\n\n\n\n(0.633)\n\n\nNum.Obs.\n32\n32\n\n\nR2\n0.602\n0.827\n\n\nR2 Adj.\n0.589\n0.815\n\n\nAIC\n181.2\n156.7\n\n\nBIC\n185.6\n162.5\n\n\nLog.Lik.\n−87.619\n−74.326\n\n\nF\n45.460\n69.211\n\n\nRMSE\n3.74\n2.47"
  },
  {
    "objectID": "man/gof_map.html",
    "href": "man/gof_map.html",
    "title": "gof_map",
    "section": "",
    "text": "Data.frame used to clean up and format goodness-of-fit statistics\n\nDescription\nBy default, this data frame is passed to the ‘gof_map’ argument of the ‘modelsummary’ function. Users can modify this data frame to customize the list of statistics to display and their format. See example below.\n\n\nUsage\ngof_map\n\n\n\nFormat\ndata.frame with 4 columns of character data: raw, clean, fmt, omit\n\n\nExamples\n\nlibrary(modelsummary)\n\nif (identical(Sys.getenv(\"pkgdown\"),  \"true\")) {\n\nlibrary(modelsummary)\nmod &lt;- lm(wt ~ drat, data = mtcars)\ngm &lt;- modelsummary::gof_map\ngm$omit[gm$raw == 'deviance'] &lt;- FALSE\ngm$fmt[gm$raw == 'r.squared'] &lt;- \"%.5f\"\nmodelsummary(mod, gof_map = gm)\n}"
  },
  {
    "objectID": "man/fmt_decimal.html",
    "href": "man/fmt_decimal.html",
    "title": "fmt_decimal",
    "section": "",
    "text": "Rounding with decimal digits in the fmt argument\n\nDescription\nRounding with decimal digits in the fmt argument\n\n\nUsage\nfmt_decimal(digits = 3, pdigits = NULL, ...)\n\n\n\nArguments\n\n\n\ndigits\n\n\nNumber of decimal digits to keep, including trailing zeros.\n\n\n\n\npdigits\n\n\nNumber of decimal digits to keep for p values. If NULL, the value of digits is used.\n\n\n\n\n…\n\n\nAdditional arguments are passed to the format() function (e.g., big.marks, scientific). See ?format"
  },
  {
    "objectID": "man/fmt_sci.html",
    "href": "man/fmt_sci.html",
    "title": "fmt_sci",
    "section": "",
    "text": "Rounding using scientific notation\n\nDescription\nRounding using scientific notation\n\n\nUsage\nfmt_sci(digits = 3, ...)\n\n\n\nArguments\n\n\n\ndigits\n\n\na positive integer indicating how many significant digits are to be used for numeric and complex x.\n\n\n\n\n…\n\n\nadditional arguments passed to format()."
  },
  {
    "objectID": "man/fmt_significant.html",
    "href": "man/fmt_significant.html",
    "title": "fmt_significant",
    "section": "",
    "text": "Rounding with significant digits in the fmt argument\n\nDescription\nThe number of decimal digits to keep after the decimal is assessed\n\n\nUsage\nfmt_significant(digits = 3, ...)\n\n\n\nArguments\n\n\n\ndigits\n\n\nNumber of significant digits to keep.\n\n\n\n\n…\n\n\nAdditional arguments are passed to the format() function (e.g., big.marks, scientific). See ?format"
  },
  {
    "objectID": "man/fmt_sprintf.html",
    "href": "man/fmt_sprintf.html",
    "title": "fmt_sprintf",
    "section": "",
    "text": "Rounding with the sprintf() function in the fmt argument\n\nDescription\nRounding with the sprintf() function in the fmt argument\n\n\nUsage\nfmt_sprintf(fmt)\n\n\n\nArguments\n\n\n\nfmt\n\n\nA string to control sprintf(), such as “%.3f” to keep 3 decimal digits. See ?sprintf"
  },
  {
    "objectID": "man/fmt_statistic.html",
    "href": "man/fmt_statistic.html",
    "title": "fmt_statistic",
    "section": "",
    "text": "Rounding with decimal digits on a per-statistic basis in the fmt argument for modelsummary()\n\nDescription\nRounding with decimal digits on a per-statistic basis in the fmt argument for modelsummary()\n\n\nUsage\nfmt_statistic(..., default = 3)\n\n\n\nArguments\n\n\n\n…\n\n\nStatistic names and fmt value\n\n\n\n\ndefault\n\n\nNumber of decimal digits to keep for unspecified terms"
  },
  {
    "objectID": "man/fmt_term.html",
    "href": "man/fmt_term.html",
    "title": "fmt_term",
    "section": "",
    "text": "Rounding with decimal digits on a per-term basis in the fmt argument for modelsummary()\n\nDescription\nRounding with decimal digits on a per-term basis in the fmt argument for modelsummary()\n\n\nUsage\nfmt_term(..., default = 3)\n\n\n\nArguments\n\n\n\n…\n\n\nTerm names and fmt value\n\n\n\n\ndefault\n\n\nNumber of decimal digits to keep for unspecified terms"
  },
  {
    "objectID": "man/config_modelsummary.html",
    "href": "man/config_modelsummary.html",
    "title": "config_modelsummary",
    "section": "",
    "text": "Persistent user settings for the modelsummary package\n\nDescription\nPersistent user settings for the modelsummary package\n\n\nUsage\nconfig_modelsummary(\n  factory_default,\n  factory_latex,\n  factory_html,\n  factory_markdown,\n  reset = FALSE\n)\n\n\n\nArguments\n\n\n\nfactory_default\n\n\nDefault output format: \"kableExtra\", \"gt\", \"flextable\", \"huxtable\", \"DT\", or \"markdown\"\n\n\n\n\nfactory_latex\n\n\nName of package used to generate LaTeX output when output=“latex”.\n\n\n\n\nfactory_html\n\n\nName of package used to generate LaTeX output when output=“html”.\n\n\n\n\nfactory_markdown\n\n\nName of package used to generate LaTeX output when output=“markdown”.\n\n\n\n\nreset\n\n\nTRUE to return to default settings."
  },
  {
    "objectID": "man/update_modelsummary.html",
    "href": "man/update_modelsummary.html",
    "title": "update_modelsummary",
    "section": "",
    "text": "Update modelsummary and its dependencies\n\nDescription\nUpdate modelsummary and its dependencies to the latest R-Universe or CRAN versions. The R session needs to be restarted after install.\n\n\nUsage\nupdate_modelsummary(source = \"development\")\n\n\n\nArguments\n\n\n\nsource\n\n\none of two strings: \"development\" or \"cran\""
  },
  {
    "objectID": "NEWS.html#development",
    "href": "NEWS.html#development",
    "title": "News",
    "section": "Development",
    "text": "Development\n\nQuarto: md output format is recognized.\noptions(modelsummary_factory_default) is respected, even in qmd-&gt;md documents."
  },
  {
    "objectID": "NEWS.html#section",
    "href": "NEWS.html#section",
    "title": "News",
    "section": "1.4.3",
    "text": "1.4.3\nMisc:\n\nDuplicate values in shape groups are removed automatically for cleaner labels.\n“Title” line no longer indented in markdown tables. Thanks to Ryan Briggs for report #671.\n\nBugs:\n\nSmall p values were not displayed properly in HTML output using kableExtra. Issue #669."
  },
  {
    "objectID": "NEWS.html#section-1",
    "href": "NEWS.html#section-1",
    "title": "News",
    "section": "1.4.2",
    "text": "1.4.2\nNew:\n\nMinimal support for Typst output, with auto-detection in Quarto documents.\nstrip argument in dvnames.\ns.value statistic is now available whenever p.value is available. See Greenland (2019).\ndatasummary_skim() now includes histograms in gt tables.\n\nBugs:\n\nGOF term names get escaped in LaTeX. Thanks to @shreyasgm for reviving Issue #546.\nConflict with furrr generated errors for some models. Thanks to @sammo3182 for Issue #647."
  },
  {
    "objectID": "NEWS.html#section-2",
    "href": "NEWS.html#section-2",
    "title": "News",
    "section": "1.4.1",
    "text": "1.4.1\nNew:\n\nfmt_sci() can now be used in the fmt argument for rounding with scientific notation.\n\nBugs:\n\nGroup separators respect add_rows with shape=\"rbind\". Thanks to @lrose1 for Report #626.\nBad column with horizontal models in shape and grouped estimates. Thanks to @iago-pssjd for Report #631.\ncoef_rename=TRUE bug with grouped estimates. Thanks to @iago-pssjd for Report #631.\nUpstream issue #881 in parameters meant that vcov was no longer used for confidence intervals."
  },
  {
    "objectID": "NEWS.html#section-3",
    "href": "NEWS.html#section-3",
    "title": "News",
    "section": "1.4.0",
    "text": "1.4.0\n\nBuilt-in support for markdown tables.\nPackage no longer depends on kableExtra. Recommends an additional install for other formats.\nPersistent configuration of default output format: config_modelsummary(factory_default = \"gt\")\nshape = \"rcollapse\" and shape = \"rbind\"\nglance_custom() can drop GOF by assigning NA: https://stackoverflow.com/questions/75215355/assigning-different-coefficient-names-and-goodness-of-fit-statistics-to-differen\nWhen a statistic is not available, modelsummary prints an empty cell instead of returning an error.\n“\\label{tab:something}” works in title even when escape=TRUE\nMultiple fixest_multi objects supported.\noptions(modelsummary_future = FALSE) disables future parallelism.\n\nBug fixes:\n\nstatistic=NULL is now respected when shape=\"rbind\". Thanks to Panos Mavros for report #620.\nget_estimates() supports vcov string shortcuts and formulas. Thanks to @ethans-carl for report #605.\nQuarto and Rmarkdown documents include situnix in header automatically for decimal alignement with align=\"ddd\"\nescape is now respected by modelsummary with shape=\"rbind\". Thanks to @chickymonkeys for report #622."
  },
  {
    "objectID": "NEWS.html#section-4",
    "href": "NEWS.html#section-4",
    "title": "News",
    "section": "1.3.0",
    "text": "1.3.0\nBreaking change:\n\nThe default column label style in modelsummary() has changed from “Model 1” to “(1)”. The benefits are: labels are no longer in English by default; use less horizontal space; eliminate the “Model” redundancy. Unfortunately, this could break code in some edge cases where users rely on column names to manipulate tables. The old behavior can be restored by calling: options(modelsummary_model_labels=\"model\")\n\nNew features:\n\nshape=\"rbind\" to stack multiple regression tables and create “panels” with labelled groups of models.\nfmt: new helper functions for different formatting styles\n\nfmt = fmt_decimal(2): decimal digits\nfmt = fmt_decimal(digits = 2, pdigits = 4): decimal digits with p value-specific setting\nfmt = fmt_sprintf(\"%.3f\"): sprintf() decimal\nfmt = fmt_sprintf(\"%.3e\"): sprintf() scientific\nfmt = fmt_significant(3): significant digits\nfmt = fmt_statistic(\"estimate\" = 2, \"std.error\" = 3): statistic-specific formatting\nfmt = fmt_term(\"(Intercept)\" = 2, \"hp\" = 3): term-specific formatting\nfmt = fmt_identity(): raw values\n\nNew styles for default column labels in modelsummary, such as Roman Numerals or letters in parentheses.\n\nSet the style with a global option: options(modelsummary_model_labels = \"roman\")\nSupported styles: “model”, “arabic”, “letters”, “roman”, “(arabic)”, “(letters)”, “(roman)””\n\nmodelplot(draw = FALSE) now returns a p.value column. This allows conditional aesthetics (see the modelplot vignette).\nBetter integration with the marginaleffects package.\n\nBugs:\n\nSome fixest models returns useless “group.x” and “group.y” columns. Isse #591. Thanks to Adam Altmejd for the report."
  },
  {
    "objectID": "NEWS.html#section-5",
    "href": "NEWS.html#section-5",
    "title": "News",
    "section": "1.2.0",
    "text": "1.2.0\nBreaking change:\n\nWith the shape and output=\"dataframe\" arguments, there always used to be a group column. Now, this column has the same name as the variable in the shape formula (“response”, “component”, etc.).\n\nNew features:\n\nshape can include multiple groups.\ncoef_rename can be an unnamed vector of length equal to the number of terms in the final table, obtained after coef_map and coef_omit are applied and models are merged.\ncoef_omit accepts numeric indices. Positive values: coefficients to omit. Negative values: coefficients to keep.\ndatasummary_skim: Increased maximum number of variables to 250.\nQuarto notebooks compile to Word and Markdown automatically.\n\nBug fixes:\n\nOrder of notes preserved in some output format (Issue #577)"
  },
  {
    "objectID": "NEWS.html#section-6",
    "href": "NEWS.html#section-6",
    "title": "News",
    "section": "1.1.0",
    "text": "1.1.0\nBreaking change:\n\nRequires siunitx version 3.0.25 LaTeX package.\nThe title argument now respects the escape argument for all kableExtra output formats. This can break tables in which users manually escaped titles.\n\nNew features:\n\n“d” is accepted for decimal-alignment in the align argument for all output formats. modelsummary(mod, align = \"ld\")\nNew update_modelsummary() function makes it easy to install the dev versions of modelsummary and its dependencies (mostly useful for Vincent and people who report bugs).\nRounding: display at least one significant digit by default.\nAutomatic renaming of haven labels in modelsummary(), datasummary(), datasummary_skim()\nAllow output = \"filename.csv\"\nAllow output = \"filename.xlsx\"\nadd_columns argument supported in modelsummary()\ndatasummary_balance supports the stars argument.\nAllow stars and confidence intervals with align = \"d\" column.\n\nBug fixes:\n\nIn some locales, the HTML minus sign created problems in the output. We only use it in “known” locales.\nMany minor bug fixes"
  },
  {
    "objectID": "NEWS.html#section-7",
    "href": "NEWS.html#section-7",
    "title": "News",
    "section": "1.0.2",
    "text": "1.0.2\n\nMinor release to fix CRAN failure"
  },
  {
    "objectID": "NEWS.html#section-8",
    "href": "NEWS.html#section-8",
    "title": "News",
    "section": "1.0.1",
    "text": "1.0.1\n\nshape argument accepts interactions with the colon “:” character. This combines two columns into one, which can be useful to display terms and group names in a single column.\nParallelization using parallel::mclapply. See ?modelsummary\nmodelsummary no longer computes confidence intervals when not necessary, which can save some time. Also see: conf_level=NULL\nAdded log likelihood to GOF for lm and glm models.\nRemoved extraneous warnings\nBug fixes"
  },
  {
    "objectID": "NEWS.html#section-9",
    "href": "NEWS.html#section-9",
    "title": "News",
    "section": "1.0.0",
    "text": "1.0.0\nThis first major release accompanies the publication of an article in the Journal of Statistical Software:\nArel-Bundock, Vincent (2022). “modelsummary: Data and Model Summaries in R.” Journal of Statistical Software, 103(1), 1-23. doi:10.18637/jss.v103.i01 https://doi.org/10.18637/jss.v103.i01.’\nIf you like modelsummary, please cite the JSS article and tell your friends about it.\nMinor changes:\n\ngof_map=\"all\" includes all available statistics. gof_map=\"none\" excludes all statistics.\nBug fixes"
  },
  {
    "objectID": "NEWS.html#section-10",
    "href": "NEWS.html#section-10",
    "title": "News",
    "section": "0.11.1",
    "text": "0.11.1\n\nBetter printout for term names in mixed-effects models\n{brms} and {stanreg} models now extracted with diagnostic=NULL and test=NULL by default for speed."
  },
  {
    "objectID": "NEWS.html#section-11",
    "href": "NEWS.html#section-11",
    "title": "News",
    "section": "0.11.0",
    "text": "0.11.0\nBreaking changes:\n\nmodelsummary_wide is no longer available. Use the shape argument of modelsummary instead.\nmodelsummary now uses the easystats packages (performance and parameters) to extract estimates and goodness-of-fit statistics instead of broom. This can be reverted by setting a global option: options(modelsummary_get=\"broom\"). This change aims to (1) increase consistency across models, (2) improve the developers’ ability to push bug fixes upstream when necessary, and (3) improve support for mixed effects, bayesian, and GAM models. The two main drawbacks are: (a) The set of printed statistics may be slightly different from previous versions of modelsummary (b) The group identifiers used in the shape formula will also be different for certain models (e.g., in nnet::multinom, y.level becomes response).\n\nNew features:\n\nThe shape argument accepts a formula and can reshape information in myriad ways. Deprecates the group argument. Examples:\n\n~ statistic: statistics are shown horizontally in distinct columns.\nmodel ~ term: models in rows and terms in columns.\nterm + y.level + statistic ~ model: grouped coefficients for multivariate outcome in nnet::multinom\ny.level ~ model: partial match is the same as the previous formula\n\nFormat distinct statistics differently by passing a named list to fmt:\n\nmodelsummary(mod, fmt = list(estimate = 2, std.error = 1, rmse = 4))\n\nUse glue to apply functions to numeric values by setting fmt = NULL. Example:\n\nmodelsummary(model, fmt = NULL, estimate = \"{log(estimate)}\")\n\nUpdate for breaking changes after fixest 0.10.4\n\nBug fixes:\n\ngroup_map rename issue\nResidual standard error mistakenly labelled “RMSE” in lm models.\ndatasummary_skim output to jpg should now works\nescape fixes"
  },
  {
    "objectID": "NEWS.html#section-12",
    "href": "NEWS.html#section-12",
    "title": "News",
    "section": "0.10.0",
    "text": "0.10.0\n\nNew exponentiate argument for modelsummary() and modelplot()\ngof_map accepts a vector such as c(\"rmse\", \"nobs\", \"r.squared\")\nDrop rlang dependency\nBug fixes"
  },
  {
    "objectID": "NEWS.html#section-13",
    "href": "NEWS.html#section-13",
    "title": "News",
    "section": "0.9.6",
    "text": "0.9.6\ndatasummary_balance:\n\nAccepts ~ 1 as a formula to summarize all data.\n\nMisc:\n\ndocumentation improvements\nRMSE included by default in models of class lm"
  },
  {
    "objectID": "NEWS.html#section-14",
    "href": "NEWS.html#section-14",
    "title": "News",
    "section": "0.9.5",
    "text": "0.9.5\nmodelsummary:\n\nvcov strings like HC1 and Robust are now case-insensitive\ngof_map now accepts a data.frame or tibble with a fmt list-column which includes functions (see Examples in docs)\nR2 is no longer computed by default for bayesian and mixed effects models. An informative one-time warning is printed about the metrics argument.\n\ndatasummary_skim:\n\nHistograms now work in Jupyter\nBugfix: harmless error message is no longer printed\n\nkableExtra factory:\n\nThe col.names argument can now be passed to kableExtra::kbl through the … ellipsis.\n\nMisc:\n\nMany small improvements to the vignettes and docs\noutput = \"github_document\" is now supported"
  },
  {
    "objectID": "NEWS.html#section-15",
    "href": "NEWS.html#section-15",
    "title": "News",
    "section": "0.9.4",
    "text": "0.9.4\n\nBug fix: siunitx and rounding NA"
  },
  {
    "objectID": "NEWS.html#section-16",
    "href": "NEWS.html#section-16",
    "title": "News",
    "section": "0.9.3",
    "text": "0.9.3\nmodelsummary:\n\nF statistic takes into account vcov argument\nSupport group = group ~ model + term\n\ndatasummary_balance:\n\nWeighted means and standard deviations are now supported. Counts and percentages are not, but raise a warning.\n\nMisc:\n\nBugfix: rounding in LaTeX w/ siunitx and NaN entries.\noutput=‘jupyter’ no longer prints an extraneous TRUE to the notebook"
  },
  {
    "objectID": "NEWS.html#section-17",
    "href": "NEWS.html#section-17",
    "title": "News",
    "section": "0.9.2",
    "text": "0.9.2\nmodelsummary:\n\nImproved vcov argument handling for fixest models (#357 by @grantmcdermott)\nFix display of fixest::i() variables and interactions (#361 by @grantmcdermott)\nConsistent display of clustered SEs (#356, #363 and #366 by @grantmcdermott)\n\ndatasummary_correlation:\n\nadd_rows and add_columns arguments are now available here.\n\nMisc:\n\nGlobal options for output factories are renamed: modelsummary_factory_default, modelsummary_factory_html, etc.\nHot fix for change in R-devel behavior or intersect\n\nBug fixes:\n\ndatasummary_balance: escape variable names when escape=TRUE\nBlogdown LaTeX dependency bug when output is HTML"
  },
  {
    "objectID": "NEWS.html#section-18",
    "href": "NEWS.html#section-18",
    "title": "News",
    "section": "0.9.1",
    "text": "0.9.1\nBreaking change:\n\nSupport for dcolumn for dot-aligned columns is deprecated. Use “d” in the align argument instead.\n\nOther changes:\n\nLaTeX output: Numeric entries are wrapped in the \\num{} function from the siunitx package by default. This produces much nicer formatting. This can be disabled with a global option. See ?modelsummary\nThe align argument accepts a “d” column for dot-alignment using the siunitx LaTeX package: align=\"ldd\".\nHTML tables display proper minus signs.\nNew escape argument in most table-building functions.\nLaTeX output accepts the threeparttable=TRUE argument through ...\nNo more dependency on tidyr\n\nmodelsummary:\n\ngroup: The order of terms in the formula determines the order of rows/columns\n\nmodelsummary_wide:\n\nNote: This function will eventually be deprecated\nBugfix with statistic=NULL.\n\nmodelplot:\n\nPreserves order of models in the user-supplied list\n\ndatasummary_crosstab:\n\nstatistic=NULL produces a very basic crosstab\n\ndatasummary_crosstab:\n\nDefault alignment “lrrrrr” consistent with other datasummary_* functions"
  },
  {
    "objectID": "NEWS.html#section-19",
    "href": "NEWS.html#section-19",
    "title": "News",
    "section": "0.8.1",
    "text": "0.8.1\nmodelsummary:\n\nDisable stars footnote with options(\"modelsummary_stars_note\" = FALSE)\nlongtable=TRUE works for LaTeX output\nInteractions with “:” are no longer converted to “x” when coef_map or coef_rename are used.\ngroup = model ~ term + group is now supported.\n\ndatasummary_skim:\n\ndatasummary_skim(\"categorical\") keeps NA by default. Users can convert variables to factors before calling datasummary_skim to exclude NA.\n\nOther:\n\nImproved warnings for bad calls: modelsummary(model1, model2)\ngt titles use the new caption argument in the gt 0.3.0 function\nBug fix: Overaggressive tests for glue strings prevented functions inside {}"
  },
  {
    "objectID": "NEWS.html#section-20",
    "href": "NEWS.html#section-20",
    "title": "News",
    "section": "0.8.0",
    "text": "0.8.0\nBreaking change:\n\nThe default significance markers stars=TRUE have been updated to be consistent with the default output from base R (e.g., in summary.lm). The new significance thresholds are: “+” p &lt; 0.1, “” p &lt; 0.05, ”” p &lt; 0.01, ”” p &lt; 0.001\n\ndatasummary_crosstab:\n\nNew function to produce cross-tabulations\n\ndatasummary:\n\nN is smart enough to return either the number of elements in a subset or the number of non-missing observations in a variable\n\ndatasummary_balance:\n\nKeeps NAs in factor variables by default. Users can convert their variables with the factor() function to omit NAs automatically.\n\nmodelsummary:\n\nthemes can be set using global options (experimental)\nnew vcov options: “bootstrap”, “HAC”, “NeweyWest”, “Andrews”, “panel-corrected”, “weave”, “outer-product”\nA valid get_gof (glance) is now optional.\n… is pushed through to sandwich, which allows things like: modelsummary(model, vcov = \"bootstrap\", R = 1000, cluster = \"firm\")\n\nOther:\n\nJupyter notebook support via output=\"jupyter\"\nBug fixes"
  },
  {
    "objectID": "NEWS.html#section-21",
    "href": "NEWS.html#section-21",
    "title": "News",
    "section": "0.7.0",
    "text": "0.7.0\nmodelsummary:\n\nnew arguments for modelsummary: group and group_map for grouped parameters (e.g., outcome levels in multinomial logit or components of gamlss model).\ndvnames() makes it easy to get dependent variable column titles (thanks to @NickCH-K)\noutput=\"modelsummary_list\" to save a lightweight list-based representation of the table which can be saved and fed to modelsummary once more to get a full table.\nvcov adds a row to note the type of standard errors.\nmodelsummary accepts a single model with multiple vcovs.\nget_gof forwards … to model_performance\ncoef_map accepts unnamed vectors for easy subsetting\nfixest::fixest_multi support\noptions(modelsummary_get) to set the order of extraction functions to use under the hood (broom vs. easystats vs. all)\nmetrics argument of performance::model_performance is available via modelsummary’s … ellipsis to limit the GOF statistics in Bayesian models.\nusers can omit the stars legend note by using glue strings: estimate=\"{estimate}{stars}\"\noutput=“html” can use gt by setting options(modelsummary_factory_html=\"gt\")\n\ndatasummary_correlation:\n\npasses ... forward\nnew function: datasummary_correlation_format\ndatasummary_correlation’s method argument accepts functions and “pearspear” (thanks to @joachim-gassen)\n\ndatasummary:\n\ndatasummary functions and rounding accept …, big.mark, etc.\n\ndatasummary_skim:\n\nnow works with haven_labeled numeric\nfaster tables with bayesian models.\n\nBug fixes and lints"
  },
  {
    "objectID": "NEWS.html#section-22",
    "href": "NEWS.html#section-22",
    "title": "News",
    "section": "0.6.6",
    "text": "0.6.6\n\nnew output format: latex_tabular\ntidy_custom allows partial term matches\nmodelsummary(coef_rename) accepts functions\nnew function coef_rename for use in modelsummary(coef_rename=coef_rename)\nmodelplot accepts add_rows to add reference categories\ninformative error message when estimate or statistic is not available\nbug fixes"
  },
  {
    "objectID": "NEWS.html#section-23",
    "href": "NEWS.html#section-23",
    "title": "News",
    "section": "0.6.5",
    "text": "0.6.5\n\nstatistic_override becomes vcov\nvcov accepts shortcuts: “robust”, “stata”, “HC0”, etc.\nvcov accepts formulas for clustered SEs: ~group\nmodelsummary_wide has a new “stacking” argument\nhtml horizontal rule to separate estimates form gof\ngof_map accepts list of lists. only needs 3 columns.\nsupport officedown Rmd\nestimate accepts a vector for per model estimates\noptions(modelsummary_default) can be markdown, html, latex\nbug: passing arguments through …\nbug: stars and rounding"
  },
  {
    "objectID": "NEWS.html#section-24",
    "href": "NEWS.html#section-24",
    "title": "News",
    "section": "0.6.4",
    "text": "0.6.4\n\nglue format for estimate and statistic\neasystats support for model info extraction\ndeprecate statistic_vertical\ndeprecate extract_models. Use modelsummary(output=“dataframe”) instead.\nmodelplot pushes … through to modelsummary(output=“dataframe”)\ndatasummary_skim(type=“dataset”)\ngof_map omits by default\ndatasummary_balance uses row percentages\nstatistic_override does not require a list\nstatistic_override accepts a single model\nN function for well formatted N in datasummary\nBug fixes"
  },
  {
    "objectID": "NEWS.html#section-25",
    "href": "NEWS.html#section-25",
    "title": "News",
    "section": "0.6.3",
    "text": "0.6.3\n\nnew function: modelsummary_wide\ncoef_omit and gof_omit use grepl(perl=TRUE)\nfmt accepts integer, string or function and respects options(OutDec=“,”)\nalign argument for modelsummary\nalign is more liberal to accept dcolumn alignment\nglance_custom methods for lfe and fixest\nbug fixes"
  },
  {
    "objectID": "NEWS.html#section-26",
    "href": "NEWS.html#section-26",
    "title": "News",
    "section": "0.6.2",
    "text": "0.6.2\n\nnew argument: coef_rename\nnew function: datasummary_df\npreserve term order in modelsummary\nrefactor datasummary_balance\ndatasummary_skim uses svg histograms instead of unicode\nremoved 5 dependencies\npass … to kableExtra::kbl for more customization\ntest improvements\ninternal code style\nbug fixes"
  },
  {
    "objectID": "NEWS.html#section-27",
    "href": "NEWS.html#section-27",
    "title": "News",
    "section": "0.6.1",
    "text": "0.6.1\n\nbug fixes"
  },
  {
    "objectID": "NEWS.html#section-28",
    "href": "NEWS.html#section-28",
    "title": "News",
    "section": "0.6.0",
    "text": "0.6.0\n\ndefault HTML output factory is now kableExtra\ninteraction “:” gsubbed by “0d7”\ndependencies: removed 1 depends, 3 imports, and 3 suggests\nword_document knitr works out-of-the-box\nbug fixes"
  },
  {
    "objectID": "NEWS.html#section-29",
    "href": "NEWS.html#section-29",
    "title": "News",
    "section": "0.5.1",
    "text": "0.5.1\n\nglance_custom.fixest ships with modelsummary"
  },
  {
    "objectID": "NEWS.html#section-30",
    "href": "NEWS.html#section-30",
    "title": "News",
    "section": "0.5.0",
    "text": "0.5.0\n\ndatasummary\ndatasummary_skim\ndatasummary_balance\ndatasummary_correlation\nmodelplot\nallow duplicate model names\nbug: can’t use coef_map with multiple statistics (thanks @sbw78)\nbug: wrong number of stars w/ statistic=‘p.value’ (thanks @torfason)\noutput=‘data.frame’. extract is no longer documented."
  },
  {
    "objectID": "NEWS.html#section-31",
    "href": "NEWS.html#section-31",
    "title": "News",
    "section": "0.4.1",
    "text": "0.4.1\n\nadd_rows now accepts a data.frame with “position” and “section” columns\nadd_rows_location is deprecated\nbug in sanity_output prevented overwriting files"
  },
  {
    "objectID": "NEWS.html#section-32",
    "href": "NEWS.html#section-32",
    "title": "News",
    "section": "0.4.0",
    "text": "0.4.0\n\nhuxtable support\nflextable support\nestimate argument\nfixest tidiers\nwebsite and vignette improvements\ngof_map additions\nglance_custom\ntidy_custom"
  },
  {
    "objectID": "NEWS.html#section-33",
    "href": "NEWS.html#section-33",
    "title": "News",
    "section": "0.3.0",
    "text": "0.3.0\n\nOut-of-the-box Rmarkdown compilation to HTML, PDF, RTF\nkableExtra output format for LaTeX and Markdown\nSupport for threeparttable, colors, and many other LaTeX options\nDeprecated arguments: filename, subtitle\nDeprecated functions: clean_latex, knit_latex\npkgdown website and doc improvements\nmitools tidiers\nNew tests"
  },
  {
    "objectID": "NEWS.html#section-34",
    "href": "NEWS.html#section-34",
    "title": "News",
    "section": "0.2.1",
    "text": "0.2.1\n\nConvenience function to render markdown in row/column labels\nbug: breakage when all GOF were omitted\nClean up manual with @keywords internal\nbug: tidyr import"
  },
  {
    "objectID": "NEWS.html#section-35",
    "href": "NEWS.html#section-35",
    "title": "News",
    "section": "0.2.0",
    "text": "0.2.0\n\ngt is now available on CRAN\nnew latex_env argument for knit_latex and clean_latex\nbug when all gof omitted\nbug in statistic_override with functions\nbug caused by upstream changes in tab_style\nbug caused by upstream changes in filename=‘rtf’\nAllow multiple rows of uncertainty estimates per coefficient\nPreserve add_rows order\nDisplay uncertainty estimates next to the coefficient with statistic_vertical = FALSE\nBetter clean_latex function\nCan display R2 and confidence intervals for mice-imputed lm-models\nInternal functions have @keywords internal to avoid inclusion in docs\nStatistic override accepts pre-formatted character vectors"
  },
  {
    "objectID": "NEWS.html#section-36",
    "href": "NEWS.html#section-36",
    "title": "News",
    "section": "0.1.0",
    "text": "0.1.0\n\nInitial release (gt still needs to be installed from github)"
  },
  {
    "objectID": "LICENSE.html#gnu-general-public-license",
    "href": "LICENSE.html#gnu-general-public-license",
    "title": "License",
    "section": "GNU General Public License",
    "text": "GNU General Public License\nVersion 3, 29 June 2007\nCopyright © 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed."
  },
  {
    "objectID": "LICENSE.html#preamble",
    "href": "LICENSE.html#preamble",
    "title": "License",
    "section": "Preamble",
    "text": "Preamble\nThe GNU General Public License is a free, copyleft license for software and other kinds of works.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\nFor the developers’ and authors’ protection, the GPL clearly explains that there is no warranty for this free software. For both users’ and authors’ sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users’ freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\nThe precise terms and conditions for copying, distribution and modification follow."
  },
  {
    "objectID": "LICENSE.html#terms-and-conditions",
    "href": "LICENSE.html#terms-and-conditions",
    "title": "License",
    "section": "Terms and Conditions",
    "text": "Terms and Conditions\n\n0. Definitions\n“This License” refers to version 3 of the GNU General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based on the Program.\nTo “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n\n1. Source Code\nThe “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.\nA “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work’s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.\n\n\n2. Basic Permissions\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n\n3. Protecting Users’ Legal Rights From Anti-Circumvention Law\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work’s users, your or third parties’ legal rights to forbid circumvention of technological measures.\n\n\n4. Conveying Verbatim Copies\nYou may convey verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n\n5. Conveying Modified Source Versions\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified it, and giving a relevant date.\nb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to “keep intact all notices”.\nc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation’s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n\n6. Conveying Non-Source Forms\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\na) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\nd) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, “normally used” refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n\n7. Additional Terms\n“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or authors of the material; or\ne) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n\n8. Termination\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n\n9. Acceptance Not Required for Having Copies\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n\n10. Automatic Licensing of Downstream Recipients\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party’s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n\n11. Patents\nA “contributor” is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor’s “contributor version”.\nA contributor’s “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, “control” includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor’s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To “grant” such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. “Knowingly relying” means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient’s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is “discriminatory” if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n\n12. No Surrender of Others’ Freedom\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n\n13. Use with the GNU Affero General Public License\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.\n\n\n14. Revised Versions of this License\nThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n\n15. Disclaimer of Warranty\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n16. Limitation of Liability\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\n17. Interpretation of Sections 15 and 16\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS"
  },
  {
    "objectID": "LICENSE.html#how-to-apply-these-terms-to-your-new-programs",
    "href": "LICENSE.html#how-to-apply-these-terms-to-your-new-programs",
    "title": "License",
    "section": "How to Apply These Terms to Your New Programs",
    "text": "How to Apply These Terms to Your New Programs\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.\n&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) 2019 Vincent Arel-Bundock\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\nAlso add information on how to contact you by electronic and paper mail.\nIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\nmodelsummary Copyright (C) 2019 Vincent Arel-Bundock\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\nThe hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program’s commands might be different; for a GUI interface, you would use an “about box”.\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a “copyright disclaimer” for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.\nThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;."
  },
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "To cite modelsummary in publications use:\n\n  Arel-Bundock V (2022). “modelsummary: Data and Model Summaries in R.”\n  _Journal of Statistical Software_, *103*(1), 1-23.\n  doi:10.18637/jss.v103.i01 &lt;https://doi.org/10.18637/jss.v103.i01&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {{modelsummary}: Data and Model Summaries in {R}},\n    author = {Vincent Arel-Bundock},\n    journal = {Journal of Statistical Software},\n    year = {2022},\n    volume = {103},\n    number = {1},\n    pages = {1--23},\n    doi = {10.18637/jss.v103.i01},\n  }"
  }
]