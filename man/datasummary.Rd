% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datasummary.R
\name{datasummary}
\alias{datasummary}
\title{Summary tables using 2-sided formulae: crosstabs, frequencies, table
1s and more.}
\usage{
datasummary(
  formula,
  data,
  output = "default",
  fmt = 2,
  title = NULL,
  notes = NULL,
  align = NULL,
  add_columns = NULL,
  add_rows = NULL,
  sparse_header = TRUE,
  escape = TRUE,
  ...
)
}
\arguments{
\item{formula}{A two-sided formula to describe the table: rows ~ columns.
See the Examples section for a mini-tutorial and the Details section for
more resources. Grouping/nesting variables can appear on both sides of the
formula, but all summary functions must be on one side.}

\item{data}{A data.frame (or tibble)}

\item{output}{filename or object type (character string)
\itemize{
\item Supported filename extensions: .docx, .html, .tex, .md, .txt, .csv, .xlsx, .png, .jpg
\item Supported object types: "default", "html", "markdown", "latex", "latex_tabular", "data.frame", "gt", "kableExtra", "huxtable", "flextable", "DT", "jupyter". The "modelsummary_list" value produces a lightweight object which can be saved and fed back to the \code{modelsummary} function.
\item The "default" output format can be set to "kableExtra", "gt", "flextable", "huxtable", "DT", or "markdown"
\itemize{
\item If the user does not choose a default value, the packages listed above are tried in sequence.
\item Session-specific configuration: \code{options("modelsummary_factory_default" = "gt")}
\item Persistent configuration: \code{modelsummary_config(output = "markdown")}
}
\item Warning: Users should not supply a file name to the \code{output} argument if they intend to customize the table with external packages. See the 'Details' section.
\item LaTeX compilation requires the \code{booktabs} and \code{siunitx} packages, but \code{siunitx} can be disabled or replaced with global options. See the 'Details' section.
}}

\item{fmt}{how to format numeric values: integer, user-supplied function, or \code{modelsummary} function.
\itemize{
\item Integer: Number of decimal digits
\item User-supplied functions:
\itemize{
\item Any function which accepts a numeric vector and returns a character vector of the same length.
}
\item \code{modelsummary} functions:
\itemize{
\item \code{fmt = fmt_significant(2)}: Two significant digits (at the term-level)
\item \code{fmt = fmt_sprintf("\%.3f")}: See \code{?sprintf}
\item \code{fmt = fmt_identity()}: unformatted raw values
}
}}

\item{title}{string}

\item{notes}{list or vector of notes to append to the bottom of the table.}

\item{align}{A string with a number of characters equal to the number of columns in
the table (e.g., \code{align = "lcc"}).  Valid characters: l, c, r, d.
\itemize{
\item "l": left-aligned column
\item "c": centered column
\item "r": right-aligned column
\item "d": dot-aligned column. For LaTeX/PDF output, this option requires at least version 3.0.25 of the siunitx LaTeX package. These commands must appear in the LaTeX preamble (they are added automatically when compiling Rmarkdown documents to PDF):
\itemize{
\item \verb{\\usepackage\{booktabs\}}
\item \verb{\\usepackage\{siunitx\}}
\item \verb{\\newcolumntype\{d\}\{S[ input-open-uncertainty=, input-close-uncertainty=, parse-numbers = false, table-align-text-pre=false, table-align-text-post=false ]\}}
}
}}

\item{add_columns}{a data.frame (or tibble) with the same number of rows as
your main table.}

\item{add_rows}{a data.frame (or tibble) with the same number of columns as
your main table. By default, rows are appended to the bottom of the table.
You can define a "position" attribute of integers to set the row positions.
See Examples section below.}

\item{sparse_header}{TRUE or FALSE. TRUE eliminates column headers which
have a unique label across all columns, except for the row immediately above
the data. FALSE keeps all headers. The order in which terms are entered in
the formula determines the order in which headers appear. For example,
\code{x~mean*z} will print the \code{mean}-related header above the \code{z}-related
header.`}

\item{escape}{boolean TRUE escapes or substitutes LaTeX/HTML characters which could
prevent the file from compiling/displaying. This setting does not affect captions or notes.}

\item{...}{all other arguments are passed through to the table-making
functions \link[kableExtra:kbl]{kableExtra::kbl}, \link[gt:gt]{gt::gt}, \link[DT:datatable]{DT::datatable}, etc. depending on the \code{output} argument.
This allows users to pass arguments directly to \code{datasummary} in order to
affect the behavior of other functions behind the scenes.}
}
\description{
\code{datasummary} can use any summary function which produces one numeric or
character value per variable. The examples section of this documentation
shows how to define custom summary functions.

\code{modelsummary} also supplies several shortcut summary functions which can be used in \code{datasummary()} formulas: Min, Max, Mean, Median, Var, SD, NPercent, NUnique, Ncol, P0, P25, P50, P75, P100.

See the Details and Examples sections below, and the vignettes on the \code{modelsummary} website:
\itemize{
\item https://vincentarelbundock.github.io/modelsummary/
\item https://vincentarelbundock.github.io/modelsummary/articles/datasummary.html
}
}
\details{
Visit the 'modelsummary' website for more usage examples:
https://vincentarelbundock.github.io/modelsummary

The 'datasummary' function is a thin wrapper around the 'tabular' function
from the 'tables' package. More details about table-making formulas can be
found in the 'tables' package documentation: ?tables::tabular

Hierarchical or "nested" column labels are only available for these output
formats: kableExtra, gt, html, rtf, and LaTeX. When saving tables to other
formats, nested labels will be combined to a "flat" header.
}
\section{Global Options}{


The behavior of \code{modelsummary} can be modified by setting global options. For example:
\itemize{
\item \code{options(modelsummary_model_labels = "roman")}
}

The rest of this section describes each of the options above.
\subsection{Model labels: default column names}{

These global option changes the style of the default column headers:
\itemize{
\item \code{options(modelsummary_model_labels = "roman")}
\item \code{options(modelsummary_panel_labels = "roman")}
}

The supported styles are: "model", "panel", "arabic", "letters", "roman", "(arabic)", "(letters)", "(roman)""

The panel-specific option is only used when \code{shape="rbind"}
}

\subsection{Table-making packages}{

\code{modelsummary} supports 4 table-making packages: \code{kableExtra}, \code{gt},
\code{flextable}, \code{huxtable}, and \code{DT}. Some of these packages have overlapping
functionalities. For example, 3 of those packages can export to LaTeX. To
change the default backend used for a specific file format, you can use
the \code{options} function:

\code{options(modelsummary_factory_html = 'kableExtra')}

\code{options(modelsummary_factory_latex = 'gt')}

\code{options(modelsummary_factory_word = 'huxtable')}

\code{options(modelsummary_factory_png = 'gt')}
}

\subsection{Table themes}{

Change the look of tables in an automated and replicable way, using the \code{modelsummary} theming functionality. See the vignette: https://vincentarelbundock.github.io/modelsummary/articles/appearance.html
\itemize{
\item \code{modelsummary_theme_gt}
\item \code{modelsummary_theme_kableExtra}
\item \code{modelsummary_theme_huxtable}
\item \code{modelsummary_theme_flextable}
\item \code{modelsummary_theme_dataframe}
}
}

\subsection{Model extraction functions}{

\code{modelsummary} can use two sets of packages to extract information from
statistical models: the \code{easystats} family (\code{performance} and \code{parameters})
and \code{broom}. By default, it uses \code{easystats} first and then falls back on
\code{broom} in case of failure. You can change the order of priorities or include
goodness-of-fit extracted by \emph{both} packages by setting:

\code{options(modelsummary_get = "broom")}

\code{options(modelsummary_get = "easystats")}

\code{options(modelsummary_get = "all")}
}

\subsection{Formatting numeric entries}{

By default, LaTeX tables enclose all numeric entries in the \verb{\\num\{\}} command
from the siunitx package. To prevent this behavior, or to enclose numbers
in dollar signs (for LaTeX math mode), users can call:

\code{options(modelsummary_format_numeric_latex = "plain")}

\code{options(modelsummary_format_numeric_latex = "mathmode")}

A similar option can be used to display numerical entries using MathJax in
HTML tables:

\code{options(modelsummary_format_numeric_html = "mathjax")}
}
}

\section{Examples}{


\if{html}{\out{<div class="sourceCode r">}}\preformatted{library(modelsummary)

# The left-hand side of the formula describes rows, and the right-hand side
# describes columns. This table uses the "mpg" variable as a row and the "mean"
# function as a column:

datasummary(mpg ~ mean, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> mean </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 20.09 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# This table uses the "mean" function as a row and the "mpg" variable as a column:

datasummary(mean ~ mpg, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> mpg </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> mean </td>
   <td style="text-align:right;"> 20.09 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# Display several variables or functions of the data using the "+"
# concatenation operator. This table has 2 rows and 2 columns:

datasummary(hp + mpg ~ mean + sd, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> mean </th>
   <th style="text-align:right;"> sd </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 146.69 </td>
   <td style="text-align:right;"> 68.56 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 20.09 </td>
   <td style="text-align:right;"> 6.03 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# Nest variables or statistics inside a "factor" variable using the "*" nesting
# operator. This table shows the mean of "hp" and "mpg" for each value of
# "cyl":

mtcars$cyl <- as.factor(mtcars$cyl)
datasummary(hp + mpg ~ cyl * mean, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;">  4 </th>
   <th style="text-align:right;">  6 </th>
   <th style="text-align:right;">  8 </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 82.64 </td>
   <td style="text-align:right;"> 122.29 </td>
   <td style="text-align:right;"> 209.21 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 26.66 </td>
   <td style="text-align:right;"> 19.74 </td>
   <td style="text-align:right;"> 15.10 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# If you don't want to convert your original data
# to factors, you can use the 'Factor()'
# function inside 'datasummary' to obtain an identical result:

datasummary(hp + mpg ~ Factor(cyl) * mean, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;">  4 </th>
   <th style="text-align:right;">  6 </th>
   <th style="text-align:right;">  8 </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 82.64 </td>
   <td style="text-align:right;"> 122.29 </td>
   <td style="text-align:right;"> 209.21 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 26.66 </td>
   <td style="text-align:right;"> 19.74 </td>
   <td style="text-align:right;"> 15.10 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# You can nest several variables or statistics inside a factor by using
# parentheses. This table shows the mean and the standard deviation for each
# subset of "cyl":

datasummary(hp + mpg ~ cyl * (mean + sd), data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
<tr>
<th style="empty-cells: hide;border-bottom:hidden;" colspan="1"></th>
<th style="border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; " colspan="2"><div style="border-bottom: 1px solid #ddd; padding-bottom: 5px; ">4</div></th>
<th style="border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; " colspan="2"><div style="border-bottom: 1px solid #ddd; padding-bottom: 5px; ">6</div></th>
<th style="border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; " colspan="2"><div style="border-bottom: 1px solid #ddd; padding-bottom: 5px; ">8</div></th>
</tr>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> mean </th>
   <th style="text-align:right;"> sd </th>
   <th style="text-align:right;"> mean </th>
   <th style="text-align:right;"> sd </th>
   <th style="text-align:right;"> mean </th>
   <th style="text-align:right;"> sd </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 82.64 </td>
   <td style="text-align:right;"> 20.93 </td>
   <td style="text-align:right;"> 122.29 </td>
   <td style="text-align:right;"> 24.26 </td>
   <td style="text-align:right;"> 209.21 </td>
   <td style="text-align:right;"> 50.98 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 26.66 </td>
   <td style="text-align:right;"> 4.51 </td>
   <td style="text-align:right;"> 19.74 </td>
   <td style="text-align:right;"> 1.45 </td>
   <td style="text-align:right;"> 15.10 </td>
   <td style="text-align:right;"> 2.56 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# Summarize all numeric variables with 'All()'
datasummary(All(mtcars) ~ mean + sd, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> mean </th>
   <th style="text-align:right;"> sd </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 20.09 </td>
   <td style="text-align:right;"> 6.03 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> disp </td>
   <td style="text-align:right;"> 230.72 </td>
   <td style="text-align:right;"> 123.94 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 146.69 </td>
   <td style="text-align:right;"> 68.56 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> drat </td>
   <td style="text-align:right;"> 3.60 </td>
   <td style="text-align:right;"> 0.53 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> wt </td>
   <td style="text-align:right;"> 3.22 </td>
   <td style="text-align:right;"> 0.98 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> qsec </td>
   <td style="text-align:right;"> 17.85 </td>
   <td style="text-align:right;"> 1.79 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> vs </td>
   <td style="text-align:right;"> 0.44 </td>
   <td style="text-align:right;"> 0.50 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> am </td>
   <td style="text-align:right;"> 0.41 </td>
   <td style="text-align:right;"> 0.50 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> gear </td>
   <td style="text-align:right;"> 3.69 </td>
   <td style="text-align:right;"> 0.74 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> carb </td>
   <td style="text-align:right;"> 2.81 </td>
   <td style="text-align:right;"> 1.62 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# Define custom summary statistics. Your custom function should accept a vector
# of numeric values and return a single numeric or string value:

minmax <- function(x) sprintf("[\%.2f, \%.2f]", min(x), max(x))
mean_na <- function(x) mean(x, na.rm = TRUE)

datasummary(hp + mpg ~ minmax + mean_na, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> minmax </th>
   <th style="text-align:right;"> mean_na </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> [52.00, 335.00] </td>
   <td style="text-align:right;"> 146.69 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> [10.40, 33.90] </td>
   <td style="text-align:right;"> 20.09 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# To handle missing values, you can pass arguments to your functions using
# '*Arguments()'

datasummary(hp + mpg ~ mean * Arguments(na.rm = TRUE), data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> mean </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 146.69 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 20.09 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# For convenience, 'modelsummary' supplies several convenience functions
# with the argument `na.rm=TRUE` by default: Mean, Median, Min, Max, SD, Var,
# P0, P25, P50, P75, P100, NUnique, Histogram

datasummary(hp + mpg ~ Mean + SD + Histogram, data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> Mean </th>
   <th style="text-align:right;"> SD </th>
   <th style="text-align:right;"> Histogram </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 146.69 </td>
   <td style="text-align:right;"> 68.56 </td>
   <td style="text-align:right;"> ▅▅▇▂▆▂▃▁▁ </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 20.09 </td>
   <td style="text-align:right;"> 6.03 </td>
   <td style="text-align:right;"> ▂▅▇▇▆▃▁▁▂▂ </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# These functions also accept a 'fmt' argument which allows you to
# round/format the results

datasummary(hp + mpg ~ Mean * Arguments(fmt = "\%.3f") + SD * Arguments(fmt = "\%.1f"), data = mtcars)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> Mean </th>
   <th style="text-align:right;"> SD </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 146.688 </td>
   <td style="text-align:right;"> 68.6 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 20.091 </td>
   <td style="text-align:right;"> 6.0 </td>
  </tr>
</tbody>
</table>
}}


\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# Save your tables to a variety of output formats:
f <- hp + mpg ~ Mean + SD
#datasummary(f, data = mtcars, output = 'table.html')
#datasummary(f, data = mtcars, output = 'table.tex')
#datasummary(f, data = mtcars, output = 'table.md')
#datasummary(f, data = mtcars, output = 'table.docx')
#datasummary(f, data = mtcars, output = 'table.pptx')
#datasummary(f, data = mtcars, output = 'table.jpg')
#datasummary(f, data = mtcars, output = 'table.png')

# Display human-readable code
#datasummary(f, data = mtcars, output = 'html')
#datasummary(f, data = mtcars, output = 'markdown')
#datasummary(f, data = mtcars, output = 'latex')

# Return a table object to customize using a table-making package
#datasummary(f, data = mtcars, output = 'gt')
#datasummary(f, data = mtcars, output = 'kableExtra')

datasummary(f, data = mtcars, output = 'flextable')
}\if{html}{\out{</div>}}\if{html}{\out{
<div class="tabwid"><style>.cl-ed196daa\{\}.cl-ed14ec80\{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;\}.cl-ed1787ce\{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;\}.cl-ed17949e\{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1.5pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;\}.cl-ed1794a8\{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;\}.cl-ed1794a9\{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;\}.tabwid \{
  font-size: initial;
  padding-bottom: 1em;
\}
}}


.tabwid table{
border-spacing:0px !important;
border-collapse:collapse;
line-height:1;
margin-left:auto;
margin-right:auto;
border-width: 0;
border-color: transparent;
caption-side: top;
}
.tabwid-caption-bottom table{
caption-side: bottom;
}
.tabwid_left table{
margin-left:0;
}
.tabwid_right table{
margin-right:0;
}
.tabwid td, .tabwid th {
padding: 0;
}
.tabwid a {
text-decoration: none;
}
.tabwid thead {
background-color: transparent;
}
.tabwid tfoot {
background-color: transparent;
}
.tabwid table tr {
background-color: transparent;
}
.katex-display {
margin: 0 0 !important;
}\if{html}{\out{</style>}}\if{html}{\out{<table data-quarto-disable-processing='true' class='cl-ed196daa'>}}\if{html}{\out{<thead>}}\if{html}{\out{<tr style="overflow-wrap:break-word;">}}\if{html}{\out{<th class="cl-ed17949e">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}} \if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</th>}}\if{html}{\out{<th class="cl-ed17949e">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}Mean\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</th>}}\if{html}{\out{<th class="cl-ed17949e">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}SD\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</th>}}\if{html}{\out{</tr>}}\if{html}{\out{</thead>}}\if{html}{\out{<tbody>}}\if{html}{\out{<tr style="overflow-wrap:break-word;">}}\if{html}{\out{<td class="cl-ed1794a8">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}hp\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</td>}}\if{html}{\out{<td class="cl-ed1794a8">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}146.69\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</td>}}\if{html}{\out{<td class="cl-ed1794a8">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}68.56\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</td>}}\if{html}{\out{</tr>}}\if{html}{\out{<tr style="overflow-wrap:break-word;">}}\if{html}{\out{<td class="cl-ed1794a9">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}mpg\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</td>}}\if{html}{\out{<td class="cl-ed1794a9">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}20.09\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</td>}}\if{html}{\out{<td class="cl-ed1794a9">}}\if{html}{\out{<p class="cl-ed1787ce">}}\if{html}{\out{<span class="cl-ed14ec80">}}6.03\if{html}{\out{</span>}}\if{html}{\out{</p>}}\if{html}{\out{</td>}}\if{html}{\out{</tr>}}\if{html}{\out{</tbody>}}\if{html}{\out{</table>}}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{
datasummary(f, data = mtcars, output = 'huxtable')
#> Warning in knit_print.huxtable(x, ...): Unrecognized output format "". Using `to_screen` to print huxtables.
#> Set options("huxtable.knitr_output_format") manually to "latex", "html", "rtf", "docx", "pptx", "md" or "screen".
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{                       ──────────────────────────
                                 Mean     SD     
                       ──────────────────────────
                         hp      146.69   68.56  
                         mpg     20.09    6.03   
                       ──────────────────────────
}\if{html}{\out{</div>}}

Column names: , Mean, SD

\if{html}{\out{<div class="sourceCode r">}}\preformatted{
# add_rows
new_rows <- data.frame(a = 1:2, b = 2:3, c = 4:5)
attr(new_rows, 'position') <- c(1, 3)
datasummary(mpg + hp ~ mean + sd, data = mtcars, add_rows = new_rows)
}\if{html}{\out{</div>}}\if{html}{\out{
<table class="table" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;">   </th>
   <th style="text-align:right;"> mean </th>
   <th style="text-align:right;"> sd </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> 1.00 </td>
   <td style="text-align:right;"> 2.00 </td>
   <td style="text-align:right;"> 4.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> mpg </td>
   <td style="text-align:right;"> 20.09 </td>
   <td style="text-align:right;"> 6.03 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> 2.00 </td>
   <td style="text-align:right;"> 3.00 </td>
   <td style="text-align:right;"> 5.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> hp </td>
   <td style="text-align:right;"> 146.69 </td>
   <td style="text-align:right;"> 68.56 </td>
  </tr>
</tbody>
</table>
}}
}

\references{
Arel-Bundock V (2022). “modelsummary: Data and Model Summaries in R.” \emph{Journal of Statistical Software}, \emph{103}(1), 1-23. \doi{10.18637/jss.v103.i01}.'
}
